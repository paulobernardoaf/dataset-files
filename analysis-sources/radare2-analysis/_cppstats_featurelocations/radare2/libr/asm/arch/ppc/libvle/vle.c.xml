<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\ppc\libvle\vle.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vle_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INTERNAL_PPC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;options&amp;VLE_INTERNAL_PPC)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_BD15</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_BD15b</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_BD15c</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_BD24</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_D</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_D8</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_D8_N</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_I16A</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_I16L</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_I16LS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_IA16</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_IA16U</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_LI20</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_M</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_SCI8</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_SCI8CR</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_SCI8I</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_X</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_XCR</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_XL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_XLSP</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_XRA</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_X</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_XL</name></cpp:macro> <cpp:value>0x03FFF801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_D</name></cpp:macro> <cpp:value>0x03FFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_D8</name></cpp:macro> <cpp:value>0x03FF00FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_I16A</name></cpp:macro> <cpp:value>0x03FF07FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_SCI8</name></cpp:macro> <cpp:value>0x03FF07FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_I16L</name></cpp:macro> <cpp:value>0x03FF07FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_BD24</name></cpp:macro> <cpp:value>0x03FFFFFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_BD15</name></cpp:macro> <cpp:value>0x000CFFFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_IA16</name></cpp:macro> <cpp:value>0x03FF07FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_LI20</name></cpp:macro> <cpp:value>0x03FF7FFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MASK_M</name></cpp:macro> <cpp:value>0x03FFFFFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_XO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_EVX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_CMP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DCBF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DCBL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DCI</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_EXT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_A</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_XFX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_XER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MFPR</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MTPR</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_X_EI</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_XRA</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_X</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_XO</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_EVX</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_CMP</name></cpp:macro> <cpp:value>0x039FF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_DCBF</name></cpp:macro> <cpp:value>0x00FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_DCBL</name></cpp:macro> <cpp:value>0x01FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_DCI</name></cpp:macro> <cpp:value>0x00FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_EXT</name></cpp:macro> <cpp:value>0x03FF0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_A</name></cpp:macro> <cpp:value>0x01FFFFC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_XFX</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_XER</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_MFPR</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MASK_MTPR</name></cpp:macro> <cpp:value>0x03FFF800</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ppc_t</name></type> <name><name>ppc_ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"add"</literal></expr> , <expr><literal type="number">0x7C000214</literal></expr>, <expr><literal type="number">0x7C000214</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"add."</literal></expr> , <expr><literal type="number">0x7C000214</literal></expr>, <expr><literal type="number">0x7C000211</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addc"</literal></expr> , <expr><literal type="number">0x7C000014</literal></expr>, <expr><literal type="number">0x7C000014</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addc."</literal></expr> , <expr><literal type="number">0x7C000014</literal></expr>, <expr><literal type="number">0x7C000011</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addco"</literal></expr> , <expr><literal type="number">0x7C000014</literal></expr>, <expr><literal type="number">0x7C000414</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addco."</literal></expr> , <expr><literal type="number">0x7C000014</literal></expr>, <expr><literal type="number">0x7C000415</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"adde"</literal></expr> , <expr><literal type="number">0x7C000114</literal></expr>, <expr><literal type="number">0x7C000114</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"adde."</literal></expr> , <expr><literal type="number">0x7C000114</literal></expr>, <expr><literal type="number">0x7C000111</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addeo"</literal></expr> , <expr><literal type="number">0x7C000114</literal></expr>, <expr><literal type="number">0x7C000514</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addeo."</literal></expr> , <expr><literal type="number">0x7C000114</literal></expr>, <expr><literal type="number">0x7C000515</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addme"</literal></expr> , <expr><literal type="number">0x7C0001D4</literal></expr>, <expr><literal type="number">0x7C0001D4</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addme."</literal></expr> , <expr><literal type="number">0x7C0001D4</literal></expr>, <expr><literal type="number">0x7C0001D1</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addmeo"</literal></expr> , <expr><literal type="number">0x7C0001D4</literal></expr>, <expr><literal type="number">0x7C0005D4</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addmeo."</literal></expr> , <expr><literal type="number">0x7C0001D4</literal></expr>, <expr><literal type="number">0x7C0005D5</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addo"</literal></expr> , <expr><literal type="number">0x7C000214</literal></expr>, <expr><literal type="number">0x7C000614</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addo."</literal></expr> , <expr><literal type="number">0x7C000214</literal></expr>, <expr><literal type="number">0x7C000615</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addze"</literal></expr> , <expr><literal type="number">0x7C000194</literal></expr>, <expr><literal type="number">0x7C000194</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addze."</literal></expr> , <expr><literal type="number">0x7C000194</literal></expr>, <expr><literal type="number">0x7C000191</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addzeo"</literal></expr> , <expr><literal type="number">0x7C000194</literal></expr>, <expr><literal type="number">0x7C000594</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addzeo."</literal></expr> , <expr><literal type="number">0x7C000194</literal></expr>, <expr><literal type="number">0x7C000595</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr> , <expr><literal type="number">0x7C000038</literal></expr>, <expr><literal type="number">0x7C000038</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and."</literal></expr> , <expr><literal type="number">0x7C000038</literal></expr>, <expr><literal type="number">0x7C000039</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andc"</literal></expr> , <expr><literal type="number">0x7C000078</literal></expr>, <expr><literal type="number">0x7C000078</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andc."</literal></expr> , <expr><literal type="number">0x7C000078</literal></expr>, <expr><literal type="number">0x7C000079</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brinc"</literal></expr> , <expr><literal type="number">0x1000020F</literal></expr>, <expr><literal type="number">0x1000020F</literal> <operator>|</operator> <name>F_MASK_EVX</name></expr> , <expr><name>F_EVX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp"</literal></expr> , <expr><literal type="number">0x7C000000</literal></expr>, <expr><literal type="number">0x7C000000</literal> <operator>|</operator> <name>F_MASK_CMP</name></expr> , <expr><name>F_CMP</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpl"</literal></expr> , <expr><literal type="number">0x7C000040</literal></expr>, <expr><literal type="number">0x7C000040</literal> <operator>|</operator> <name>F_MASK_CMP</name></expr> , <expr><name>F_CMP</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzd"</literal></expr> , <expr><literal type="number">0x7C000074</literal></expr>, <expr><literal type="number">0x7C000074</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzd."</literal></expr> , <expr><literal type="number">0x7C000074</literal></expr>, <expr><literal type="number">0x7C000075</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzw"</literal></expr> , <expr><literal type="number">0x7C000034</literal></expr>, <expr><literal type="number">0x7C000034</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzw."</literal></expr> , <expr><literal type="number">0x7C000034</literal></expr>, <expr><literal type="number">0x7C000035</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcba"</literal></expr> , <expr><literal type="number">0x7C0005EC</literal></expr>, <expr><literal type="number">0x7C0005EC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbf"</literal></expr> , <expr><literal type="number">0x7C0000AC</literal></expr>, <expr><literal type="number">0x7C0000AC</literal> <operator>|</operator> <name>F_MASK_DCBF</name></expr>, <expr><name>F_DCBF</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbfep"</literal></expr> , <expr><literal type="number">0x7C0000FE</literal></expr>, <expr><literal type="number">0x7C0000FE</literal> <operator>|</operator> <name>F_MASK_DCBF</name></expr>, <expr><name>F_DCBF</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbi"</literal></expr> , <expr><literal type="number">0x7C0003AC</literal></expr>, <expr><literal type="number">0x7C0003AC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcblc"</literal></expr> , <expr><literal type="number">0x7C00030C</literal></expr>, <expr><literal type="number">0x7C00030C</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbst"</literal></expr> , <expr><literal type="number">0x7C00006C</literal></expr>, <expr><literal type="number">0x7C00006C</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbt"</literal></expr> , <expr><literal type="number">0x7C00022C</literal></expr>, <expr><literal type="number">0x7C00022C</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtep"</literal></expr> , <expr><literal type="number">0x7C00027E</literal></expr>, <expr><literal type="number">0x7C00027E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtls"</literal></expr> , <expr><literal type="number">0x7C00014C</literal></expr>, <expr><literal type="number">0x7C00014C</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtst"</literal></expr> , <expr><literal type="number">0x7C0001EC</literal></expr>, <expr><literal type="number">0x7C0001EC</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtstep"</literal></expr> , <expr><literal type="number">0x7C0001FE</literal></expr>, <expr><literal type="number">0x7C0001FE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtstls"</literal></expr> , <expr><literal type="number">0x7C00010C</literal></expr>, <expr><literal type="number">0x7C00010C</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbz"</literal></expr> , <expr><literal type="number">0x7C0007EC</literal></expr>, <expr><literal type="number">0x7C0007EC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbzep"</literal></expr> , <expr><literal type="number">0x7C0007FE</literal></expr>, <expr><literal type="number">0x7C0007FE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dci"</literal></expr> , <expr><literal type="number">0x7C00038C</literal></expr>, <expr><literal type="number">0x7C00038C</literal> <operator>|</operator> <name>F_MASK_DCI</name></expr> , <expr><name>F_DCI</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcread"</literal></expr> , <expr><literal type="number">0x7C00028C</literal></expr>, <expr><literal type="number">0x7C00028C</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcread"</literal></expr> , <expr><literal type="number">0x7C0003CC</literal></expr>, <expr><literal type="number">0x7C0003CC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divw"</literal></expr> , <expr><literal type="number">0x7C0003D6</literal></expr>, <expr><literal type="number">0x7C0003D6</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divw."</literal></expr> , <expr><literal type="number">0x7C0003D6</literal></expr>, <expr><literal type="number">0x7C0003D7</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwo"</literal></expr> , <expr><literal type="number">0x7C0003D6</literal></expr>, <expr><literal type="number">0x7C0007D6</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwo."</literal></expr> , <expr><literal type="number">0x7C0003D6</literal></expr>, <expr><literal type="number">0x7C0007D7</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwu"</literal></expr> , <expr><literal type="number">0x7C000396</literal></expr>, <expr><literal type="number">0x7C000396</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwu."</literal></expr> , <expr><literal type="number">0x7C000396</literal></expr>, <expr><literal type="number">0x7C000397</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwuo"</literal></expr> , <expr><literal type="number">0x7C000396</literal></expr>, <expr><literal type="number">0x7C000796</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwuo."</literal></expr> , <expr><literal type="number">0x7C000396</literal></expr>, <expr><literal type="number">0x7C000797</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsb"</literal></expr> , <expr><literal type="number">0x7C000774</literal></expr>, <expr><literal type="number">0x7C000774</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsb."</literal></expr> , <expr><literal type="number">0x7C000774</literal></expr>, <expr><literal type="number">0x7C000775</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsw"</literal></expr> , <expr><literal type="number">0x7C000734</literal></expr>, <expr><literal type="number">0x7C000734</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsw."</literal></expr> , <expr><literal type="number">0x7C000734</literal></expr>, <expr><literal type="number">0x7C000735</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbi"</literal></expr> , <expr><literal type="number">0x7C0007AC</literal></expr>, <expr><literal type="number">0x7C0007AC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbiep"</literal></expr> , <expr><literal type="number">0x7C0007BE</literal></expr>, <expr><literal type="number">0x7C0007BE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icblc"</literal></expr> , <expr><literal type="number">0x7C0001CC</literal></expr>, <expr><literal type="number">0x7C0001CC</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbt"</literal></expr> , <expr><literal type="number">0x7C00002C</literal></expr>, <expr><literal type="number">0x7C00002C</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbtls"</literal></expr> , <expr><literal type="number">0x7C0003CC</literal></expr>, <expr><literal type="number">0x7C0003CC</literal> <operator>|</operator> <name>F_MASK_DCBL</name></expr>, <expr><name>F_DCBL</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ici"</literal></expr> , <expr><literal type="number">0x7C00078C</literal></expr>, <expr><literal type="number">0x7C00078C</literal> <operator>|</operator> <name>F_MASK_DCI</name></expr> , <expr><name>F_DCI</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icread"</literal></expr> , <expr><literal type="number">0x7C0007CC</literal></expr>, <expr><literal type="number">0x7C0007CC</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"isel"</literal></expr> , <expr><literal type="number">0x7C00001E</literal></expr>, <expr><literal type="number">0x7C00001E</literal> <operator>|</operator> <name>F_MASK_A</name></expr> , <expr><name>F_A</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"iseleq"</literal></expr> , <expr><literal type="number">0x7C00001E</literal></expr>, <expr><literal type="number">0x7C00009E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_A</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"iselgt"</literal></expr> , <expr><literal type="number">0x7C00001E</literal></expr>, <expr><literal type="number">0x7C00005E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_A</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"isellt"</literal></expr> , <expr><literal type="number">0x7C00001E</literal></expr>, <expr><literal type="number">0x7C00001E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_A</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbepx"</literal></expr> , <expr><literal type="number">0x7C0000BE</literal></expr>, <expr><literal type="number">0x7C0000BE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzux"</literal></expr> , <expr><literal type="number">0x7C0000EE</literal></expr>, <expr><literal type="number">0x7C0000EE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzux"</literal></expr> , <expr><literal type="number">0x7C0000EE</literal></expr>, <expr><literal type="number">0x7C0000EE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzx"</literal></expr> , <expr><literal type="number">0x7C0000AE</literal></expr>, <expr><literal type="number">0x7C0000AE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhaux"</literal></expr> , <expr><literal type="number">0x7C0002EE</literal></expr>, <expr><literal type="number">0x7C0002EE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhax"</literal></expr> , <expr><literal type="number">0x7C0002AE</literal></expr>, <expr><literal type="number">0x7C0002AE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhbrx"</literal></expr> , <expr><literal type="number">0x7C00062C</literal></expr>, <expr><literal type="number">0x7C00062C</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhepx"</literal></expr> , <expr><literal type="number">0x7C00023E</literal></expr>, <expr><literal type="number">0x7C00023E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzux"</literal></expr> , <expr><literal type="number">0x7C00026E</literal></expr>, <expr><literal type="number">0x7C00026E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzx"</literal></expr> , <expr><literal type="number">0x7C00022E</literal></expr>, <expr><literal type="number">0x7C00022E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lswi"</literal></expr> , <expr><literal type="number">0x7C0004AA</literal></expr>, <expr><literal type="number">0x7C0004AA</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lswx"</literal></expr> , <expr><literal type="number">0x7C00042A</literal></expr>, <expr><literal type="number">0x7C00042A</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwarx"</literal></expr> , <expr><literal type="number">0x7C000028</literal></expr>, <expr><literal type="number">0x7C000028</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwarx."</literal></expr> , <expr><literal type="number">0x7C000029</literal></expr>, <expr><literal type="number">0x7C000029</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwbrx"</literal></expr> , <expr><literal type="number">0x7C00042C</literal></expr>, <expr><literal type="number">0x7C00042C</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwepx"</literal></expr> , <expr><literal type="number">0x7C00003E</literal></expr>, <expr><literal type="number">0x7C00003E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzux"</literal></expr> , <expr><literal type="number">0x7C00006E</literal></expr>, <expr><literal type="number">0x7C00006E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzx"</literal></expr> , <expr><literal type="number">0x7C00002E</literal></expr>, <expr><literal type="number">0x7C00002E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mbar"</literal></expr> , <expr><literal type="number">0x7C0006AC</literal></expr>, <expr><literal type="number">0x7C0006AC</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfctr"</literal></expr> , <expr><literal type="number">0x7C0902A6</literal></expr>, <expr><literal type="number">0x7C1902A6</literal> <operator>|</operator> <name>F_MASK_MTPR</name></expr>, <expr><name>F_MTPR</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtctr"</literal></expr> , <expr><literal type="number">0x7C0903A6</literal></expr>, <expr><literal type="number">0x7C1903A6</literal> <operator>|</operator> <name>F_MASK_MTPR</name></expr>, <expr><name>F_MTPR</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mcrxr"</literal></expr> , <expr><literal type="number">0x7C000400</literal></expr>, <expr><literal type="number">0x7C000400</literal> <operator>|</operator> <name>F_MASK_XER</name></expr> , <expr><name>F_XER</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfcr"</literal></expr> , <expr><literal type="number">0x7C000026</literal></expr>, <expr><literal type="number">0x7C000026</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdcr"</literal></expr> , <expr><literal type="number">0x7C000286</literal></expr>, <expr><literal type="number">0x7C000286</literal> <operator>|</operator> <name>F_MASK_MFPR</name></expr>, <expr><name>F_MFPR</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdcrux"</literal></expr> , <expr><literal type="number">0x7C000246</literal></expr>, <expr><literal type="number">0x7C000246</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdcrx"</literal></expr> , <expr><literal type="number">0x7C000206</literal></expr>, <expr><literal type="number">0x7C000206</literal> <operator>|</operator> <name>F_MASK_EXT</name></expr> , <expr><name>F_EXT</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfmsr"</literal></expr> , <expr><literal type="number">0x7C0000A6</literal></expr>, <expr><literal type="number">0x7C0000A6</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfpmr"</literal></expr> , <expr><literal type="number">0x7C00029C</literal></expr>, <expr><literal type="number">0x7C00029C</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfspr"</literal></expr> , <expr><literal type="number">0x7C0002A6</literal></expr>, <expr><literal type="number">0x7C0002A6</literal> <operator>|</operator> <name>F_MASK_MFPR</name></expr>, <expr><name>F_MFPR</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"msync"</literal></expr> , <expr><literal type="number">0x7C0004AC</literal></expr>, <expr><literal type="number">0x7C0004AC</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_SYNC</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtcrf"</literal></expr> , <expr><literal type="number">0x7C000120</literal></expr>, <expr><literal type="number">0x7C000120</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtmsr"</literal></expr> , <expr><literal type="number">0x7C000124</literal></expr>, <expr><literal type="number">0x7C000124</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_XFX</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtspr"</literal></expr> , <expr><literal type="number">0x7C0003A6</literal></expr>, <expr><literal type="number">0x7C0003A6</literal> <operator>|</operator> <name>F_MASK_MTPR</name></expr>, <expr><name>F_MTPR</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhw"</literal></expr> , <expr><literal type="number">0x7C000096</literal></expr>, <expr><literal type="number">0x7C000096</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhw."</literal></expr> , <expr><literal type="number">0x7C000096</literal></expr>, <expr><literal type="number">0x7C000097</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhwu"</literal></expr> , <expr><literal type="number">0x7C000016</literal></expr>, <expr><literal type="number">0x7C000016</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhwu."</literal></expr> , <expr><literal type="number">0x7C000016</literal></expr>, <expr><literal type="number">0x7C000017</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mullw"</literal></expr> , <expr><literal type="number">0x7C0001D6</literal></expr>, <expr><literal type="number">0x7C0001D6</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mullw."</literal></expr> , <expr><literal type="number">0x7C0001D6</literal></expr>, <expr><literal type="number">0x7C0001D7</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nand"</literal></expr> , <expr><literal type="number">0x7C0003B8</literal></expr>, <expr><literal type="number">0x7C0003B8</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nand."</literal></expr> , <expr><literal type="number">0x7C0003B9</literal></expr>, <expr><literal type="number">0x7C0003B9</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"neg"</literal></expr> , <expr><literal type="number">0x7C0000D0</literal></expr>, <expr><literal type="number">0x7C0000D0</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_CPL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"neg."</literal></expr> , <expr><literal type="number">0x7C0000D0</literal></expr>, <expr><literal type="number">0x7C0000D1</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_CPL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nego"</literal></expr> , <expr><literal type="number">0x7C0004D0</literal></expr>, <expr><literal type="number">0x7C0004D0</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_CPL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nego."</literal></expr> , <expr><literal type="number">0x7C0004D0</literal></expr>, <expr><literal type="number">0x7C0004D1</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_CPL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nor"</literal></expr> , <expr><literal type="number">0x7C0000F8</literal></expr>, <expr><literal type="number">0x7C0000F8</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_NOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nor."</literal></expr> , <expr><literal type="number">0x7C0000F8</literal></expr>, <expr><literal type="number">0x7C0000F9</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_NOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr> , <expr><literal type="number">0x7C000378</literal></expr>, <expr><literal type="number">0x7C000378</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"or."</literal></expr> , <expr><literal type="number">0x7C000378</literal></expr>, <expr><literal type="number">0x7C000379</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"orc"</literal></expr> , <expr><literal type="number">0x7C000338</literal></expr>, <expr><literal type="number">0x7C000338</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"orc."</literal></expr> , <expr><literal type="number">0x7C000338</literal></expr>, <expr><literal type="number">0x7C000339</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slw"</literal></expr> , <expr><literal type="number">0x7C000030</literal></expr>, <expr><literal type="number">0x7C000030</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slw."</literal></expr> , <expr><literal type="number">0x7C000030</literal></expr>, <expr><literal type="number">0x7C000031</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sraw"</literal></expr> , <expr><literal type="number">0x7C000630</literal></expr>, <expr><literal type="number">0x7C000630</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sraw."</literal></expr> , <expr><literal type="number">0x7C000630</literal></expr>, <expr><literal type="number">0x7C000631</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srawi"</literal></expr> , <expr><literal type="number">0x7C000670</literal></expr>, <expr><literal type="number">0x7C000670</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srawi."</literal></expr> , <expr><literal type="number">0x7C000670</literal></expr>, <expr><literal type="number">0x7C000671</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srw"</literal></expr> , <expr><literal type="number">0x7C000430</literal></expr>, <expr><literal type="number">0x7C000430</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srw."</literal></expr> , <expr><literal type="number">0x7C000430</literal></expr>, <expr><literal type="number">0x7C000431</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbux"</literal></expr> , <expr><literal type="number">0x7C0001EE</literal></expr>, <expr><literal type="number">0x7C0001EE</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbx"</literal></expr> , <expr><literal type="number">0x7C0001AE</literal></expr>, <expr><literal type="number">0x7C0001AE</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthux"</literal></expr> , <expr><literal type="number">0x7C00036E</literal></expr>, <expr><literal type="number">0x7C00036E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthx"</literal></expr> , <expr><literal type="number">0x7C00032E</literal></expr>, <expr><literal type="number">0x7C00032E</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwux"</literal></expr> , <expr><literal type="number">0x7C00016E</literal></expr>, <expr><literal type="number">0x7C00016E</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwx"</literal></expr> , <expr><literal type="number">0x7C00012E</literal></expr>, <expr><literal type="number">0x7C00012E</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subf"</literal></expr> , <expr><literal type="number">0x7C000050</literal></expr>, <expr><literal type="number">0x7C000050</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subf."</literal></expr> , <expr><literal type="number">0x7C000050</literal></expr>, <expr><literal type="number">0x7C000051</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfc"</literal></expr> , <expr><literal type="number">0x7C000010</literal></expr>, <expr><literal type="number">0x7C000010</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfc."</literal></expr> , <expr><literal type="number">0x7C000010</literal></expr>, <expr><literal type="number">0x7C000011</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfco"</literal></expr> , <expr><literal type="number">0x7C000410</literal></expr>, <expr><literal type="number">0x7C000410</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfco."</literal></expr> , <expr><literal type="number">0x7C000410</literal></expr>, <expr><literal type="number">0x7C000411</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfe"</literal></expr> , <expr><literal type="number">0x7C000110</literal></expr>, <expr><literal type="number">0x7C000110</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfe."</literal></expr> , <expr><literal type="number">0x7C000110</literal></expr>, <expr><literal type="number">0x7C000111</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfeo"</literal></expr> , <expr><literal type="number">0x7C000510</literal></expr>, <expr><literal type="number">0x7C000510</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfeo."</literal></expr> , <expr><literal type="number">0x7C000510</literal></expr>, <expr><literal type="number">0x7C000511</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfo"</literal></expr> , <expr><literal type="number">0x7C000050</literal></expr>, <expr><literal type="number">0x7C000450</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfo."</literal></expr> , <expr><literal type="number">0x7C000050</literal></expr>, <expr><literal type="number">0x7C000451</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfze"</literal></expr> , <expr><literal type="number">0x7C000190</literal></expr>, <expr><literal type="number">0x7C000190</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfze."</literal></expr> , <expr><literal type="number">0x7C000190</literal></expr>, <expr><literal type="number">0x7C000191</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfzeo"</literal></expr> , <expr><literal type="number">0x7C000590</literal></expr>, <expr><literal type="number">0x7C000590</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfzeo."</literal></expr> , <expr><literal type="number">0x7C000590</literal></expr>, <expr><literal type="number">0x7C000591</literal> <operator>|</operator> <name>F_MASK_XO</name></expr> , <expr><name>F_XO</name></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbre"</literal></expr> , <expr><literal type="number">0x7C000764</literal></expr>, <expr><literal type="number">0x7C000764</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_NONE</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbwe"</literal></expr> , <expr><literal type="number">0x7C0007A4</literal></expr>, <expr><literal type="number">0x7C0007A4</literal> <operator>|</operator> <name>F_MASK_XFX</name></expr> , <expr><name>F_NONE</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wrtee"</literal></expr> , <expr><literal type="number">0x7C000106</literal></expr>, <expr><literal type="number">0x7C000106</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_X</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wrteei"</literal></expr> , <expr><literal type="number">0x7C000146</literal></expr>, <expr><literal type="number">0x7C000146</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>F_X_EI</name></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr> , <expr><literal type="number">0x7C000278</literal></expr>, <expr><literal type="number">0x7C000278</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xor."</literal></expr> , <expr><literal type="number">0x7C000279</literal></expr>, <expr><literal type="number">0x7C000279</literal> <operator>|</operator> <name>F_MASK_X</name></expr> , <expr><name>F_XRA</name></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>e_vle_t</name></type> <name><name>e_ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"e_add16i"</literal></expr> , <expr><literal type="number">0x1C000000</literal></expr>, <expr><literal type="number">0x1F000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_add2i."</literal></expr> , <expr><literal type="number">0x70008800</literal></expr>, <expr><literal type="number">0x70008800</literal> <operator>|</operator> <name>E_MASK_I16A</name></expr>, <expr><name>E_I16A</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_add2is"</literal></expr> , <expr><literal type="number">0x70009000</literal></expr>, <expr><literal type="number">0x70009000</literal> <operator>|</operator> <name>E_MASK_I16A</name></expr>, <expr><name>E_I16A</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_addi"</literal></expr> , <expr><literal type="number">0x18008000</literal></expr>, <expr><literal type="number">0x18008000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_addi."</literal></expr> , <expr><literal type="number">0x18008800</literal></expr>, <expr><literal type="number">0x18008800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_addic"</literal></expr> , <expr><literal type="number">0x18009000</literal></expr>, <expr><literal type="number">0x18009000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_addic."</literal></expr> , <expr><literal type="number">0x18009800</literal></expr>, <expr><literal type="number">0x18009800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_and2i."</literal></expr> , <expr><literal type="number">0x7000C800</literal></expr>, <expr><literal type="number">0x7000C800</literal> <operator>|</operator> <name>E_MASK_I16L</name></expr>, <expr><name>E_I16L</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_and2is."</literal></expr> , <expr><literal type="number">0x7000E800</literal></expr>, <expr><literal type="number">0x7000E800</literal> <operator>|</operator> <name>E_MASK_I16L</name></expr>, <expr><name>E_I16LS</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_andi"</literal></expr> , <expr><literal type="number">0x1800C000</literal></expr>, <expr><literal type="number">0x1800C000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8I</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_andi."</literal></expr> , <expr><literal type="number">0x1800C800</literal></expr>, <expr><literal type="number">0x1800C800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8I</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"e_beq"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A120000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_EQ</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bge"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A000000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_GE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bgt"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A110000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_GT</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ble"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A010000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_LE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_blt"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A100000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_LT</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bne"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A020000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_NE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bns"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A030000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VC</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bso"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A130000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bc"</literal></expr> , <expr><literal type="number">0x7A000000</literal></expr>, <expr><literal type="number">0x7A140000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bgel"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A000001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_EQ</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_blel"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A010001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_GE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bnel"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A020001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_GT</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bnsl"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A030001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_LE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bltl"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A110001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_LT</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bgtl"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A120001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_NE</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_beql"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A130001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_VC</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bsol"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A140001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bcl"</literal></expr> , <expr><literal type="number">0x7A000001</literal></expr>, <expr><literal type="number">0x7A140001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15</name></expr> , <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"e_bdnz"</literal></expr> , <expr><literal type="number">0x7A200000</literal></expr>, <expr><literal type="number">0x7A200000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15c</name></expr> , <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bdnzl"</literal></expr> , <expr><literal type="number">0x7A200001</literal></expr>, <expr><literal type="number">0x7A200001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15c</name></expr> , <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bdz"</literal></expr> , <expr><literal type="number">0x7A300000</literal></expr>, <expr><literal type="number">0x7A300000</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15c</name></expr> , <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bdzl"</literal></expr> , <expr><literal type="number">0x7A300001</literal></expr>, <expr><literal type="number">0x7A300001</literal> <operator>|</operator> <name>E_MASK_BD15</name></expr>, <expr><name>E_BD15c</name></expr> , <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_bl"</literal></expr> , <expr><literal type="number">0x78000001</literal></expr>, <expr><literal type="number">0x78000001</literal> <operator>|</operator> <name>E_MASK_BD24</name></expr>, <expr><name>E_BD24</name></expr> , <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_b"</literal></expr> , <expr><literal type="number">0x78000000</literal></expr>, <expr><literal type="number">0x78000000</literal> <operator>|</operator> <name>E_MASK_BD24</name></expr>, <expr><name>E_BD24</name></expr> , <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_JMP</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmp16i"</literal></expr> , <expr><literal type="number">0x70009800</literal></expr>, <expr><literal type="number">0x70009800</literal> <operator>|</operator> <name>E_MASK_IA16</name></expr>, <expr><name>E_IA16</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmph"</literal></expr> , <expr><literal type="number">0x7C00001C</literal></expr>, <expr><literal type="number">0x7C00001D</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XCR</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmph16i"</literal></expr> , <expr><literal type="number">0x7000B000</literal></expr>, <expr><literal type="number">0x7000B000</literal> <operator>|</operator> <name>E_MASK_IA16</name></expr>, <expr><name>E_IA16</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmphl"</literal></expr> , <expr><literal type="number">0x7C00005C</literal></expr>, <expr><literal type="number">0x7C00005D</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XCR</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmphl16i"</literal></expr> , <expr><literal type="number">0x7000B800</literal></expr>, <expr><literal type="number">0x7000B800</literal> <operator>|</operator> <name>E_MASK_IA16</name></expr>, <expr><name>E_IA16U</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmpl16i"</literal></expr> , <expr><literal type="number">0x7000A800</literal></expr>, <expr><literal type="number">0x7000A800</literal> <operator>|</operator> <name>E_MASK_IA16</name></expr>, <expr><name>E_IA16U</name></expr> , <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmpli"</literal></expr> , <expr><literal type="number">0x1880A800</literal></expr>, <expr><literal type="number">0x1880A800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8CR</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cmpi"</literal></expr> , <expr><literal type="number">0x1800A800</literal></expr>, <expr><literal type="number">0x1800A800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8CR</name></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crand"</literal></expr> , <expr><literal type="number">0x7C000202</literal></expr>, <expr><literal type="number">0x7C000202</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>,<expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crandc"</literal></expr> , <expr><literal type="number">0x7C000102</literal></expr>, <expr><literal type="number">0x7C000102</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>,<expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_creqv"</literal></expr> , <expr><literal type="number">0x7C000242</literal></expr>, <expr><literal type="number">0x7C000242</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>,<expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crnand"</literal></expr> , <expr><literal type="number">0x7C0001C2</literal></expr>, <expr><literal type="number">0x7C0001C2</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>,<expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crnor"</literal></expr> , <expr><literal type="number">0x7C000042</literal></expr>, <expr><literal type="number">0x7C000042</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_NOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_cror"</literal></expr> , <expr><literal type="number">0x7C000382</literal></expr>, <expr><literal type="number">0x7C000382</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crorc"</literal></expr> , <expr><literal type="number">0x7C000342</literal></expr>, <expr><literal type="number">0x7C000342</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_crxor"</literal></expr> , <expr><literal type="number">0x7C000182</literal></expr>, <expr><literal type="number">0x7C000182</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XL</name></expr> , <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lbz"</literal></expr> , <expr><literal type="number">0x30000000</literal></expr>, <expr><literal type="number">0x30000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lbzu"</literal></expr> , <expr><literal type="number">0x18000000</literal></expr>, <expr><literal type="number">0x18000000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lha"</literal></expr> , <expr><literal type="number">0x38000000</literal></expr>, <expr><literal type="number">0x38000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lhau"</literal></expr> , <expr><literal type="number">0x18000300</literal></expr>, <expr><literal type="number">0x18000300</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lhz"</literal></expr> , <expr><literal type="number">0x58000000</literal></expr>, <expr><literal type="number">0x58000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lhzu"</literal></expr> , <expr><literal type="number">0x18000100</literal></expr>, <expr><literal type="number">0x18000100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_li"</literal></expr> , <expr><literal type="number">0x70000000</literal></expr>, <expr><literal type="number">0x70000000</literal> <operator>|</operator> <name>E_MASK_LI20</name></expr>, <expr><name>E_LI20</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lis"</literal></expr> , <expr><literal type="number">0x7000E000</literal></expr>, <expr><literal type="number">0x7000E000</literal> <operator>|</operator> <name>E_MASK_I16L</name></expr>, <expr><name>E_I16LS</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmw"</literal></expr> , <expr><literal type="number">0x18000800</literal></expr>, <expr><literal type="number">0x18000800</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lwz"</literal></expr> , <expr><literal type="number">0x50000000</literal></expr>, <expr><literal type="number">0x53000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lwzu"</literal></expr> , <expr><literal type="number">0x18000200</literal></expr>, <expr><literal type="number">0x18000200</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_mcrf"</literal></expr> , <expr><literal type="number">0x7C000020</literal></expr>, <expr><literal type="number">0x7C000020</literal> <operator>|</operator> <name>E_MASK_XL</name></expr> , <expr><name>E_XLSP</name></expr> , <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_CR</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_mull2i"</literal></expr> , <expr><literal type="number">0x7000A000</literal></expr>, <expr><literal type="number">0x7000A000</literal> <operator>|</operator> <name>E_MASK_I16A</name></expr>, <expr><name>E_I16A</name></expr> , <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_mulli"</literal></expr> , <expr><literal type="number">0x1800A000</literal></expr>, <expr><literal type="number">0x1800A000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_or2i"</literal></expr> , <expr><literal type="number">0x7000C000</literal></expr>, <expr><literal type="number">0x7000C000</literal> <operator>|</operator> <name>E_MASK_I16L</name></expr>, <expr><name>E_I16L</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_or2is"</literal></expr> , <expr><literal type="number">0x7000D000</literal></expr>, <expr><literal type="number">0x7000D000</literal> <operator>|</operator> <name>E_MASK_I16L</name></expr>, <expr><name>E_I16LS</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ori"</literal></expr> , <expr><literal type="number">0x1800D000</literal></expr>, <expr><literal type="number">0x1800D000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ori."</literal></expr> , <expr><literal type="number">0x1800D800</literal></expr>, <expr><literal type="number">0x1800D800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlw"</literal></expr> , <expr><literal type="number">0x7C000230</literal></expr>, <expr><literal type="number">0x7C000230</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlw."</literal></expr> , <expr><literal type="number">0x7C000231</literal></expr>, <expr><literal type="number">0x7C000231</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlwi"</literal></expr> , <expr><literal type="number">0x7C000270</literal></expr>, <expr><literal type="number">0x7C000270</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlwi."</literal></expr> , <expr><literal type="number">0x7C000271</literal></expr>, <expr><literal type="number">0x7C000271</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlwimi"</literal></expr> , <expr><literal type="number">0x74000000</literal></expr>, <expr><literal type="number">0x74000000</literal> <operator>|</operator> <name>E_MASK_M</name></expr> , <expr><name>E_M</name></expr> , <expr><name>R_ANAL_OP_TYPE_ROR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_rlwinm"</literal></expr> , <expr><literal type="number">0x74000001</literal></expr>, <expr><literal type="number">0x74000001</literal> <operator>|</operator> <name>E_MASK_M</name></expr> , <expr><name>E_M</name></expr> , <expr><name>R_ANAL_OP_TYPE_ROR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_slwi"</literal></expr> , <expr><literal type="number">0x7C000070</literal></expr>, <expr><literal type="number">0x7C000070</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_slwi."</literal></expr> , <expr><literal type="number">0x7C000071</literal></expr>, <expr><literal type="number">0x7C000071</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_srwi"</literal></expr> , <expr><literal type="number">0x7C000470</literal></expr>, <expr><literal type="number">0x7C000470</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_srwi."</literal></expr> , <expr><literal type="number">0x7C000471</literal></expr>, <expr><literal type="number">0x7C000471</literal> <operator>|</operator> <name>E_MASK_X</name></expr> , <expr><name>E_XRA</name></expr> , <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stb"</literal></expr> , <expr><literal type="number">0x34000000</literal></expr>, <expr><literal type="number">0x34000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stbu"</literal></expr> , <expr><literal type="number">0x18000400</literal></expr>, <expr><literal type="number">0x18000400</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_sth"</literal></expr> , <expr><literal type="number">0x5C000000</literal></expr>, <expr><literal type="number">0x5C000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_sthu"</literal></expr> , <expr><literal type="number">0x18000500</literal></expr>, <expr><literal type="number">0x18000500</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmw"</literal></expr> , <expr><literal type="number">0x18000900</literal></expr>, <expr><literal type="number">0x18000900</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stw"</literal></expr> , <expr><literal type="number">0x54000000</literal></expr>, <expr><literal type="number">0x56000000</literal> <operator>|</operator> <name>E_MASK_D</name></expr> , <expr><name>E_D</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stwu"</literal></expr> , <expr><literal type="number">0x18000600</literal></expr>, <expr><literal type="number">0x18000600</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_subfic"</literal></expr> , <expr><literal type="number">0x1800B000</literal></expr>, <expr><literal type="number">0x1800B000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_subfic."</literal></expr> , <expr><literal type="number">0x1800B800</literal></expr>, <expr><literal type="number">0x1800B800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8</name></expr> , <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_xori"</literal></expr> , <expr><literal type="number">0x1800E000</literal></expr>, <expr><literal type="number">0x1800E000</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8I</name></expr> , <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_xori."</literal></expr> , <expr><literal type="number">0x1800E800</literal></expr>, <expr><literal type="number">0x1800E800</literal> <operator>|</operator> <name>E_MASK_SCI8</name></expr>, <expr><name>E_SCI8I</name></expr> , <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"e_ldmvcsrrw"</literal></expr> , <expr><literal type="number">0x18A01000</literal></expr>, <expr><literal type="number">0x18A01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ldmvdsrrw"</literal></expr> , <expr><literal type="number">0x18C01000</literal></expr>, <expr><literal type="number">0x18C01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ldmvgprw"</literal></expr> , <expr><literal type="number">0x18001000</literal></expr>, <expr><literal type="number">0x18001000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ldmvsprw"</literal></expr> , <expr><literal type="number">0x18201000</literal></expr>, <expr><literal type="number">0x18201000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_ldmvsrrw"</literal></expr> , <expr><literal type="number">0x18801000</literal></expr>, <expr><literal type="number">0x18801000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvcsrrw"</literal></expr> , <expr><literal type="number">0x18A01000</literal></expr>, <expr><literal type="number">0x18A01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvdsrrw"</literal></expr> , <expr><literal type="number">0x18C01000</literal></expr>, <expr><literal type="number">0x18C01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvgprw"</literal></expr> , <expr><literal type="number">0x18001000</literal></expr>, <expr><literal type="number">0x18001000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvmcsrrw"</literal></expr> , <expr><literal type="number">0x18E01000</literal></expr>, <expr><literal type="number">0x18E01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvsprw"</literal></expr> , <expr><literal type="number">0x18201000</literal></expr>, <expr><literal type="number">0x18201000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_lmvsrrw"</literal></expr> , <expr><literal type="number">0x18801000</literal></expr>, <expr><literal type="number">0x18801000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvcsrrw"</literal></expr> , <expr><literal type="number">0x18A01100</literal></expr>, <expr><literal type="number">0x18A01100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvdsrrw"</literal></expr> , <expr><literal type="number">0x18C01100</literal></expr>, <expr><literal type="number">0x18C01100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvgprw"</literal></expr> , <expr><literal type="number">0x18001100</literal></expr>, <expr><literal type="number">0x18001100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvmcsrrw"</literal></expr>, <expr><literal type="number">0x18E01100</literal></expr>, <expr><literal type="number">0x18E01000</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvsprw"</literal></expr> , <expr><literal type="number">0x18201100</literal></expr>, <expr><literal type="number">0x18201100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e_stmvsrrw"</literal></expr> , <expr><literal type="number">0x18801100</literal></expr>, <expr><literal type="number">0x18801100</literal> <operator>|</operator> <name>E_MASK_D8</name></expr> , <expr><name>E_D8_N</name></expr> , <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><name>TYPE_MEM</name></expr>, <expr><name>TYPE_REG</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>, <expr><name>TYPE_NONE</name></expr>}</block></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>se_vle_t</name></type> <name><name>se_ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"se_illegal"</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>, <expr><name>R_ANAL_COND_NV</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_isync"</literal></expr> , <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SYNC</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_sc"</literal></expr> , <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SWI</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_blr"</literal></expr> , <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RET</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_blrl"</literal></expr> , <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RET</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bctr"</literal></expr> , <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bctrl"</literal></expr> , <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_rfi"</literal></expr> , <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_rfci"</literal></expr> , <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_rfdi"</literal></expr> , <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_not"</literal></expr> , <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x002F</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NOT</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_neg"</literal></expr> , <expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NOT</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mflr"</literal></expr> , <expr><literal type="number">0x0080</literal></expr>, <expr><literal type="number">0x008F</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mtlr"</literal></expr> , <expr><literal type="number">0x0090</literal></expr>, <expr><literal type="number">0x009F</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mfctr"</literal></expr> , <expr><literal type="number">0x00A0</literal></expr>, <expr><literal type="number">0x00AF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mtctr"</literal></expr> , <expr><literal type="number">0x00B0</literal></expr>, <expr><literal type="number">0x00BF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_extzb"</literal></expr> , <expr><literal type="number">0x00C0</literal></expr>, <expr><literal type="number">0x00CF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_extsb"</literal></expr> , <expr><literal type="number">0x00D0</literal></expr>, <expr><literal type="number">0x00DF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_extzh"</literal></expr> , <expr><literal type="number">0x00E0</literal></expr>, <expr><literal type="number">0x00EF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_extsh"</literal></expr> , <expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mr"</literal></expr> , <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x01FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mtar"</literal></expr> , <expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">0x02FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mfar"</literal></expr> , <expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">0x03FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_add"</literal></expr> , <expr><literal type="number">0x0400</literal></expr>, <expr><literal type="number">0x04FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_mullw"</literal></expr> , <expr><literal type="number">0x0500</literal></expr>, <expr><literal type="number">0x05FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_sub"</literal></expr> , <expr><literal type="number">0x0600</literal></expr>, <expr><literal type="number">0x06FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_subf"</literal></expr> , <expr><literal type="number">0x0700</literal></expr>, <expr><literal type="number">0x07FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmp"</literal></expr> , <expr><literal type="number">0x0C00</literal></expr>, <expr><literal type="number">0x0CFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmpl"</literal></expr> , <expr><literal type="number">0x0D00</literal></expr>, <expr><literal type="number">0x0DFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmph"</literal></expr> , <expr><literal type="number">0x0E00</literal></expr>, <expr><literal type="number">0x0EFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmphl"</literal></expr> , <expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">0x0FFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_addi"</literal></expr> , <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x21FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_and"</literal></expr> , <expr><literal type="number">0x4600</literal></expr>, <expr><literal type="number">0x46FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_and."</literal></expr> , <expr><literal type="number">0x4700</literal></expr>, <expr><literal type="number">0x47FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_andi"</literal></expr> , <expr><literal type="number">0x2E00</literal></expr>, <expr><literal type="number">0x2FFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_andc"</literal></expr> , <expr><literal type="number">0x4500</literal></expr>, <expr><literal type="number">0x45FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_b"</literal></expr> , <expr><literal type="number">0xE800</literal></expr>, <expr><literal type="number">0xE8FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bl"</literal></expr> , <expr><literal type="number">0xE900</literal></expr>, <expr><literal type="number">0xE9FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"se_beq"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE6FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_EQ</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bge"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE0FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_GE</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bgt"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE5FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_GT</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_ble"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE1FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_LE</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_blt"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE4FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_LT</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bne"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE2FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_NE</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bns"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE3FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VC</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bso"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE7FF</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bc"</literal></expr> , <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xE7FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_VS</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0700</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_JMP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bclri"</literal></expr> , <expr><literal type="number">0x6000</literal></expr>, <expr><literal type="number">0x61FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bgeni"</literal></expr> , <expr><literal type="number">0x6200</literal></expr>, <expr><literal type="number">0x63FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bmaski"</literal></expr> , <expr><literal type="number">0x2C00</literal></expr>, <expr><literal type="number">0x2DFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_bseti"</literal></expr> , <expr><literal type="number">0x6400</literal></expr>, <expr><literal type="number">0x65FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_btsti"</literal></expr> , <expr><literal type="number">0x6600</literal></expr>, <expr><literal type="number">0x67FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmpi"</literal></expr> , <expr><literal type="number">0x2A00</literal></expr>, <expr><literal type="number">0x2BFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_cmpli"</literal></expr> , <expr><literal type="number">0x2200</literal></expr>, <expr><literal type="number">0x23FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_lbz"</literal></expr> , <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">0x8FFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_lbh"</literal></expr> , <expr><literal type="number">0xA000</literal></expr>, <expr><literal type="number">0xAFFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_li"</literal></expr> , <expr><literal type="number">0x4800</literal></expr>, <expr><literal type="number">0x4FFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x07F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_lwz"</literal></expr> , <expr><literal type="number">0xC000</literal></expr>, <expr><literal type="number">0xCFFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_or"</literal></expr> , <expr><literal type="number">0x4400</literal></expr>, <expr><literal type="number">0x44FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_slw"</literal></expr> , <expr><literal type="number">0x4200</literal></expr>, <expr><literal type="number">0x42FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_slwi"</literal></expr> , <expr><literal type="number">0x6C00</literal></expr>, <expr><literal type="number">0x6DFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_sraw"</literal></expr> , <expr><literal type="number">0x4100</literal></expr>, <expr><literal type="number">0x41FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_srawi"</literal></expr> , <expr><literal type="number">0x6A00</literal></expr>, <expr><literal type="number">0x6BFF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_srw"</literal></expr> , <expr><literal type="number">0x4000</literal></expr>, <expr><literal type="number">0x40FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_srwi"</literal></expr> , <expr><literal type="number">0x6800</literal></expr>, <expr><literal type="number">0x69FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_stb"</literal></expr> , <expr><literal type="number">0x9000</literal></expr>, <expr><literal type="number">0x9FFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_sth"</literal></expr> , <expr><literal type="number">0xB000</literal></expr>, <expr><literal type="number">0xBFFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_stw"</literal></expr> , <expr><literal type="number">0xD000</literal></expr>, <expr><literal type="number">0xDFFF</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_MEM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_subi"</literal></expr> , <expr><literal type="number">0x2400</literal></expr>, <expr><literal type="number">0x25FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"se_subi."</literal></expr> , <expr><literal type="number">0x2600</literal></expr>, <expr><literal type="number">0x27FF</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><name>R_ANAL_COND_AL</name></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>TYPE_IMM</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TYPE_REG</name></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_e_fields</name><parameter_list>(<parameter><decl><type><name>vle_t</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>e_vle_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>E_X</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_XRA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_XL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_D</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFFF0000</literal> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_D8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFFFFF00</literal> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_D8_N</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFFFFF00</literal> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_IA16U</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_IA16</name></expr>:</case>
<case>case <expr><name>E_I16A</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFFF0000</literal> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_SCI8</name></expr>:</case>
<case>case <expr><name>E_SCI8CR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>E_SCI8CR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ui8</name> <init>= <expr><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>scl</name> <init>= <expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x300</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>f</name> <init>= <expr><name>data</name> <operator>&amp;</operator> <literal type="number">0x400</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>scl</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>ui8</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xffffff00</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xffff00ff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xff00ffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0x00ffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_SCI8I</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ui8</name> <init>= <expr><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>scl</name> <init>= <expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x300</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>f</name> <init>= <expr><name>data</name> <operator>&amp;</operator> <literal type="number">0x400</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>scl</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>ui8</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xffffff00</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xffff00ff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0xff00ffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>ui8</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><literal type="number">0x00ffffff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_I16L</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_I16LS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_BD24</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFE</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <literal type="number">0xFE000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_BD15</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xC0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFFFE</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <literal type="number">0xFFFF0000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_BD15b</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x300000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFFFE</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <literal type="number">0xFFFF0000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_BD15c</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFFFE</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <literal type="number">0xFFFF0000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_LI20</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x03E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x001F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x80000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFF00000</literal> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_M</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7C0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_XCR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_XLSP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1C0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_NONE</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_ppc_fields</name><parameter_list>(<parameter><decl><type><name>vle_t</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ppc_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>F_X</name></expr>:</case>
<case>case <expr><name>F_XO</name></expr>:</case>
<case>case <expr><name>F_EVX</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_X_EI</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_XRA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_CMP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_DCBF</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x0E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_DCBL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_DCI</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xE00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_EXT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_A</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7C0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_XFX</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_XER</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x3800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F_MFPR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1FF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>F_MTPR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1E00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x1FF800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>E_NONE</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vle_t</name> <modifier>*</modifier></type><name>find_ppc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ppc_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_ops</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ppc_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>ppc_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vle_t</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>vle_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>anal_op</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>anal_op</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_ppc_fields</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vle_t</name> <modifier>*</modifier></type><name>find_e</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>e_vle_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>e_ops</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>e_vle_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>e_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vle_t</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>vle_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>anal_op</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>anal_op</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_e_fields</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vle_t</name> <modifier>*</modifier></type><name>find_se</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>data</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>se_vle_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>se_ops</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>se_vle_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>se_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vle_t</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>vle_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>anal_op</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>anal_op</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>shr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&lt;&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>shl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_REG</name> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_JMP</name> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x0100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0xFFFFFE00</literal> <operator>|</operator> <name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vle_init</name><parameter_list>(<parameter><decl><type><name>vle_handle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name> <operator>||</operator> <operator>!</operator><name>buffer</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>VLE_DEFAULTS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vle_option</name><parameter_list>(<parameter><decl><type><name>vle_handle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>option</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>vle_t</name><modifier>*</modifier></type> <name>vle_next</name><parameter_list>(<parameter><decl><type><name>vle_handle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vle_t</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>inc</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name><name>handle</name><operator>-&gt;</operator><name>inc</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>USE_INTERNAL_PPC</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>find_ppc</name> <argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>find_e</name> <argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>find_se</name> <argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inc</name></name> <operator>=</operator> <ternary><condition><expr><name>op</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vle_free</name><parameter_list>(<parameter><decl><type><name>vle_t</name><modifier>*</modifier></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vle_snprint</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>vle_t</name><modifier>*</modifier></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name> <init>= <expr><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>add</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name>add</name> <operator>&lt;</operator> <name>bufsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_REG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" r%u"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_IMM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" 0x%x(r%d)"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_JMP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" 0x%"</literal> <name>PFMT32x</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_CR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" cr%u"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
