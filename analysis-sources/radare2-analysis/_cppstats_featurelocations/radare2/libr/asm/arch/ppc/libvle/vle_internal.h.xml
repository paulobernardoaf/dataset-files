<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\ppc\libvle\vle_internal.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB_PPCVLE_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB_PPCVLE_INTERNAL</name></cpp:macro></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>shr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>shl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>field_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>anal_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name><name>types</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>e_vle_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>anal_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>field_t</name></type> <name><name>fields</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>se_vle_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>anal_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name><name>types</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ppc_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
