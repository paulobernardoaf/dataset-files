<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\propeller\propeller_disas.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROPELLER_DISAS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPELLER_DISAS_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROP_INSTR_MAXLEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<enum>enum <name>propeller_opcodes</name> <block>{
<decl><name>PROP_ABS</name> <init>= <expr><literal type="number">0x2A</literal></expr></init></decl>,
<decl><name>PROP_ABSNEG</name> <init>= <expr><literal type="number">0x2B</literal></expr></init></decl>,
<decl><name>PROP_ADD</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>PROP_ADDABS</name> <init>= <expr><literal type="number">0x22</literal></expr></init></decl>,
<decl><name>PROP_ADDS</name> <init>= <expr><literal type="number">0x34</literal></expr></init></decl>,
<decl><name>PROP_ADDSX</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>,
<decl><name>PROP_ADDX</name> <init>= <expr><literal type="number">0x32</literal></expr></init></decl>,
<decl><name>PROP_AND</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>PROP_ANDN</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>PROP_CALL</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>PROP_CMP</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,
<decl><name>PROP_CMPS</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,
<decl><name>PROP_CMPSUB</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>,
<decl><name>PROP_CMPSX</name> <init>= <expr><literal type="number">0x31</literal></expr></init></decl>,
<decl><name>PROP_CMPX</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,
<decl><name>PROP_DJNZ</name> <init>= <expr><literal type="number">0x39</literal></expr></init></decl>,
<decl><name>PROP_HUBOP</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>PROP_JMP</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>PROP_JMPRET</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>PROP_MAX</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,
<decl><name>PROP_MAXS</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>PROP_MIN</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,
<decl><name>PROP_MINS</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>PROP_MOV</name> <init>= <expr><literal type="number">0x28</literal></expr></init></decl>,
<decl><name>PROP_MOVD</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,
<decl><name>PROP_MOVI</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,
<decl><name>PROP_MOVS</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,
<decl><name>PROP_MUXC</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,
<decl><name>PROP_MUXNC</name> <init>= <expr><literal type="number">0x1d</literal></expr></init></decl>,
<decl><name>PROP_MUXNZ</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,
<decl><name>PROP_MUXZ</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,
<decl><name>PROP_NEG</name> <init>= <expr><literal type="number">0x29</literal></expr></init></decl>,
<decl><name>PROP_NEGC</name> <init>= <expr><literal type="number">0x2c</literal></expr></init></decl>,
<decl><name>PROP_NEGNC</name> <init>= <expr><literal type="number">0x2d</literal></expr></init></decl>,
<decl><name>PROP_NEGNZ</name> <init>= <expr><literal type="number">0x2f</literal></expr></init></decl>,
<decl><name>PROP_NEGZ</name> <init>= <expr><literal type="number">0x2e</literal></expr></init></decl>,
<decl><name>PROP_NOP</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>PROP_OR</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>PROP_RCL</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,
<decl><name>PROP_RCR</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,
<decl><name>PROP_RDBYTE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>PROP_RDLONG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>PROP_RDWORD</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>PROP_RET</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>PROP_REV</name> <init>= <expr><literal type="number">0x0f</literal></expr></init></decl>,
<decl><name>PROP_ROL</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>PROP_ROR</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>PROP_SAR</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,
<decl><name>PROP_SHL</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,
<decl><name>PROP_SHR</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,
<decl><name>PROP_SUB</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,
<decl><name>PROP_SUBABS</name> <init>= <expr><literal type="number">0x23</literal></expr></init></decl>,
<decl><name>PROP_SUBS</name> <init>= <expr><literal type="number">0x35</literal></expr></init></decl>,
<decl><name>PROP_SUBSX</name> <init>= <expr><literal type="number">0x37</literal></expr></init></decl>,
<decl><name>PROP_SUBX</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,
<decl><name>PROP_SUMC</name> <init>= <expr><literal type="number">0x24</literal></expr></init></decl>,
<decl><name>PROP_SUMNC</name> <init>= <expr><literal type="number">0x25</literal></expr></init></decl>,
<decl><name>PROP_SUMNZ</name> <init>= <expr><literal type="number">0x27</literal></expr></init></decl>,
<decl><name>PROP_SUMZ</name> <init>= <expr><literal type="number">0x26</literal></expr></init></decl>,
<decl><name>PROP_TEST</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>PROP_TESTN</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>PROP_TJNZ</name> <init>= <expr><literal type="number">0x3a</literal></expr></init></decl>,
<decl><name>PROP_TJZ</name> <init>= <expr><literal type="number">0x3b</literal></expr></init></decl>,
<decl><name>PROP_WAITCNT</name> <init>= <expr><literal type="number">0x3e</literal></expr></init></decl>,
<decl><name>PROP_WAITPEQ</name> <init>= <expr><literal type="number">0x3c</literal></expr></init></decl>,
<decl><name>PROP_WAITPNE</name> <init>= <expr><literal type="number">0x3d</literal></expr></init></decl>,
<decl><name>PROP_WAITVID</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>,
<decl><name>PROP_WRBYTE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>PROP_WRLONG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>PROP_WRWORD</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>PROP_XOR</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>propeller_ext_opcodes</name> <block>{
<decl><name>PROP_CLKSET</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>PROP_COGID</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>PROP_COGINIT</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>PROP_COGSTOP</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,
<decl><name>PROP_LOCKCLR</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,
<decl><name>PROP_LOCKNEW</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,
<decl><name>PROP_LOCKRET</name> <init>= <expr><literal type="number">0x1d</literal></expr></init></decl>,
<decl><name>PROP_LOCKSET</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>propeller_conditions</name> <block>{
<decl><name>PROP_IF_ALWAYS</name> <init>= <expr><literal type="number">0xf</literal></expr></init></decl>,
<decl><name>PROP_IF_NEVER</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>PROP_IF_E</name> <init>= <expr><literal type="number">0xa</literal></expr></init></decl>,
<decl><name>PROP_IF_NE</name> <init>= <expr><literal type="number">0x5</literal></expr></init></decl>,
<decl><name>PROP_IF_A</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>PROP_IF_B</name> <init>= <expr><literal type="number">0xc</literal></expr></init></decl>,
<decl><name>PROP_IF_AE</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>,
<decl><name>PROP_IF_BE</name> <init>= <expr><literal type="number">0xe</literal></expr></init></decl>,
<decl><name>PROP_IF_C_EQ_Z</name> <init>= <expr><literal type="number">0x9</literal></expr></init></decl>,
<decl><name>PROP_IF_C_NE_Z</name> <init>= <expr><literal type="number">0x6</literal></expr></init></decl>,
<decl><name>PROP_IF_C_AND_Z</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>PROP_IF_C_AND_NZ</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>PROP_IF_NC_AND_Z</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>PROP_IF_NZ_OR_NC</name> <init>= <expr><literal type="number">0x7</literal></expr></init></decl>,
<decl><name>PROP_IF_NZ_OR_C</name> <init>= <expr><literal type="number">0xd</literal></expr></init></decl>,
<decl><name>PROP_IF_Z_OR_NC</name> <init>= <expr><literal type="number">0xb</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>propeller_cmd</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>immed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>instr</name><index>[<expr><name>PROP_INSTR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>operands</name><index>[<expr><name>PROP_INSTR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>propeller_decode_command</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>propeller_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
