<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\i4004\i4004dis.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i4004_ins_len</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>i4004_e</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"wrm"</literal></expr>,
<expr><literal type="string">"wmp"</literal></expr>,
<expr><literal type="string">"wrr"</literal></expr>,
<expr><literal type="string">"wpm"</literal></expr>,
<expr><literal type="string">"wr0"</literal></expr>,
<expr><literal type="string">"wr1"</literal></expr>,
<expr><literal type="string">"wr2"</literal></expr>,
<expr><literal type="string">"wr3"</literal></expr>,
<expr><literal type="string">"sbm"</literal></expr>,
<expr><literal type="string">"rdm"</literal></expr>,
<expr><literal type="string">"rdr"</literal></expr>,
<expr><literal type="string">"adm"</literal></expr>,
<expr><literal type="string">"rd0"</literal></expr>,
<expr><literal type="string">"rd1"</literal></expr>,
<expr><literal type="string">"rd2"</literal></expr>,
<expr><literal type="string">"rd3"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>i4004_f</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"clb"</literal></expr>,
<expr><literal type="string">"clc"</literal></expr>,
<expr><literal type="string">"iac"</literal></expr>,
<expr><literal type="string">"cmc"</literal></expr>,
<expr><literal type="string">"cma"</literal></expr>,
<expr><literal type="string">"ral"</literal></expr>,
<expr><literal type="string">"rar"</literal></expr>,
<expr><literal type="string">"tcc"</literal></expr>,
<expr><literal type="string">"dac"</literal></expr>,
<expr><literal type="string">"tcs"</literal></expr>,
<expr><literal type="string">"stc"</literal></expr>,
<expr><literal type="string">"daa"</literal></expr>,
<expr><literal type="string">"kbp"</literal></expr>,
<expr><literal type="string">"dcl"</literal></expr>,
<expr><literal type="string">"invalid"</literal></expr>,
<expr><literal type="string">"invalid"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>i4004_get_ins_len</name> <parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>hex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>high</name> <init>= <expr><operator>(</operator><name>hex</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name><name>i4004_ins_len</name><index>[<expr><name>high</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hex</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>i4004dis</name> <parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name> <init>= <expr><call><name>i4004_get_ins_len</name> <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>high</name> <init>= <expr><operator>(</operator><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>low</name> <init>= <expr><operator>(</operator><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>high</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <ternary><condition><expr><name>low</name></expr>?</condition><then> <expr><literal type="string">"invalid"</literal></expr></then><else>: <expr><literal type="string">"nop"</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"jcn %d 0x%02x"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"src r%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"fim r%d, 0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"jin r%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"fin r%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"jun 0x%03x"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>low</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"jms 0x%03x"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>low</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"inc r%d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"isz r%d, 0x%02x"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"add r%d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"sub r%d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"ld r%d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"xch r%d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bbl %d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"ldm %d"</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>i4004_e</name><index>[<expr><name>low</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>i4004_f</name><index>[<expr><name>low</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>rlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
