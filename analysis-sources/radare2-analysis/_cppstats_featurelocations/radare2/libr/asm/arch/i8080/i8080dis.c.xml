<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\i8080\i8080dis.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>reg</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"sp"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>push_rp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"psw"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cond</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"nz"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"nc"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"po"</literal></expr>, <expr><literal type="string">"pe"</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"m"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rst</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"7"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>arg_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
}</block>;</struct>

<struct><specifier>static</specifier> struct <name>opcode_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arg_t</name></name></type> <name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>;</decl_stmt>
}</block> <decl><name><name>opcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"hlt"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"mvi"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"jmp"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"mov"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"lxi"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>rp</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"sta"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"lda"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"lhld"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"shld"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ldax"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"stax"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"xchg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"sphl"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"xthl"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"push"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>push_rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"pop"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>push_rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"in"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"out"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"inx"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"dcx"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"inr"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"dcr"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"dad"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>rp</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"cma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"rlc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"rrc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ral"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"rar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ei"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"di"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"nop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"stc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"cmc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"pchl"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"daa"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"call"</literal></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ret"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"rst"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>rst</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>cond</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"j"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>cond</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>cond</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x80</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"adi"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"adc"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x88</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"aci"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x90</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"sui"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"sbb"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x98</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"sbi"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ana"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa0</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"ani"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"xra"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa8</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"xri"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ora"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb0</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"ori"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"cmp"</literal></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>reg</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb8</literal><operator>|</operator><literal type="number">0x46</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"cpi"</literal></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"nop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arg_t</name></name> <specifier>const</specifier><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>fmt</name><index>[<expr><operator>(</operator><name>cmd</name> <operator>&gt;&gt;</operator> <name><name>arg</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>mask</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%04X"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>i8080_disasm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier><modifier>*</modifier> <specifier>const</specifier></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>text_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>cmd</name> <init>= <expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>opcode_t</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <operator>&amp;</operator><name><name>opcodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>op</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>grp</name> <init>= <expr><name>cmd</name> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>mask</name></name> <operator>&lt;&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>shift</name></name><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>mask</name></name> <operator>&lt;&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>shift</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>branch</name> <init>= <expr><operator>(</operator><name>grp</name> <operator>==</operator> <literal type="number">0xc0</literal> <operator>||</operator> <name>grp</name> <operator>==</operator> <literal type="number">0xc2</literal> <operator>||</operator> <name>grp</name> <operator>==</operator> <literal type="number">0xc4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>grp</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>branch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>arg</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>arg1</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>branch</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>arg</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>arg2</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_sz</name></expr></argument>, <argument><expr><literal type="string">"db 0x%02x"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
