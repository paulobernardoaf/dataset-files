<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\nios\gnu\nios2-dis.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/nios2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EMBEDDED_ENV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMTAB_AVAILABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elf-bfd.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSNLEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>_nios2_opcode_hash</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type><name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_nios2_opcode_hash</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>nios2_opcode_hash</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>bfd_boolean</name></type> <name>nios2_hash_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nios2_opcode_hash</name> <modifier>*</modifier></type><name><name>nios2_hash</name><index>[<expr><operator>(</operator><name>OP_MASK_OP</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>nios2_opcode_hash</name> <modifier>*</modifier></type><name><name>nios2_ps_hash</name><index>[<expr><operator>(</operator><name>OP_MASK_OP</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>nios2_init_opcode_hash</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>OP_MASK_OP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nios2_hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>OP_MASK_OP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <name>nios2_opcodes</name></expr>;</init> <condition><expr><name>op</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>nios2_opcodes</name><index>[<expr><name>NUMOPCODES</name></expr>]</index></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>nios2_opcode_hash</name> <modifier>*</modifier></type><name>new_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nios2_opcode_hash</name> <modifier>*</modifier><modifier>*</modifier></type><name>bucket</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>pinfo</name></name> <operator>&amp;</operator> <name>NIOS2_INSN_MACRO</name><operator>)</operator> <operator>==</operator> <name>NIOS2_INSN_MACRO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>match</name></name> <operator>&gt;&gt;</operator> <name>OP_SH_OP</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>pinfo</name></name> <operator>&amp;</operator> <operator>(</operator><name>NIOS2_INSN_MACRO_MOV</name> <operator>|</operator> <name>NIOS2_INSN_MACRO_MOVI</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>nios2_ps_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>match</name></name> <operator>&gt;&gt;</operator> <name>OP_SH_OP</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_OP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>nios2_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bucket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_hash</name> <operator>=</operator>
<operator>(</operator><name>nios2_opcode_hash</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>nios2_opcode_hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"error allocating memory...broken disassembler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_hash</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_hash</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>bucket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>bucket</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>bucket</name> <operator>=</operator> <name>new_hash</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>nios2_hash_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HASHTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>OP_MASK_OP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>nios2_opcode_hash</name> <modifier>*</modifier></type><name>tmp_hash</name> <init>= <expr><name><name>nios2_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"index: 0x%02X ops: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp_hash</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>tmp_hash</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_hash</name> <operator>=</operator> <name><name>tmp_hash</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>OP_MASK_OP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>nios2_opcode_hash</name> <modifier>*</modifier></type><name>tmp_hash</name> <init>= <expr><name><name>nios2_ps_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"index: 0x%02X ops: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp_hash</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>tmp_hash</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_hash</name> <operator>=</operator> <name><name>tmp_hash</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type>
<name>nios2_find_opcode_hash</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nios2_opcode_hash</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nios2_hash_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nios2_init_opcode_hash</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name><name>nios2_ps_hash</name><index>[<expr><operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <name>OP_SH_OP</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_OP</name></expr>]</index></name></expr>;</init>
<condition><expr><name>entry</name></expr>;</condition> <incr><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name><name>nios2_hash</name><index>[<expr><operator>(</operator><name>opcode</name> <operator>&gt;&gt;</operator> <name>OP_SH_OP</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_OP</name></expr>]</index></name></expr>;</init>
<condition><expr><name>entry</name></expr>;</condition> <incr><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>opcode</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMREGNAMES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type>
<name>nios2_coprocessor_regs</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type><name>cached</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NUMREGNAMES</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nios2_num_regs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>nios2_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"c0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cached</name> <operator>=</operator> <name>nios2_regs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cached</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type>
<name>nios2_control_regs</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type><name>cached</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NUMREGNAMES</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nios2_num_regs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>nios2_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cached</name> <operator>=</operator> <name>nios2_regs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cached</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>nios2_print_insn_arg</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argptr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type><name>reg_base</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>argptr</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>RRD</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>OP</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_MATCH_CUSTOM</name> <operator>&amp;&amp;</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>CUSTOM_C</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <call><name>nios2_coprocessor_regs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <name>nios2_regs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>NUMREGNAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>reg_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>RRS</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>OP</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_MATCH_CUSTOM</name> <operator>&amp;&amp;</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>CUSTOM_A</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <call><name>nios2_coprocessor_regs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <name>nios2_regs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>NUMREGNAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>reg_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>RRT</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>OP</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_MATCH_CUSTOM</name> <operator>&amp;&amp;</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>CUSTOM_B</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <call><name>nios2_coprocessor_regs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <name>nios2_regs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>NUMREGNAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>reg_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM16</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM16</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM16</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>=</operator> <name>address</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>CACHE_OPX</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM5</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>


<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>CUSTOM_N</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM26</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator><name>address</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM5</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_base</name> <operator>=</operator> <call><name>nios2_control_regs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>reg_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>IMM5</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>nios2_disassemble</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bytes_per_line</name></name> <operator>=</operator> <name>INSNLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bytes_per_chunk</name></name> <operator>=</operator> <name>INSNLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>display_endian</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>endian</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_info_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>branch_delay_insns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_nonbranch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>nios2_find_opcode_hash</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_boolean</name></type> <name>is_nop</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>pinfo</name></name> <operator>==</operator> <name>NIOS2_INSN_MACRO_MOV</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dst</name></decl>, <decl><type ref="prev"/><name>src</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>RRD</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>GET_INSN_FIELD</name> <argument_list>(<argument><expr><name>RRS</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_nop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_nop</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argstr</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argstr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>argstr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>argstr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nios2_print_insn_arg</name> <argument_list>(<argument><expr><name>argstr</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argstr</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_noninsn</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"0x%lx"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>INSNLEN</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_insn_nios2</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>bfd_endian</name></name></type> <name>endianness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><name>INSNLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>INSNLEN</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>endianness</name> <operator>==</operator> <name>BFD_ENDIAN_BIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>bfd_getl32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>nios2_disassemble</name> <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>print_insn_big_nios2</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>print_insn_nios2</name> <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>BFD_ENDIAN_BIG</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>print_insn_little_nios2</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>print_insn_nios2</name> <argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>BFD_ENDIAN_LITTLE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
