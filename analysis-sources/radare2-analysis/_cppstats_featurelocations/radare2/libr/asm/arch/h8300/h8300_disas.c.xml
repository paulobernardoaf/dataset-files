<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\h8300\h8300_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h8300_disas.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>commands_4bit</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>H8300_MOV_4BIT_2</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_4BIT_3</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_ADD_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"add.b"</literal></expr>,
<expr><index>[<expr><name>H8300_ADDX_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"addx"</literal></expr>,
<expr><index>[<expr><name>H8300_CMP_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp.b"</literal></expr>,
<expr><index>[<expr><name>H8300_SUBX_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"subx"</literal></expr>,
<expr><index>[<expr><name>H8300_OR_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,
<expr><index>[<expr><name>H8300_XOR_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,
<expr><index>[<expr><name>H8300_AND_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_4BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>commands</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>H8300_ANDC</name></expr>]</index> <operator>=</operator> <literal type="string">"andc"</literal></expr>,
<expr><index>[<expr><name>H8300_ADDB_DIRECT</name></expr>]</index> <operator>=</operator> <literal type="string">"add.b"</literal></expr>,
<expr><index>[<expr><name>H8300_ADDW_DIRECT</name></expr>]</index> <operator>=</operator> <literal type="string">"add.w"</literal></expr>,
<expr><index>[<expr><name>H8300_ADDS</name></expr>]</index> <operator>=</operator> <literal type="string">"adds"</literal></expr>,
<expr><index>[<expr><name>H8300_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,
<expr><index>[<expr><name>H8300_ADDX</name></expr>]</index> <operator>=</operator> <literal type="string">"addx"</literal></expr>,
<expr><index>[<expr><name>H8300_SUBW</name></expr>]</index> <operator>=</operator> <literal type="string">"sub.w"</literal></expr>,
<expr><index>[<expr><name>H8300_BILD_IMM2R8</name></expr>]</index> <operator>=</operator> <literal type="string">"bld"</literal></expr>,
<expr><index>[<expr><name>H8300_BNOT_1</name></expr>]</index> <operator>=</operator> <literal type="string">"bnot"</literal></expr>,
<expr><index>[<expr><name>H8300_BNOT_2</name></expr>]</index> <operator>=</operator> <literal type="string">"bnot"</literal></expr>,
<expr><index>[<expr><name>H8300_BSET_1</name></expr>]</index> <operator>=</operator> <literal type="string">"bset"</literal></expr>,
<expr><index>[<expr><name>H8300_BSET_2</name></expr>]</index> <operator>=</operator> <literal type="string">"bset"</literal></expr>,
<expr><index>[<expr><name>H8300_BCLR_R2R8</name></expr>]</index> <operator>=</operator> <literal type="string">"bclr"</literal></expr>,
<expr><index>[<expr><name>H8300_BCLR_IMM2R8</name></expr>]</index> <operator>=</operator> <literal type="string">"bclr"</literal></expr>,
<expr><index>[<expr><name>H8300_BCLR_R2IND16</name></expr>]</index> <operator>=</operator> <literal type="string">"bclr"</literal></expr>,
<expr><index>[<expr><name>H8300_BCLR_R2ABS8</name></expr>]</index> <operator>=</operator> <literal type="string">"bclr"</literal></expr>,
<expr><index>[<expr><name>H8300_BOR_BIOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bior"</literal></expr>,

<expr><index>[<expr><name>H8300_BAND_BIAND</name></expr>]</index> <operator>=</operator> <literal type="string">"biand"</literal></expr>,
<expr><index>[<expr><name>H8300_BIAND_IMM2IND16</name></expr>]</index> <operator>=</operator> <literal type="string">"biand"</literal></expr>,
<expr><index>[<expr><name>H8300_BIAND_IMM2ABS8</name></expr>]</index> <operator>=</operator> <literal type="string">"biand"</literal></expr>,
<expr><index>[<expr><name>H8300_BST_BIST</name></expr>]</index> <operator>=</operator> <literal type="string">"bist"</literal></expr>,
<expr><index>[<expr><name>H8300_BTST</name></expr>]</index> <operator>=</operator> <literal type="string">"btst"</literal></expr>,
<expr><index>[<expr><name>H8300_BTST_R2R8</name></expr>]</index> <operator>=</operator> <literal type="string">"btst"</literal></expr>,
<expr><index>[<expr><name>H8300_BXOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bixor"</literal></expr>,

<expr><index>[<expr><name>H8300_BSR</name></expr>]</index> <operator>=</operator> <literal type="string">"bsr"</literal></expr>,
<expr><index>[<expr><name>H8300_NOP</name></expr>]</index> <operator>=</operator> <literal type="string">"nop"</literal></expr>,
<expr><index>[<expr><name>H8300_DAA</name></expr>]</index> <operator>=</operator> <literal type="string">"daa"</literal></expr>,
<expr><index>[<expr><name>H8300_DAS</name></expr>]</index> <operator>=</operator> <literal type="string">"das"</literal></expr>,
<expr><index>[<expr><name>H8300_DEC</name></expr>]</index> <operator>=</operator> <literal type="string">"dec"</literal></expr>,
<expr><index>[<expr><name>H8300_INC</name></expr>]</index> <operator>=</operator> <literal type="string">"inc"</literal></expr>,
<expr><index>[<expr><name>H8300_NOT_NEG</name></expr>]</index> <operator>=</operator> <literal type="string">"neg"</literal></expr>,
<expr><index>[<expr><name>H8300_OR</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,
<expr><index>[<expr><name>H8300_DIVXU</name></expr>]</index> <operator>=</operator> <literal type="string">"divxu"</literal></expr>,
<expr><index>[<expr><name>H8300_MULXU</name></expr>]</index> <operator>=</operator> <literal type="string">"mulxu"</literal></expr>,
<expr><index>[<expr><name>H8300_EEPMOV</name></expr>]</index> <operator>=</operator> <literal type="string">"eepmov"</literal></expr>,
<expr><index>[<expr><name>H8300_JMP_1</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,
<expr><index>[<expr><name>H8300_JMP_2</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,
<expr><index>[<expr><name>H8300_JMP_3</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,
<expr><index>[<expr><name>H8300_JSR_1</name></expr>]</index> <operator>=</operator> <literal type="string">"jsr"</literal></expr>,
<expr><index>[<expr><name>H8300_JSR_2</name></expr>]</index> <operator>=</operator> <literal type="string">"jsr"</literal></expr>,
<expr><index>[<expr><name>H8300_JSR_3</name></expr>]</index> <operator>=</operator> <literal type="string">"jsr"</literal></expr>,
<expr><index>[<expr><name>H8300_ORC</name></expr>]</index> <operator>=</operator> <literal type="string">"orc"</literal></expr>,
<expr><index>[<expr><name>H8300_ROTL</name></expr>]</index> <operator>=</operator> <literal type="string">"rotl"</literal></expr>,
<expr><index>[<expr><name>H8300_ROTR</name></expr>]</index> <operator>=</operator> <literal type="string">"rotr"</literal></expr>,
<expr><index>[<expr><name>H8300_RTE</name></expr>]</index> <operator>=</operator> <literal type="string">"rte"</literal></expr>,
<expr><index>[<expr><name>H8300_RTS</name></expr>]</index> <operator>=</operator> <literal type="string">"rts"</literal></expr>,
<expr><index>[<expr><name>H8300_SHL</name></expr>]</index> <operator>=</operator> <literal type="string">"shal"</literal></expr>,
<expr><index>[<expr><name>H8300_SHR</name></expr>]</index> <operator>=</operator> <literal type="string">"shar"</literal></expr>,
<expr><index>[<expr><name>H8300_SLEEP</name></expr>]</index> <operator>=</operator> <literal type="string">"sleep"</literal></expr>,
<expr><index>[<expr><name>H8300_STC</name></expr>]</index> <operator>=</operator> <literal type="string">"stc"</literal></expr>,
<expr><index>[<expr><name>H8300_SUB_1</name></expr>]</index> <operator>=</operator> <literal type="string">"sub.b"</literal></expr>,
<expr><index>[<expr><name>H8300_SUBS</name></expr>]</index> <operator>=</operator> <literal type="string">"subs"</literal></expr>,
<expr><index>[<expr><name>H8300_SUBX</name></expr>]</index> <operator>=</operator> <literal type="string">"subx"</literal></expr>,
<expr><index>[<expr><name>H8300_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,
<expr><index>[<expr><name>H8300_XORC</name></expr>]</index> <operator>=</operator> <literal type="string">"xorc"</literal></expr>,

<expr><index>[<expr><name>H8300_LDC</name></expr>]</index> <operator>=</operator> <literal type="string">"ldc"</literal></expr>,
<expr><index>[<expr><name>H8300_LDC_2</name></expr>]</index> <operator>=</operator> <literal type="string">"ldc"</literal></expr>,

<expr><index>[<expr><name>H8300_MOV_1</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_2</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_IMM162R16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_DISP162R16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_INDINC162R16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_ABS162R16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_IND162R16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.w"</literal></expr>,

<expr><index>[<expr><name>H8300_MOV_R82IND16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_R82DISPR16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_R82RDEC16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,
<expr><index>[<expr><name>H8300_MOV_R82ABS16</name></expr>]</index> <operator>=</operator> <literal type="string">"mov.b"</literal></expr>,

<expr><index>[<expr><name>H8300_BRA</name></expr>]</index> <operator>=</operator> <literal type="string">"bra"</literal></expr>,
<expr><index>[<expr><name>H8300_BRN</name></expr>]</index> <operator>=</operator> <literal type="string">"brn"</literal></expr>,
<expr><index>[<expr><name>H8300_BHI</name></expr>]</index> <operator>=</operator> <literal type="string">"bhi"</literal></expr>,
<expr><index>[<expr><name>H8300_BLS</name></expr>]</index> <operator>=</operator> <literal type="string">"bls"</literal></expr>,
<expr><index>[<expr><name>H8300_BCC</name></expr>]</index> <operator>=</operator> <literal type="string">"bcc"</literal></expr>,
<expr><index>[<expr><name>H8300_BCS</name></expr>]</index> <operator>=</operator> <literal type="string">"bcs"</literal></expr>,
<expr><index>[<expr><name>H8300_BNE</name></expr>]</index> <operator>=</operator> <literal type="string">"bne"</literal></expr>,
<expr><index>[<expr><name>H8300_BEQ</name></expr>]</index> <operator>=</operator> <literal type="string">"beq"</literal></expr>,
<expr><index>[<expr><name>H8300_BVC</name></expr>]</index> <operator>=</operator> <literal type="string">"bvc"</literal></expr>,
<expr><index>[<expr><name>H8300_BVS</name></expr>]</index> <operator>=</operator> <literal type="string">"bvs"</literal></expr>,
<expr><index>[<expr><name>H8300_BPL</name></expr>]</index> <operator>=</operator> <literal type="string">"bpl"</literal></expr>,
<expr><index>[<expr><name>H8300_BMI</name></expr>]</index> <operator>=</operator> <literal type="string">"bmi"</literal></expr>,
<expr><index>[<expr><name>H8300_BGE</name></expr>]</index> <operator>=</operator> <literal type="string">"bge"</literal></expr>,
<expr><index>[<expr><name>H8300_BLT</name></expr>]</index> <operator>=</operator> <literal type="string">"blt"</literal></expr>,
<expr><index>[<expr><name>H8300_BGT</name></expr>]</index> <operator>=</operator> <literal type="string">"bgt"</literal></expr>,
<expr><index>[<expr><name>H8300_BLE</name></expr>]</index> <operator>=</operator> <literal type="string">"ble"</literal></expr>,

<expr><index>[<expr><name>H8300_CMP_1</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp.b"</literal></expr>,
<expr><index>[<expr><name>H8300_CMP_2</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp.w"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>commands_9bit</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>H8300_BST</name></expr>]</index> <operator>=</operator> <literal type="string">"bst"</literal></expr>,
<expr><index>[<expr><name>H8300_BIST</name></expr>]</index> <operator>=</operator> <literal type="string">"bist"</literal></expr>,
<expr><index>[<expr><name>H8300_BOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bor"</literal></expr>,
<expr><index>[<expr><name>H8300_BIOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bior"</literal></expr>,
<expr><index>[<expr><name>H8300_BXOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bxor"</literal></expr>,
<expr><index>[<expr><name>H8300_BIXOR</name></expr>]</index> <operator>=</operator> <literal type="string">"bixor"</literal></expr>,
<expr><index>[<expr><name>H8300_BAND</name></expr>]</index> <operator>=</operator> <literal type="string">"band"</literal></expr>,
<expr><index>[<expr><name>H8300_BIAND</name></expr>]</index> <operator>=</operator> <literal type="string">"biand"</literal></expr>,
<expr><index>[<expr><name>H8300_BLD</name></expr>]</index> <operator>=</operator> <literal type="string">"bld"</literal></expr>,
<expr><index>[<expr><name>H8300_BILD</name></expr>]</index> <operator>=</operator> <literal type="string">"bild"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_opcode_4bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>commands_4bit</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof>
<operator>||</operator> <operator>!</operator><name><name>commands_4bit</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name><name>commands_4bit</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_opcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>ext_opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ext_opcode</name> <operator>=</operator> <operator>(</operator><call><name>r_read_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ext_opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H8300_BOR</name></expr>:</case>
<case>case <expr><name>H8300_BIOR</name></expr>:</case>
<case>case <expr><name>H8300_BXOR</name></expr>:</case>
<case>case <expr><name>H8300_BIXOR</name></expr>:</case>
<case>case <expr><name>H8300_BAND</name></expr>:</case>
<case>case <expr><name>H8300_BIAND</name></expr>:</case>
<case>case <expr><name>H8300_BLD</name></expr>:</case>
<case>case <expr><name>H8300_BILD</name></expr>:</case>
<case>case <expr><name>H8300_BST</name></expr>:</case>
<case>case <expr><name>H8300_BIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ext_opcode</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>commands_9bit</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<operator>!</operator><name><name>commands_9bit</name><index>[<expr><name>ext_opcode</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name><name>commands_9bit</name><index>[<expr><name>ext_opcode</name></expr>]</index></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H8300_BIAND_IMM2IND16</name></expr>:</case>
<case>case <expr><name>H8300_BIAND_IMM2ABS8</name></expr>:</case>
<case>case <expr><name>H8300_BCLR_R2IND16</name></expr>:</case>
<case>case <expr><name>H8300_BCLR_R2ABS8</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x74</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="string">"bior"</literal></expr> </then><else>: <expr><literal type="string">"bor"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x76</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="string">"biand"</literal></expr> </then><else>: <expr><literal type="string">"band"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x77</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="string">"bild"</literal></expr> </then><else>: <expr><literal type="string">"bld"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x67</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="string">"bist"</literal></expr> </then><else>: <expr><literal type="string">"bst"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x75</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="string">"bixor"</literal></expr> </then><else>: <expr><literal type="string">"bxor"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x60</literal></expr>:</case>
<case>case <expr><literal type="number">0x70</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"bset"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x71</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"bnot"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>!</operator><name><name>commands</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_eepmov</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H8300_RTS</name></expr>:</case>
<case>case <expr><name>H8300_RTE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ldc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>H8300_LDC_2</name> <operator>||</operator> <name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>H8300_XORC</name> <operator>||</operator>
<name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>H8300_ORC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"#0x%x:8,ccr"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>H8300_LDC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u%c,ccr"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>H8300_STC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"ccr,r%u%c"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_andc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:8,ccr"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_adds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#%u,r%u"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bsr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>st8</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:16,r%u"</literal></expr></argument>,
<argument><expr><name>imm</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_disp162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>disp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u,@(0x%x:16,r%u)"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name>disp</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@(0x%x:16,r%u),r%u"</literal></expr></argument>, <argument><expr><name>disp</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>tmp</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>tmp</name> <operator>==</operator> <literal type="number">0x7</literal></expr> ?</condition><then> <expr><literal type="string">"pop"</literal></expr> </then><else>: <expr><literal type="string">"push"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_indinc162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>tmp</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x6D</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp</name> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator> <name>tmp</name> <operator>==</operator> <literal type="number">0xF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>decode_pop</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u,@-r%u"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@r%u+,r%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ind162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u,@r%u"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@r%u,r%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm2r8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:3,r%u%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm2ind16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:3,@r%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm2abs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:3,@0x%x:8"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r2r8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r2ind16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,@r%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r2abs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,@0x%x:8"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_subs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#%u,r%u"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_daa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x17</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x12</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"rotxl"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x13</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"rotxr"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"shll"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x11</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"shlr"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r82r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>decode_jmp_abs16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>abs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@0x%x:16"</literal></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>decode_jmp_abs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@@0x%x:8"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jmp_ind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@r%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_abs162r16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>abs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u,@0x%x:16"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@0x%x:16,r%u"</literal></expr></argument>,
<argument><expr><name>abs</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r82ind16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,@r%u"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@r%u,r%u%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r82dispr16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>disp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u%c,@(0x%x:16,r%u)"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>disp</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@(0x%x:16,r%u),r%u%c"</literal></expr></argument>,
<argument><expr><name>disp</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r82rdec16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u%c,@-r%u"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@r%u+,r%u%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r82abs16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>abs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x6A</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"movfpe"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x6A</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0xC</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"movtpe"</literal></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_read_at_be16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u%c,@0x%x:16"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"@0x%x:16,r%u%c"</literal></expr></argument>,
<argument><expr><name>abs</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_nop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_abs2r_short</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode_4bit</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@0x%x:8,r%u%c"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_r2imm_short</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode_4bit</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%u%c,@0x%x:8"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm2r_short</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_opcode_4bit</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>H8300_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"#0x%x:8,r%u%c"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'l'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>h8300_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>h8300_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H8300_MOV_4BIT_3</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r2imm_short</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_4BIT_2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_abs2r_short</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_AND_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_ADDX_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_ADD_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_CMP_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_MOV_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_OR_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_SUBX_4BIT</name></expr>:</case>
<case>case <expr><name>H8300_XOR_4BIT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2r_short</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H8300_ANDC</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_andc</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_SUBS</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_subs</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_ADDW_DIRECT</name></expr>:</case>
<case>case <expr><name>H8300_CMP_2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_ADDS</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_adds</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_BAND_BIAND</name></expr>:</case>
<case>case <expr><name>H8300_BCLR_IMM2R8</name></expr>:</case>
<case>case <expr><name>H8300_BST_BIST</name></expr>:</case>
<case>case <expr><name>H8300_BTST</name></expr>:</case>
<case>case <expr><name>H8300_BILD_IMM2R8</name></expr>:</case>
<case>case <expr><name>H8300_BOR_BIOR</name></expr>:</case>
<case>case <expr><name>H8300_BXOR_BIXOR</name></expr>:</case>
<case>case <expr><name>H8300_BNOT_2</name></expr>:</case>
<case>case <expr><name>H8300_BSET_2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2r8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_AND</name></expr>:</case>
<case>case <expr><name>H8300_ADDB_DIRECT</name></expr>:</case>
<case>case <expr><name>H8300_BCLR_R2R8</name></expr>:</case>
<case>case <expr><name>H8300_SUB_1</name></expr>:</case>
<case>case <expr><name>H8300_SUBX</name></expr>:</case>
<case>case <expr><name>H8300_ADDX</name></expr>:</case>
<case>case <expr><name>H8300_XOR</name></expr>:</case>
<case>case <expr><name>H8300_BNOT_1</name></expr>:</case>
<case>case <expr><name>H8300_BSET_1</name></expr>:</case>
<case>case <expr><name>H8300_CMP_1</name></expr>:</case>
<case>case <expr><name>H8300_MOV_1</name></expr>:</case>
<case>case <expr><name>H8300_BTST_R2R8</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r2r8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_BCLR_R2IND16</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x60</literal></expr>:</case>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x62</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r2ind16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x70</literal></expr>:</case>
<case>case <expr><literal type="number">0x71</literal></expr>:</case>
<case>case <expr><literal type="number">0x72</literal></expr>:</case>
<case>case <expr><literal type="number">0x67</literal></expr>:</case>
<case>case <expr><literal type="number">0x75</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2ind16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>H8300_BCLR_R2ABS8</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x60</literal></expr>:</case>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x62</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r2abs8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x67</literal></expr>:</case>
<case>case <expr><literal type="number">0x70</literal></expr>:</case>
<case>case <expr><literal type="number">0x71</literal></expr>:</case>
<case>case <expr><literal type="number">0x72</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2abs8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>H8300_BIAND_IMM2IND16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2ind16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_BIAND_IMM2ABS8</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm2abs8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_BSR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_bsr</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_NOP</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_nop</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_DAA</name></expr>:</case>
<case>case <expr><name>H8300_DAS</name></expr>:</case>
<case>case <expr><name>H8300_DEC</name></expr>:</case>
<case>case <expr><name>H8300_INC</name></expr>:</case>
<case>case <expr><name>H8300_NOT_NEG</name></expr>:</case>
<case>case <expr><name>H8300_ROTL</name></expr>:</case>
<case>case <expr><name>H8300_ROTR</name></expr>:</case>
<case>case <expr><name>H8300_SHL</name></expr>:</case>
<case>case <expr><name>H8300_SHR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_daa</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_DIVXU</name></expr>:</case>
<case>case <expr><name>H8300_MULXU</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r82r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_EEPMOV</name></expr>:</case>
<case>case <expr><name>H8300_RTS</name></expr>:</case>
<case>case <expr><name>H8300_RTE</name></expr>:</case>
<case>case <expr><name>H8300_SLEEP</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_eepmov</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_JMP_1</name></expr>:</case>
<case>case <expr><name>H8300_JSR_1</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jmp_ind</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_JMP_2</name></expr>:</case>
<case>case <expr><name>H8300_JSR_2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jmp_abs16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_JMP_3</name></expr>:</case>
<case>case <expr><name>H8300_JSR_3</name></expr>:</case>
<case>case <expr><name>H8300_BRA</name></expr>:</case>
<case>case <expr><name>H8300_BRN</name></expr>:</case>
<case>case <expr><name>H8300_BHI</name></expr>:</case>
<case>case <expr><name>H8300_BLS</name></expr>:</case>
<case>case <expr><name>H8300_BCC</name></expr>:</case>
<case>case <expr><name>H8300_BCS</name></expr>:</case>
<case>case <expr><name>H8300_BNE</name></expr>:</case>
<case>case <expr><name>H8300_BEQ</name></expr>:</case>
<case>case <expr><name>H8300_BVC</name></expr>:</case>
<case>case <expr><name>H8300_BVS</name></expr>:</case>
<case>case <expr><name>H8300_BPL</name></expr>:</case>
<case>case <expr><name>H8300_BMI</name></expr>:</case>
<case>case <expr><name>H8300_BGE</name></expr>:</case>
<case>case <expr><name>H8300_BLT</name></expr>:</case>
<case>case <expr><name>H8300_BGT</name></expr>:</case>
<case>case <expr><name>H8300_BLE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jmp_abs8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_ORC</name></expr>:</case>
<case>case <expr><name>H8300_LDC</name></expr>:</case>
<case>case <expr><name>H8300_LDC_2</name></expr>:</case>
<case>case <expr><name>H8300_STC</name></expr>:</case>
<case>case <expr><name>H8300_XORC</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_ldc</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_OR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r2r8</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_2</name></expr>:</case>
<case>case <expr><name>H8300_SUBW</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_IMM162R16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_IND162R16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_ind162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_DISP162R16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_disp162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_INDINC162R16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_indinc162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_ABS162R16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_abs162r16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_R82IND16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r82ind16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_R82DISPR16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r82dispr16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_R82RDEC16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r82rdec16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H8300_MOV_R82ABS16</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_r82abs16</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
