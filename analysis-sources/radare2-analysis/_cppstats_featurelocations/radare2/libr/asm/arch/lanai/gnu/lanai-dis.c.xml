<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\lanai\gnu\lanai-dis.c">























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/lanai.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>reg_names</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"r0"</literal></expr>, <expr><literal type="string">"r1"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"ps"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"r6"</literal></expr>, <expr><literal type="string">"r7"</literal></expr>, 
<expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr>,<expr><literal type="string">"r10"</literal></expr>,<expr><literal type="string">"r11"</literal></expr>,<expr><literal type="string">"r12"</literal></expr>,<expr><literal type="string">"r13"</literal></expr>,<expr><literal type="string">"r14"</literal></expr>,<expr><literal type="string">"r15"</literal></expr>, 
<expr><literal type="string">"r16"</literal></expr>,<expr><literal type="string">"r17"</literal></expr>,<expr><literal type="string">"r18"</literal></expr>,<expr><literal type="string">"r19"</literal></expr>,<expr><literal type="string">"r20"</literal></expr>,<expr><literal type="string">"r21"</literal></expr>,<expr><literal type="string">"r22"</literal></expr>,<expr><literal type="string">"r23"</literal></expr>,
<expr><literal type="string">"r24"</literal></expr>,<expr><literal type="string">"r25"</literal></expr>,<expr><literal type="string">"r26"</literal></expr>,<expr><literal type="string">"r27"</literal></expr>,<expr><literal type="string">"r28"</literal></expr>,<expr><literal type="string">"r29"</literal></expr>,<expr><literal type="string">"r30"</literal></expr>,<expr><literal type="string">"r31"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>op_names</name><index>[]</index></name> <init>= 
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"addc"</literal></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"subb"</literal></expr>, <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"sh"</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_delayed_branch</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_delayed_branch</name> <parameter_list>(<parameter><decl><type><name>insn</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMOPCODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CONST</name> <name><name>struct</name> <name>lanai_opcode</name></name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><operator>&amp;</operator><name><name>lanai_opcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opcodes_sorted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compare_opcodes</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><name>int</name></type>
<name>print_insn_lanai</name> <parameter_list>(<parameter><decl><type><name>memaddr</name></type></decl></parameter>, <parameter><decl><type><name>info</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcodes_sorted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>lanai_opcodes</name></expr></argument>, <argument><expr><name>NUMOPCODES</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>lanai_opcodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>compare_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opcodes_sorted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>=
<expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_info_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_nonbranch</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>branch_delay_insns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMOPCODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CONST</name> <name><name>struct</name> <name>lanai_opcode</name></name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><operator>&amp;</operator><name><name>lanai_opcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <name><name>opcode</name><operator>-&gt;</operator><name>match</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>imm_added_to_rs1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> 
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0x70000000</literal><operator>)</operator> 
<operator>||</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0x70000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x50000000</literal> 
<operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0000000</literal> 
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0x00000700</literal><operator>)</operator> 
<operator>||</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <literal type="number">0x00000700</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000500</literal> <operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>X_RS1</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>X_RD</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>imm_added_to_rs1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>imm</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>

<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (stream, "%s", reg_names[n])</cpp:value></cpp:define>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RS3</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>reg</name></cpp:undef>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op_names</name><index>[<expr><call><name>X_OP1</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> 
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op_names</name><index>[<expr><call><name>X_OP2</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>insn</name> <operator>&amp;</operator> <name>L3_RRR_F</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">".f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> 
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op_names</name><index>[<expr><call><name>X_OP2</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>|</operator><literal type="number">0xffff0000</literal></expr>;</expr_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"***ERROR***"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>print_address</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_C16</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_C10</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>print_address</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>print_immediate</name>;</goto>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C21</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_address</name>;</goto>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C21</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_address</name>;</goto>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_C25</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_address</name>;</goto>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_C25</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_address</name>;</goto>

<label><name>print_immediate</name>:</label>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<label><name>print_address</name>:</label>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>imm</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%pc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%ps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%apc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%aps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%isr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%imr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%r1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%r0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block>







<if_stmt><if>if <condition>(<expr><name>imm_added_to_rs1</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>prev_insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errcode</name> <operator>=</operator>
<call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>)
<argument_list>(<argument><expr><name>memaddr</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_insn</name> <operator>=</operator> <call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>is_delayed_branch</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>)
<argument_list>(<argument><expr><name>memaddr</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_insn</name> <operator>=</operator> <call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>prev_insn</name> <operator>&amp;</operator> <literal type="number">0xf07c0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000000</literal>
<operator>||</operator> <operator>(</operator><name>prev_insn</name> <operator>&amp;</operator> <literal type="number">0xf07c0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x50000000</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\t! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> 
<operator>=</operator> <call><name>X_C16</name><argument_list>( <argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>L3_RI_H</name><operator>&amp;</operator> <name>insn</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>prev_insn</name> <operator>&amp;</operator> <literal type="number">0xf07c0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x50000000</literal></expr> )</condition><block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> 
<operator>|=</operator> <call><name>X_C16</name><argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>L3_RI_H</name><operator>&amp;</operator><name>prev_insn</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> 
<operator>+=</operator> <call><name>X_C16</name><argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>L3_RI_H</name><operator>&amp;</operator><name>prev_insn</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_dref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>F_DATA_SIZE</name><argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_UNBR</name><operator>|</operator><name>F_CONDBR</name><operator>|</operator><name>F_JSR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_UNBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_branch</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONDBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_condbranch</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_JSR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_jsr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>branch_delay_insns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_noninsn</name></expr>;</expr_stmt> 
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%#8x"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_opcodes</name> <parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lanai_opcode</name></name> <modifier>*</modifier></type><name>op0</name> <init>= <expr><operator>(</operator>struct <name>lanai_opcode</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lanai_opcode</name></name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><operator>(</operator>struct <name>lanai_opcode</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>match0</name> <init>= <expr><name><name>op0</name><operator>-&gt;</operator><name>match</name></name></expr></init></decl>, <decl><type ref="prev"/><name>match1</name> <init>= <expr><name><name>op1</name><operator>-&gt;</operator><name>match</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>lose0</name> <init>= <expr><name><name>op0</name><operator>-&gt;</operator><name>lose</name></name></expr></init></decl>, <decl><type ref="prev"/><name>lose1</name> <init>= <expr><name><name>op1</name><operator>-&gt;</operator><name>lose</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>match0</name> <operator>&amp;</operator> <name>lose0</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Internal error: bad lanai-opcode.h: \"%s\", %#.8lx, %#.8lx\n"</literal></expr></argument>,
<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>match0</name></expr></argument>, <argument><expr><name>lose0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op0</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>op0</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lose0</name> <operator>=</operator> <name><name>op0</name><operator>-&gt;</operator><name>lose</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match1</name> <operator>&amp;</operator> <name>lose1</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Internal error: bad lanai-opcode.h: \"%s\", %#.8lx, %#.8lx\n"</literal></expr></argument>,
<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>match1</name></expr></argument>, <argument><expr><name>lose1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op1</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>op1</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lose1</name> <operator>=</operator> <name><name>op1</name><operator>-&gt;</operator><name>lose</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>match0</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>match1</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>lose0</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>lose1</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alias_diff</name> <init>= <expr><operator>(</operator><name><name>op0</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>op1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alias_diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>alias_diff</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op0</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name></expr>)</condition> 
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Internal error: bad lanai-opcode.h: \"%s\" == \"%s\"\n"</literal></expr></argument>,
<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length_diff</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length_diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>length_diff</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p0</name> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
