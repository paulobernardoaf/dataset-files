<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\arc\gnu\arc.h">







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_ARC4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_ARC5</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_ARC6</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_ARC7</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_ARC601</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ARC_MACH_A4</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARCOMPACT</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_BIG</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCOMPACT</name></cpp:macro> <cpp:value>(ARC_MACH_ARC5 | ARC_MACH_ARC6 | ARC_MACH_ARC601 | ARC_MACH_ARC7)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_CPU_MASK</name></cpp:macro> <cpp:value>(ARC_MACH_BIG - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MACH_MASK</name></cpp:macro> <cpp:value>((ARC_MACH_BIG &lt;&lt; 1) - 1)</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>arc_insn</name>;</typedef>

<struct>struct <name>arc_opcode</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>syntax</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_CPU</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_CPU_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_MACH</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_FLAG_START</name></cpp:macro> <cpp:value>(ARC_MACH_MASK + 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_COND_BRANCH</name></cpp:macro> <cpp:value>(ARC_OPCODE_FLAG_START)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_LENGTH</name></cpp:macro> <cpp:value>(ARC_OPCODE_COND_BRANCH &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_3OP</name></cpp:macro> <cpp:value>(SYNTAX_LENGTH )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_2OP</name></cpp:macro> <cpp:value>(SYNTAX_3OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_1OP</name></cpp:macro> <cpp:value>(SYNTAX_2OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_NOP</name></cpp:macro> <cpp:value>(SYNTAX_1OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP1_DEST_IGNORED</name></cpp:macro> <cpp:value>(SYNTAX_NOP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP1_MUST_BE_IMM</name></cpp:macro> <cpp:value>(OP1_DEST_IGNORED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP1_IMM_IMPLIED</name></cpp:macro> <cpp:value>(OP1_MUST_BE_IMM &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUFFIX_NONE</name></cpp:macro> <cpp:value>(OP1_IMM_IMPLIED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUFFIX_COND</name></cpp:macro> <cpp:value>(SUFFIX_NONE &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUFFIX_FLAG</name></cpp:macro> <cpp:value>(SUFFIX_COND &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_VALID</name></cpp:macro> <cpp:value>(SUFFIX_FLAG &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMD_LONG_INST</name></cpp:macro> <cpp:value>(SYNTAX_VALID &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SYNTAX_3OP</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SYNTAX_2OP</name></cpp:macro> <cpp:value>(AC_SYNTAX_3OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SYNTAX_1OP</name></cpp:macro> <cpp:value>(AC_SYNTAX_2OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SYNTAX_NOP</name></cpp:macro> <cpp:value>(AC_SYNTAX_1OP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SYNTAX_SIMD</name></cpp:macro> <cpp:value>(AC_SYNTAX_NOP &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_OP1_DEST_IGNORED</name></cpp:macro> <cpp:value>(AC_SYNTAX_SIMD &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_OP1_MUST_BE_IMM</name></cpp:macro> <cpp:value>(AC_OP1_DEST_IGNORED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_OP1_IMM_IMPLIED</name></cpp:macro> <cpp:value>(AC_OP1_MUST_BE_IMM &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_DISC</name></cpp:macro> <cpp:value>(AC_OP1_IMM_IMPLIED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_IREGA</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_DISC &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_IREGB</name></cpp:macro> <cpp:value>(AC_SIMD_IREGA &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VVV</name></cpp:macro> <cpp:value>(AC_SIMD_IREGB &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VV0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VVV &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VbI0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VV0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_Vb00</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VbI0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VbC0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_Vb00 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_V00</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VbC0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VC0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_V00 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VVC</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VC0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VV</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VVC &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VVI</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VV &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_C</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VVI &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_C &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_CC</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_C0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_CC &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_DC</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_C0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_D0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_DC &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VD</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_D0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VVL</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VD &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VU0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VVL &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_VL0</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VU0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SYNTAX_C00</name></cpp:macro> <cpp:value>(AC_SIMD_SYNTAX_VL0 &lt;&lt; 1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SUFFIX_NONE</name></cpp:macro> <cpp:value>(0x1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SUFFIX_DIRECT</name></cpp:macro> <cpp:value>(AC_SUFFIX_NONE &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SUFFIX_COND</name></cpp:macro> <cpp:value>(AC_SUFFIX_DIRECT &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SUFFIX_FLAG</name></cpp:macro> <cpp:value>(AC_SUFFIX_COND &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_FLAGS_NONE</name></cpp:macro> <cpp:value>(AC_SUFFIX_FLAG &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_FLAG_SET</name></cpp:macro> <cpp:value>(AC_SIMD_FLAGS_NONE &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_FLAG1_SET</name></cpp:macro> <cpp:value>(AC_SIMD_FLAG_SET &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_FLAG2_SET</name></cpp:macro> <cpp:value>(AC_SIMD_FLAG1_SET &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_U8</name></cpp:macro> <cpp:value>(AC_SIMD_FLAG2_SET &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_U6</name></cpp:macro> <cpp:value>(AC_SIMD_ENCODE_U8 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SCALE_1</name></cpp:macro> <cpp:value>(AC_SIMD_ENCODE_U6 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SCALE_2</name></cpp:macro> <cpp:value>(AC_SIMD_SCALE_1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SCALE_3</name></cpp:macro> <cpp:value>(AC_SIMD_SCALE_2 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SCALE_4</name></cpp:macro> <cpp:value>(AC_SIMD_SCALE_3 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SCALE_0</name></cpp:macro> <cpp:value>(AC_SIMD_SCALE_4 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_LIMM</name></cpp:macro> <cpp:value>(AC_SIMD_SCALE_0 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_EXTENDED</name></cpp:macro> <cpp:value>(AC_SIMD_ENCODE_LIMM &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_EXTEND2</name></cpp:macro> <cpp:value>(AC_SIMD_EXTENDED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_EXTEND3</name></cpp:macro> <cpp:value>(AC_SIMD_EXTEND2 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SUFFIX_LANEMASK</name></cpp:macro> <cpp:value>(AC_SIMD_EXTEND3 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_S12</name></cpp:macro> <cpp:value>(AC_SUFFIX_LANEMASK &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ZERVA</name></cpp:macro> <cpp:value>(AC_SIMD_ENCODE_S12 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ZERVB</name></cpp:macro> <cpp:value>(AC_SIMD_ZERVA &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ZERVC</name></cpp:macro> <cpp:value>(AC_SIMD_ZERVB &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_SETLM</name></cpp:macro> <cpp:value>(AC_SIMD_ZERVC &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_EXTEND1</name></cpp:macro> <cpp:value>(AC_SIMD_SETLM &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_KREG</name></cpp:macro> <cpp:value>(AC_SIMD_EXTEND1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_U16</name></cpp:macro> <cpp:value>(AC_SIMD_KREG &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_SIMD_ENCODE_ZR</name></cpp:macro> <cpp:value>(AC_SIMD_ENCODE_U16 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_EXTENDED_MULTIPLY</name></cpp:macro> <cpp:value>AC_SIMD_EXTENDED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (x) &amp; 31) &lt;&lt; 27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (x) &amp; ARC_MASK_REG) &lt;&lt; ARC_SHIFT_REGA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (x) &amp; ARC_MASK_REG) &lt;&lt; ARC_SHIFT_REGB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (x) &amp; ARC_MASK_REG) &lt;&lt; ARC_SHIFT_REGC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned) (x) &amp; (m)) &lt;&lt; (b))</cpp:value></cpp:define> 




<decl_stmt><decl><type><name><name>struct</name> <name>arc_opcode</name></name> <modifier>*</modifier></type><name>next_asm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>arc_opcode</name></name> <modifier>*</modifier></type><name>next_dis</name></decl>;</decl_stmt> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_HASH_OPCODE</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string)[0] &gt;= 'a' &amp;&amp; (string)[0] &lt;= 'z' ? (string)[0] - 'a' : 26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_HASH_ICODE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int) (insn) &gt;&gt; 27)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_NEXT_ASM</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;next_asm)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPCODE_NEXT_DIS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;next_dis)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask2</name></decl>,<decl><type ref="prev"/><name>value2</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>arc_operand_value</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPVAL_CPU</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_CPU_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPVAL_MACH</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_MASK)</cpp:value></cpp:define>
}</block>;</struct>

<struct>struct <name>arc_ext_operand_value</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>arc_ext_operand_value</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arc_operand_value</name></name></type> <name>operand</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>arc_ext_operand_value</name></name> <modifier>*</modifier></type><name>arc_ext_operands</name></decl>;</decl_stmt>

<struct>struct <name>arc_operand</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>fmt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bits</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>shift</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_SUFFIX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_RELATIVE_BRANCH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_ABSOLUTE_BRANCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_ADDRESS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_LIMM</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_SIGNED</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_SIGNOPT</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_NEGATIVE</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_FAKE</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_JUMPFLAGS</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_WARN</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_ERROR</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_LOAD</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_STORE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_UNSIGNED</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_2BYTE_ALIGNED</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_OPERAND_4BYTE_ALIGNED</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_DOT</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_REG</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_AUXREG</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_SDASYM</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_BITS</name></cpp:macro> <cpp:value>0x107000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MOD_P</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X) &amp; ARC_MOD_BITS)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_READONLY</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_WRITEONLY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_NOSHORT_CUT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_16</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_INCR_U6</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_SCALE1</name></cpp:macro> <cpp:value>(ARC_INCR_U6 &lt;&lt; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_SCALE2</name></cpp:macro> <cpp:value>(ARC_SIMD_SCALE1 &lt;&lt; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_SCALE3</name></cpp:macro> <cpp:value>(ARC_SIMD_SCALE2 &lt;&lt; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_SCALE4</name></cpp:macro> <cpp:value>(ARC_SIMD_SCALE3 &lt;&lt; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_LANEMASK</name></cpp:macro> <cpp:value>(ARC_SIMD_SCALE4 &lt;&lt;0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_REGISTER</name></cpp:macro> <cpp:value>(ARC_SIMD_LANEMASK &lt;&lt;0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_ZERVA</name></cpp:macro> <cpp:value>(ARC_SIMD_REGISTER &lt;&lt;0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_ZERVB</name></cpp:macro> <cpp:value>(ARC_SIMD_ZERVA &lt;&lt;0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_ZERVC</name></cpp:macro> <cpp:value>(ARC_SIMD_ZERVB &lt;&lt;0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SIMD_SETLM</name></cpp:macro> <cpp:value>(ARC_SIMD_ZERVC &lt;&lt;0x1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_SIMD_VR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_SIMD_I</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_SIMD_DR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REGISTER_SIMD_K</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>























<function_decl><type><name>arc_insn</name></type> (<modifier>*</modifier><name>insert</name>) <parameter_list>(<parameter><decl><type><name>arc_insn</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>extend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type><name>reg</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>extract</name>) <parameter_list>(<parameter><decl><type><name>arc_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>opval</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>invalid</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_HAVE_CPU</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_CPU_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_HAVE_MACH</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; ARC_MACH_MASK)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_SHIMM_UPDATE</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_SHIMM</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_LIMM</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_CONSTANT_P</name><parameter_list>(<parameter><type><name>REG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((REG) &gt;= 61)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGA</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGB</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGC</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGA_AC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGB_LOW_AC</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGB_HIGH_AC</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIFT_REGC_AC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_MASK_REG</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_DELAY_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_DELAY_NORMAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_DELAY_JUMP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_SHIMM_CONST_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long) (x) &gt;= -256 &amp;&amp; (long) (x) &lt;= 255)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type><name>arc_operands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_operand_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type><name>arc_suffixes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_suffixes_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type><name>arc_reg_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_reg_names_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>arc_operand_map</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_cond_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_mach_a4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>arc_ld_ext_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_user_mode_only</name></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> <name>arc_get_opcode_mach</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arc_opcode_init_tables</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>arc_opcode_init_insert</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>arc_opcode_init_extract</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_opcode</name></name> <modifier>*</modifier></type><name>arc_opcode_lookup_asm</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_opcode</name></name> <modifier>*</modifier></type><name>arc_opcode_lookup_dis</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>arc_opcode_limm_p</name> <parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type><name>arc_opcode_lookup_suffix</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>arc_opcode_supported</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_opcode</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>arc_opval_supported</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>arc_insn_not_jl</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>arc_aux_reg_name</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>arc_operand_value</name></name> <modifier>*</modifier></type><name>get_ext_suffix</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_branch_or_jump_insn</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_lpcc_insn</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_constant_operand</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_register_operand</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_symbol_operand</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>arc_operand</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ARC700_register_simd_operand</name> <parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_operand_type</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_add_reg_sdasym_insn</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_get_load_sdasym_insn_type</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ac_get_store_sdasym_insn_type</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_limm_fixup_adjust</name> <parameter_list>(<parameter><decl><type><name>arc_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>arc_test_wb</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
