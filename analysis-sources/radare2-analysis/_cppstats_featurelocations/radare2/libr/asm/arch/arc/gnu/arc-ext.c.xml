<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\arc\gnu\arc-ext.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arc-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_EXTENSION_CORE_REGISTER</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_EXTENSION_CORE_REGISTER</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_EXTENSION_CONDITION_CODE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_EXTENSION_CONDITION_CODE</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_EXT_CORE</name></cpp:macro> <cpp:value>(LAST_EXTENSION_CORE_REGISTER - FIRST_EXTENSION_CORE_REGISTER + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_EXT_COND</name></cpp:macro> <cpp:value>(LAST_EXTENSION_CONDITION_CODE - FIRST_EXTENSION_CONDITION_CODE + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HASH_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HASH_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; INST_HASH_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HASH_MASK</name></cpp:macro> <cpp:value>(INST_HASH_SIZE - 1)</cpp:value></cpp:define>








<struct>struct <name>ExtInstruction</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtInstruction</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ExtAuxRegister</name>
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtAuxRegister</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ExtCoreRegister</name>
<block>{
<decl_stmt><decl><type><name>short</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ExtReadWrite</name></name></type> <name>rw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>arcExtMap</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ExtAuxRegister</name></name><modifier>*</modifier></type> <name>auxRegisters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtInstruction</name></name><modifier>*</modifier></type> <name><name>instructions</name><index>[<expr><name>INST_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtCoreRegister</name></name></type> <name><name>coreRegisters</name><index>[<expr><name>NUM_EXT_CORE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>condCodes</name><index>[<expr><name>NUM_EXT_COND</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>







<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>arcExtMap</name></name></type> <name>arc_extension_map</name></decl>;</decl_stmt>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HASH</name><parameter_list>(<parameter><type><name>MAJOR</name></type></parameter>, <parameter><type><name>MINOR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((MAJOR) &lt;&lt; 3) ^ (MINOR)) &amp; INST_HASH_MASK)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void create_map(unsigned char *block, unsigned long length)
{
unsigned char *p = block;



while (p &amp;&amp; p &lt; (block + length))
{
















if (p[0] == 0)
break;



switch (p[1])
{ 
case EXT_INSTRUCTION:
{
struct ExtInstruction *insn = XNEW (struct ExtInstruction);
int major = p[2];
int minor = p[3];
struct ExtInstruction **bucket =
&amp;arc_extension_map.instructions[INST_HASH (major, minor)];

insn-&gt;name = strdup ((char *) (p+5));
insn-&gt;major = major;
insn-&gt;minor = minor;
insn-&gt;flags = p[4];
insn-&gt;next = *bucket;
*bucket = insn;
break;
}

case EXT_CORE_REGISTER:
{
unsigned char number = p[2];
char* name = (char *) p+3;

arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].number = number;
arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].rw = REG_READWRITE;
arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].name = strdup (name);
break;
}

case EXT_LONG_CORE_REGISTER:
{
unsigned char number = p[2];
char* name = (char *) p+7;
enum ExtReadWrite rw = p[6];

arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].number = number;
arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].rw = rw;
arc_extension_map.coreRegisters[number - FIRST_EXTENSION_CORE_REGISTER].name = strdup (name);
}

case EXT_COND_CODE:
{
char *cc_name = strdup ((char *) (p+3));

arc_extension_map.condCodes[p[2] - FIRST_EXTENSION_CONDITION_CODE] = cc_name;
break;
}

case EXT_AUX_REGISTER:
{

struct ExtAuxRegister *newAuxRegister = XNEW (struct ExtAuxRegister);
char *aux_name = strdup ((char *) (p+6));

newAuxRegister-&gt;name = aux_name;
newAuxRegister-&gt;address = p[2]&lt;&lt;24 | p[3]&lt;&lt;16 | p[4]&lt;&lt;8 | p[5];
newAuxRegister-&gt;next = arc_extension_map.auxRegisters;
arc_extension_map.auxRegisters = newAuxRegister;
break;
}

default:

break;
}

p += p[0]; 
}


}



static void destroy_map(void)
{
struct ExtAuxRegister *r;
unsigned int i;


r = arc_extension_map.auxRegisters;
while (r)
{

struct ExtAuxRegister* next = r-&gt;next;

free (r-&gt;name);
free (r);
r = next;
}


for (i = 0; i &lt; INST_HASH_SIZE; i++)
{
struct ExtInstruction *insn = arc_extension_map.instructions[i];

while (insn)
{

struct ExtInstruction *next = insn-&gt;next;

free (insn-&gt;name);
free (insn);
insn = next;
}
}


for (i = 0; i &lt; NUM_EXT_CORE; i++)
{
if (arc_extension_map.coreRegisters[i].name)
free (arc_extension_map.coreRegisters[i].name);
}


for (i = 0; i &lt; NUM_EXT_COND; i++)
{
if (arc_extension_map.condCodes[i])
free (arc_extension_map.condCodes[i]);
}

memset (&amp;arc_extension_map, 0, sizeof (arc_extension_map));
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ExtReadWrite_image</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ExtReadWrite</name></name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>REG_INVALID</name></expr> :</case> <return>return <expr><literal type="string">"INVALID"</literal></expr>;</return>
<case>case <expr><name>REG_READ</name></expr> :</case> <return>return <expr><literal type="string">"RO"</literal></expr>;</return>
<case>case <expr><name>REG_WRITE</name></expr> :</case> <return>return <expr><literal type="string">"WO"</literal></expr>;</return>
<case>case <expr><name>REG_READWRITE</name></expr>:</case> <return>return <expr><literal type="string">"R/W"</literal></expr>;</return>
<default>default :</default> <return>return <expr><literal type="string">"???"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>arcExtMap_instName</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtInstruction</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flags</name> <operator>!=</operator> <name>E_ARC_MACH_A4</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x08</literal> <operator>&lt;=</operator> <name>opcode</name> <operator>&amp;&amp;</operator> <name>opcode</name> <operator>&lt;=</operator> <literal type="number">0x0b</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x00e0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x001f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0x07</literal><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>I</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>



<expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x00007000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <literal type="number">0x2f</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNMANGLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>P</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>M</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>I</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <operator>(</operator><name>I</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>I</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <operator>(</operator><name>I</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>I</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>I</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>I</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>A</name> <operator>!=</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name>insn</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>arc_extension_map</name><operator>.</operator><name>instructions</name><index>[<expr><call><name>INST_HASH</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>temp</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <name>opcode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>temp</name><operator>-&gt;</operator><name>minor</name></name> <operator>==</operator> <name>minor</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>arcExtMap_coreRegName</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>regnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>regnum</name> <argument_list type="generic">&lt; <argument><expr><name>FIRST_EXTENSION_CORE_REGISTER</name> <operator>||</operator> <name>regnum</name></expr></argument> &gt;</argument_list></name> <name>LAST_EXTENSION_CORE_REGISTER</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>arc_extension_map</name><operator>.</operator><name>coreRegisters</name><index>[<expr><name>regnum</name> <operator>-</operator> <name>FIRST_EXTENSION_CORE_REGISTER</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>enum</name> <name>ExtReadWrite</name></name></type>
<name>arcExtMap_coreReadWrite</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>regnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>regnum</name> <argument_list type="generic">&lt; <argument><expr><name>FIRST_EXTENSION_CORE_REGISTER</name> <operator>||</operator> <name>regnum</name></expr></argument> &gt;</argument_list></name> <name>LAST_EXTENSION_CORE_REGISTER</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>REG_INVALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>arc_extension_map</name><operator>.</operator><name>coreRegisters</name><index>[<expr><name>regnum</name> <operator>-</operator> <name>FIRST_EXTENSION_CORE_REGISTER</name></expr>]</index></name><operator>.</operator><name>rw</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>arcExtMap_condCodeName</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>code</name> <argument_list type="generic">&lt; <argument><expr><name>FIRST_EXTENSION_CONDITION_CODE</name> <operator>||</operator> <name>code</name></expr></argument> &gt;</argument_list></name> <name>LAST_EXTENSION_CONDITION_CODE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>arc_extension_map</name><operator>.</operator><name>condCodes</name><index>[<expr><name>code</name> <operator>-</operator> <name>FIRST_EXTENSION_CONDITION_CODE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>arcExtMap_auxRegName</name> <parameter_list>(<parameter><decl><type><name>long</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ExtAuxRegister</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name><name>arc_extension_map</name><operator>.</operator><name>auxRegisters</name></name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name> <operator>==</operator> <name>address</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>build_ARC_extmap</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>text_bfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
asection *sect;




destroy_map();

for (sect = text_bfd-&gt;sections; sect != NULL; sect = sect-&gt;next)
if (!strncmp (sect-&gt;name,
".gnu.linkonce.arcextmap.",
sizeof (".gnu.linkonce.arcextmap.") - 1)
|| !strcmp (sect-&gt;name,".arcextmap"))
{
bfd_size_type count = bfd_get_section_size (sect);
unsigned char* buffer = xmalloc (count);

if (buffer)
{
if (bfd_get_section_contents (text_bfd, sect, buffer, 0, count))
create_map(buffer, count);
free (buffer);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>dump_ARC_extmap</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtAuxRegister</name></name><modifier>*</modifier></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>arc_extension_map</name><operator>.</operator><name>auxRegisters</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>r</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"AUX : %s %ld\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INST_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtInstruction</name></name> <modifier>*</modifier></type><name>insn</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>insn</name> <operator>=</operator> <name><name>arc_extension_map</name><operator>.</operator><name>instructions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>insn</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>insn</name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"INST: %d %d %x %s\n"</literal></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_EXT_CORE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtCoreRegister</name></name></type> <name>reg</name> <init>= <expr><name><name>arc_extension_map</name><operator>.</operator><name>coreRegisters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"CORE: %s %d %s\n"</literal></expr></argument>, <argument><expr><name><name>reg</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><call><name>ExtReadWrite_image</name> <argument_list>(<argument><expr><name><name>reg</name><operator>.</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_EXT_COND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arc_extension_map</name><operator>.</operator><name>condCodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"COND: %s\n"</literal></expr></argument>, <argument><expr><name><name>arc_extension_map</name><operator>.</operator><name>condCodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


</unit>
