<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\dcpu16\main.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcpu16.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, 
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, 
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, 
<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x1a</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dcpu16_disasm</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>ret</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %d %s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><literal type="string">"set a, 0x30"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><call><name>dcpu16_assemble</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"len=%d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>ret</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
