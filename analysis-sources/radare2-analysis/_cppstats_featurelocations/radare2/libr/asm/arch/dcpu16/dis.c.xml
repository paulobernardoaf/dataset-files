<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\dcpu16\dis.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcpu16.h"</cpp:file></cpp:include>


<struct>struct <name>op_code</name> <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>op_basic</name> <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>a_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>b</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>op_nbasic</name> <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>__empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>a_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>a</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>op_code</name></name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>op_basic</name></name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>op_nbasic</name></name></type> <name>n</name></decl>;</decl_stmt>
}</block></union></type> <name>op</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>opCycle</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>opCycleB</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>opName</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"set"</literal></expr>,
<expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="string">"div"</literal></expr>, <expr><literal type="string">"mod"</literal></expr>,
<expr><literal type="string">"shl"</literal></expr>, <expr><literal type="string">"shr"</literal></expr>, <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"bor"</literal></expr>, <expr><literal type="string">"xor"</literal></expr>,
<expr><literal type="string">"ife"</literal></expr>, <expr><literal type="string">"ifn"</literal></expr>, <expr><literal type="string">"ifg"</literal></expr>, <expr><literal type="string">"ifb"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>opNameB</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"reserved"</literal></expr>, <expr><literal type="string">"jsr"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>regs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"j"</literal></expr>,
<expr><literal type="string">"pop"</literal></expr>, <expr><literal type="string">"peek"</literal></expr>, <expr><literal type="string">"push"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"o"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>needWord</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>type</name> <operator>&lt;=</operator> <literal type="number">0x17</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&gt;</operator> <literal type="number">0x0f</literal><operator>)</operator><operator>)</operator> \
<operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <literal type="number">0x1e</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>valPrint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <literal type="number">0x07</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <literal type="number">0x0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>type</name> <operator>-</operator> <literal type="number">0x08</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <literal type="number">0x17</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"[%s + %#hx]"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>type</name> <operator>-</operator> <literal type="number">0x10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <literal type="number">0x1d</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>type</name> <operator>-</operator> <literal type="number">0x18</literal> <operator>+</operator> <literal type="number">0x08</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0x1e</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"[%#hx]"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%#hx"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%#hx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><name>type</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>instrPrint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>op</name><modifier>*</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>arg2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>valPrint</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a_type</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>opcode</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
<argument><expr><name><name>opNameB</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>opcode</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>valPrint</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a_type</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>valPrint</name> <argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b_type</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>opName</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>opcode</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>instrGet</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>op</name><modifier>*</modifier></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>in</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>in</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a_type</name></name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a_type</name></name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b_type</name></name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>needWord</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>instrGetCycles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>op</name><modifier>*</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>opCycleB</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>opcode</name></name></expr>]</index></name> <operator>+</operator> <call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>a_type</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>opCycle</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>opcode</name></name></expr>]</index></name> <operator>+</operator> <call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>a_type</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>needWord</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>b_type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dcpu16_disasm</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name><modifier>*</modifier></type> <name>inp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cost</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>op</name></type> <name>o</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>instrGet</name> <argument_list>(<argument><expr><name><name>inp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cost</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cost</name> <operator>=</operator> <call><name>instrGetCycles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>o</name><operator>.</operator><name>b</name><operator>.</operator><name>opcode</name></name> <operator>&gt;=</operator> <literal type="number">0xc</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>instrPrint</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>delta</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
