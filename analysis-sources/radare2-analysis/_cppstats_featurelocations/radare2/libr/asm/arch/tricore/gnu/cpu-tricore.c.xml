<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tricore\gnu\cpu-tricore.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/tricore.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_abs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_absb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_bo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_bol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_brc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_brn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_brr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcrw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrrw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbrn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_slr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_slro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_sro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_srr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_srrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_ssr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tricore_mask_ssro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> 
<name>bfd_default_scan</name> <parameter_list>(<parameter><decl><type><name>info</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_arch_info_type</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>bfd_arch_info_type</name> <modifier>*</modifier></type>
<name>bfd_default_compatible</name> <parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_arch_info_type</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_arch_info_type</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>arch</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits_per_word</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>bits_per_word</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mach</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mach</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mach</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>mach</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name> <name>tricore_init_arch_vars</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bfd_arch_info_type</name></type> <name><name>arch_info_struct</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><name>bfd_arch_tricore</name></expr>, 
<expr><name>bfd_mach_rider_a</name></expr>, 
<expr><literal type="string">"tricore"</literal></expr>, 
<expr><literal type="string">"TriCore:Rider-A"</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><name>false</name></expr>, 
<expr><name>bfd_default_compatible</name></expr>, 
<expr><name>bfd_default_scan</name></expr>, 
<expr><operator>&amp;</operator><name><name>arch_info_struct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> 
}</block></expr>,


<expr><block>{
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><name>bfd_arch_tricore</name></expr>, 
<expr><name>bfd_mach_rider_d</name></expr>, 
<expr><literal type="string">"tricore"</literal></expr>, 
<expr><literal type="string">"TriCore:Rider-D"</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><name>false</name></expr>, 
<expr><name>bfd_default_compatible</name></expr>, 
<expr><name>bfd_default_scan</name></expr>, 
<expr><operator>&amp;</operator><name><name>arch_info_struct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> 
}</block></expr>,


<expr><block>{
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><name>bfd_arch_tricore</name></expr>, 
<expr><name>bfd_mach_rider_2</name></expr>, 
<expr><literal type="string">"tricore"</literal></expr>, 
<expr><literal type="string">"TriCore:V2"</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><name>false</name></expr>, 
<expr><name>bfd_default_compatible</name></expr>, 
<expr><name>bfd_default_scan</name></expr>, 
<expr><operator>(</operator><name>bfd_arch_info_type</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr> 
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_arch_info_type</name></type> <name>bfd_tricore_arch</name> <init>=
<expr><block>{

<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><name>bfd_arch_tricore</name></expr>, 
<expr><name>bfd_mach_rider_b</name></expr>, 
<expr><literal type="string">"tricore"</literal></expr>, 
<expr><literal type="string">"TriCore:Rider-B"</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><name>true</name></expr>, 
<expr><name>bfd_default_compatible</name></expr>, 
<expr><name>bfd_default_scan</name></expr>, 
<expr><operator>&amp;</operator><name><name>arch_info_struct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> 
}</block></expr></init></decl>;</decl_stmt>








<function><type><name>void</name></type>
<name>tricore_init_arch_vars</name> <parameter_list>(<parameter><decl><type><name>mach</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mach</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mach</name> <operator>&amp;</operator> <name>bfd_mach_rider_mask</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>bfd_mach_rider_a</name></expr>:</case>
<expr_stmt><expr><name>tricore_mask_abs</name> <operator>=</operator> <literal type="number">0x0c0000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_absb</name> <operator>=</operator> <literal type="number">0x0c0000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_b</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bit</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bo</name> <operator>=</operator> <literal type="number">0x0fc000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bol</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brc</name> <operator>=</operator> <literal type="number">0x800000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brn</name> <operator>=</operator> <literal type="number">0x8000007f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brr</name> <operator>=</operator> <literal type="number">0x800000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rc</name> <operator>=</operator> <literal type="number">0x0fe000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcpw</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcrr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcrw</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rlc</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rr</name> <operator>=</operator> <literal type="number">0x0ff000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrpw</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr</name> <operator>=</operator> <literal type="number">0x00f000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr1</name> <operator>=</operator> <literal type="number">0x00fc00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr2</name> <operator>=</operator> <literal type="number">0x00ff00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrrr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrrw</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sys</name> <operator>=</operator> <literal type="number">0x07c000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sb</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbc</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbrn</name> <operator>=</operator> <literal type="number">0x007f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sc</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_slr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_slro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sr</name> <operator>=</operator> <literal type="number">0xf0ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_src</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_srr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_srrs</name> <operator>=</operator> <literal type="number">0x003f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_ssr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_ssro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>bfd_mach_rider_b</name></expr>:</case> 
<case>case <expr><name>bfd_mach_rider_2</name></expr>:</case>
<expr_stmt><expr><name>tricore_mask_abs</name> <operator>=</operator> <literal type="number">0x0c0000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_absb</name> <operator>=</operator> <literal type="number">0x0c0000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_b</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bit</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bo</name> <operator>=</operator> <literal type="number">0x0fc000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_bol</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brc</name> <operator>=</operator> <literal type="number">0x800000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brn</name> <operator>=</operator> <literal type="number">0x8000007f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_brr</name> <operator>=</operator> <literal type="number">0x800000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rc</name> <operator>=</operator> <literal type="number">0x0fe000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcpw</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcrr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rcrw</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rlc</name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rr</name> <operator>=</operator> <literal type="number">0x0ff300ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rr1</name> <operator>=</operator> <literal type="number">0x0ffc00ff</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>tricore_mask_rr2</name> <operator>=</operator> <literal type="number">0x0fff00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrpw</name> <operator>=</operator> <literal type="number">0x006000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr</name> <operator>=</operator> <literal type="number">0x00f300ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr1</name> <operator>=</operator> <literal type="number">0x00fc00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrr2</name> <operator>=</operator> <literal type="number">0x00ff00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrrr</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_rrrw</name> <operator>=</operator> <literal type="number">0x00e000ff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mach</name> <operator>&amp;</operator> <name>bfd_mach_rider_mask</name><operator>)</operator> <operator>==</operator> <name>bfd_mach_rider_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tricore_mask_sys</name> <operator>=</operator> <literal type="number">0x0fc000ff</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tricore_mask_sys</name> <operator>=</operator> <literal type="number">0x07c000ff</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tricore_mask_sb</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbc</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sbrn</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sc</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_slr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_slro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sr</name> <operator>=</operator> <literal type="number">0xf0ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_src</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_sro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_srr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_srrs</name> <operator>=</operator> <literal type="number">0x003f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_ssr</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tricore_mask_ssro</name> <operator>=</operator> <literal type="number">0x00ff</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_ABS</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_abs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_ABSB</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_absb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_B</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BIT</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_bit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BO</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_bo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BOL</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_bol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BRC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_brc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BRN</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_brn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_BRR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_brr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RCPW</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rcpw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RCR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rcr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RCRR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rcrr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RCRW</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rcrw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RLC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rlc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RR1</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rr1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RR2</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rr2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRPW</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrpw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRR1</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrr1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRR2</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrr2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRRR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrrr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_RRRW</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_rrrw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SYS</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SB</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SBC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sbc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SBR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sbr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SBRN</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sbrn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SLR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_slr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SLRO</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_slro</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SRC</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SRO</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_sro</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SRR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_srr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SRRS</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_srrs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SSR</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_ssr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tricore_opmask</name><index>[<expr><name>TRICORE_FMT_SSRO</name></expr>]</index></name> <operator>=</operator> <name>tricore_mask_ssro</name></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
