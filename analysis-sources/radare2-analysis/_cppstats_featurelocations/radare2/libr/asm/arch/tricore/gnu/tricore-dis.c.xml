<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tricore\gnu\tricore-dis.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/tricore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XNEWVEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) malloc (sizeof (T) * (N)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCNEWVEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) calloc ((N), sizeof (T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XNEW</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) malloc (sizeof (T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGPREFIX</name></cpp:macro> <cpp:value>"%%"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGPREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMOPCS</name></cpp:macro> <cpp:value>tricore_numopcodes</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMSFRS</name></cpp:macro> <cpp:value>tricore_numsfrs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMPCPOPCS</name></cpp:macro> <cpp:value>pcp_numopcodes</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OPS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCHES_ISA</name><parameter_list>(<parameter><type><name>isa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((isa) == TRICORE_GENERIC) || (((isa) &amp; bfd_mach_rider_mask) &amp; current_isa))</cpp:value></cpp:define>





<typedef>typedef <type><name><name>struct</name> <name>tricore_opcode</name></name></type> <name>opcode_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>pcp_opcode</name></name></type> <name>pcp_opcode_t</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>tricore_core_register</name></name></type> <name>sfr_t</name>;</typedef>



<struct>struct <name>insnlist</name>
<block>{
<decl_stmt><decl><type><name>opcode_t</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>insnlist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>insnlist</name></name> <modifier>*</modifier></type><name><name>insns</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>insnlist</name></name> <modifier>*</modifier></type><name>insnlink</name></decl>;</decl_stmt>



<struct>struct <name>pcplist</name>
<block>{
<decl_stmt><decl><type><name>pcp_opcode_t</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcplist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pcplist</name></name> <modifier>*</modifier></type><name><name>pcpinsns</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pcplist</name></name> <modifier>*</modifier></type><name>pcplink</name></decl>;</decl_stmt>



<struct>struct <name>sfrlist</name>
<block>{
<decl_stmt><decl><type><name>sfr_t</name> <modifier>*</modifier></type><name>sfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sfrlist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sfrlist</name></name> <modifier>*</modifier></type><name><name>sfrs</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sfrlist</name></name> <modifier>*</modifier></type><name>sfrlink</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>tricore_isa</name></type> <name>current_isa</name> <init>= <expr><name>TRICORE_RIDER_B</name></expr></init></decl>;</decl_stmt>




<struct>struct <name>decoded_insn</name>
<block>{
<decl_stmt><decl><type><name>opcode_t</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>regs</name><index>[<expr><name>MAX_OPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>cexp</name><index>[<expr><name>MAX_OPS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>decoded_insn</name></name></type> <name>dec_insn</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_abs</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_absb</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_b</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_bit</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_bo</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_bol</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_brc</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_brn</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_brr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rc</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rcpw</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rcr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rcrr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rcrw</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rlc</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rr1</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rr2</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrpw</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrr1</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrr2</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrrr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_rrrw</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sys</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sb</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sbc</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sbr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sbrn</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sc</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_slr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_slro</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_src</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_sro</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_srr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_srrs</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_ssr</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>decode_ssro</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*decode[]</argument>)</argument_list></macro> <call><name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<block>{

<expr><name>decode_abs</name></expr>, <expr><name>decode_absb</name></expr>, <expr><name>decode_b</name></expr>, <expr><name>decode_bit</name></expr>, <expr><name>decode_bo</name></expr>, <expr><name>decode_bol</name></expr>,
<expr><name>decode_brc</name></expr>, <expr><name>decode_brn</name></expr>, <expr><name>decode_brr</name></expr>, <expr><name>decode_rc</name></expr>, <expr><name>decode_rcpw</name></expr>, <expr><name>decode_rcr</name></expr>,
<expr><name>decode_rcrr</name></expr>, <expr><name>decode_rcrw</name></expr>, <expr><name>decode_rlc</name></expr>, <expr><name>decode_rr</name></expr>, <expr><name>decode_rr1</name></expr>, <expr><name>decode_rr2</name></expr>,
<expr><name>decode_rrpw</name></expr>, <expr><name>decode_rrr</name></expr>, <expr><name>decode_rrr1</name></expr>, <expr><name>decode_rrr2</name></expr>, <expr><name>decode_rrrr</name></expr>,
<expr><name>decode_rrrw</name></expr>, <expr><name>decode_sys</name></expr>,


<expr><name>decode_sb</name></expr>, <expr><name>decode_sbc</name></expr>, <expr><name>decode_sbr</name></expr>, <expr><name>decode_sbrn</name></expr>, <expr><name>decode_sc</name></expr>, <expr><name>decode_slr</name></expr>,
<expr><name>decode_slro</name></expr>, <expr><name>decode_sr</name></expr>, <expr><name>decode_src</name></expr>, <expr><name>decode_sro</name></expr>, <expr><name>decode_srr</name></expr>,
<expr><name>decode_srrs</name></expr>, <expr><name>decode_ssr</name></expr>, <expr><name>decode_ssro</name></expr>
}</block></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>extract_off18</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>init_hash_tables</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>find_core_reg</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>print_decoded_insn</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>,</operator> struct <name>disassemble_info</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>decode_tricore_insn</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>,</operator> <name>unsigned</name> <name>long</name><operator>,</operator> <name>int</name><operator>,</operator>
struct <name>disassemble_info</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>decode_pcp_insn</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>,</operator> <name><name>bfd_byte</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>,</operator>
struct <name>disassemble_info</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>extract_off18</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>o1</name></decl>, <decl><type ref="prev"/><name>o2</name></decl>, <decl><type ref="prev"/><name>o3</name></decl>, <decl><type ref="prev"/><name>o4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>o1</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o3</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x03c00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o4</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>o1</name> <operator>|</operator> <name>o2</name> <operator>|</operator> <name>o3</name> <operator>|</operator> <name>o4</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_abs</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_ABS_OFF18</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>extract_off18</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_ABS_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_absb</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_ABSB_OFF18</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>extract_off18</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_ABSB_B</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_ABSB_BPOS3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_b</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>o1</name></decl>, <decl><type ref="prev"/><name>o2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_B_DISP24</name></expr>:</case>
<expr_stmt><expr><name>o1</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>o1</name> <operator>|</operator> <name>o2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_bit</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BIT_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BIT_P2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BIT_P1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BIT_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BIT_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_bo</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>o1</name></decl>, <decl><type ref="prev"/><name>o2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BO_OFF10</name></expr>:</case>
<expr_stmt><expr><name>o1</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>o1</name> <operator>|</operator> <name>o2</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BO_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BO_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_bol</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>o1</name></decl>, <decl><type ref="prev"/><name>o2</name></decl>, <decl><type ref="prev"/><name>o3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BOL_OFF16</name></expr>:</case>
<expr_stmt><expr><name>o1</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o3</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0fc00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>o1</name> <operator>|</operator> <name>o2</name> <operator>|</operator> <name>o3</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BOL_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BOL_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_brc</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BRC_DISP15</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x7fff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRC_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRC_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_brn</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BRN_DISP15</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x7fff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRN_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000080</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRN_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_brr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_BRR_DISP15</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x7fff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_BRR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rc</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RC_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RC_CONST9</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001ff000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RC_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rcpw</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RCPW_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCPW_P</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCPW_W</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCPW_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCPW_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rcr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RCR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCR_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCR_CONST9</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001ff000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rcrr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RCRR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRR_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRR_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rcrw</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RCRW_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRW_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRW_W</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRW_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RCRW_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rlc</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RLC_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RLC_CONST16</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0ffff000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RLC_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00030000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rr1</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RR1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR1_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00030000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR1_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR1_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rr2</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RR2_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR2_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RR2_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrpw</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRPW_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRPW_P</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRPW_W</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRPW_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRPW_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00030000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrr1</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRR1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR1_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR1_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00030000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR1_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR1_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrr2</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRR2_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR2_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR2_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRR2_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrrr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRRR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRR_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_rrrw</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_RRRW_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRW_S3</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRW_W</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRW_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_RRRW_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sys</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SYS_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00000f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sb</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SB_DISP8</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sbc</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SBC_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SBC_DISP4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sbr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SBR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SBR_DISP4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sbrn</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SBRN_N</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0080</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SBRN_DISP4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sc</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SC_CONST8</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_slr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SLR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SLR_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_slro</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SLRO_OFF4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SLRO_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SR_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_src</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SRC_CONST4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SRC_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_sro</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SRO_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SRO_OFF4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_srr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SRR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SRR_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_srrs</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SRRS_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SRRS_S1_D</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SRRS_N</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x00c0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_ssr</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SSR_S2</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SSR_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_ssro</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>code</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FMT_SSRO_OFF4</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FMT_SSRO_S1</name></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_hash_tables</name> <parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>opcode_t</name> <modifier>*</modifier></type><name>pop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcp_opcode_t</name> <modifier>*</modifier></type><name>ppop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sfr_t</name> <modifier>*</modifier></type><name>psfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>insnlink</name> <operator>=</operator> <operator>(</operator>struct <name>insnlist</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name>NUMOPCS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>insnlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcplink</name> <operator>=</operator> <operator>(</operator>struct <name>pcplist</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name>NUMPCPOPCS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcplist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sfrlink</name> <operator>=</operator> <operator>(</operator>struct <name>sfrlist</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name>NUMSFRS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sfrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>insns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>insns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>insnlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUMOPCS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>insnlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pcpinsns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pcpinsns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pcplink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUMPCPOPCS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcplist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sfrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sfrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sfrlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUMSFRS</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sfrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pop</name> <operator>=</operator> <name>tricore_opcodes</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMOPCS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>pop</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MATCHES_ISA</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>isa</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>pop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>insns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>insnlink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>insns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>insns</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>insnlink</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>insnlink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>pop</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ppop</name> <operator>=</operator> <name>pcp_opcodes</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMPCPOPCS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>ppop</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name><name>ppop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcpinsns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcplink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>pcpinsns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pcpinsns</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pcplink</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcplink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>ppop</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>psfr</name> <operator>=</operator> <name>tricore_sfrs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMSFRS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>psfr</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MATCHES_ISA</name> <argument_list>(<argument><expr><name><name>psfr</name><operator>-&gt;</operator><name>isa</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>psfr</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sfrs</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sfrlink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>sfrs</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sfrs</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>sfrlink</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfrlink</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sfr</name> <operator>=</operator> <name>psfr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>find_core_reg</name> <parameter_list>(<parameter><decl><type><name>addr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>addr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sfrlist</name></name> <modifier>*</modifier></type><name>psfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>addr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>psfr</name> <operator>=</operator> <name><name>sfrs</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>psfr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>psfr</name> <operator>=</operator> <name><name>psfr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>psfr</name><operator>-&gt;</operator><name>sfr</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>MATCHES_ISA</name> <argument_list>(<argument><expr><name><name>psfr</name><operator>-&gt;</operator><name>sfr</name><operator>-&gt;</operator><name>isa</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>psfr</name><operator>-&gt;</operator><name>sfr</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_decoded_insn</name> <parameter_list>(<parameter><decl><type><name>memaddr</name></type></decl></parameter>, <parameter><decl><type><name>info</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>opcode_t</name> <modifier>*</modifier></type><name>insn</name> <init>= <expr><name><name>dec_insn</name><operator>.</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>needs_creg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>need_comma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>creg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>abs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bfd_vma</name></type> <name>next_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>expect_lea</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_AREG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>load_areg</name><index>[<expr><name>NO_AREG</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>,<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>load_hi_addr</name><index>[<expr><name>NO_AREG</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>load_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>print_symbolic_address</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINT</name></cpp:macro> <cpp:value>(*info-&gt;fprintf_func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFILE</name></cpp:macro> <cpp:value>info-&gt;stream</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name><name>insn</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"nor"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"not "</literal><name>REGPREFIX</name><literal type="string">"d%d"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>















<if_stmt><if>if <condition>(<expr><name>memaddr</name> <operator>!=</operator> <name>next_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expect_lea</name> <operator>=</operator> <name>print_symbolic_address</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <name>memaddr</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>insn</name><operator>-&gt;</operator><name>len32</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"movh.a"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>load_hi_addr</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expect_lea</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>print_symbolic_address</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>expect_lea</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lea"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ld."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"st."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"swap"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ldmst"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lea"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ld."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ldmst"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>true</name> <operator>==</operator> <name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>load_addr</name> <operator>=</operator> <name><name>load_hi_addr</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>short</name><operator>)</operator> <name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>print_symbolic_address</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>true</name> <operator>==</operator> <name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>load_addr</name> <operator>=</operator> <name><name>load_hi_addr</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>short</name><operator>)</operator> <name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>print_symbolic_address</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>print_symbolic_address</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ld.a"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"add.a"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sub.a"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mov.a"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"addsc.a"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mov.aa"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>load_areg</name><index>[<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="string">"ret"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>load_areg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mfcr"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mtcr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>needs_creg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>insn</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%d"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%dl"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%du"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%dll"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%duu"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%dlu"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d%dul"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"e%d"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"d15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"sp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal> <name>REGPREFIX</name> <literal type="string">"a%d"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"a15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal><name>REGPREFIX</name><literal type="string">"sp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0x1ff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x200</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0x3ff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>print_symbolic_address</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">" &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>load_addr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>print_symbolic_address</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">" &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>load_addr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00003fff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>abs</name> <operator>|=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0003c000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000fffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>abs</name> <operator>|=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00f00000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0x7fff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>memaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x800000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0xffffff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>memaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>memaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>abs</name> <operator>=</operator> <operator>(</operator><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>memaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>needs_creg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>needs_creg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>creg</name> <operator>=</operator> <call><name>find_core_reg</name> <argument_list>(<argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>creg</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RESOLVE_SFR_NAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>creg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"#0x%04lx"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"$0x%04lx (unknown SFR)"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>cexp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"sp]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"a%d]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_comma</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"[+"</literal> <name>REGPREFIX</name> <literal type="string">"sp]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"[+"</literal> <name>REGPREFIX</name> <literal type="string">"a%d]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"sp+]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"a%d+]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_comma</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"sp+c]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"a%d+c]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"sp+r]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"a%d+r]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"sp+i]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>REGPREFIX</name> <literal type="string">"a%d+i]"</literal></expr></argument>, <argument><expr><name><name>dec_insn</name><operator>.</operator><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"["</literal><name>REGPREFIX</name><literal type="string">"a15]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>need_comma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DPRINT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DFILE</name></cpp:undef>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>decode_tricore_insn</name> <parameter_list>(<parameter><decl><type><name>memaddr</name></type></decl></parameter>, <parameter><decl><type><name>insn</name></type></decl></parameter>, <parameter><decl><type><name>len32</name></type></decl></parameter>, <parameter><decl><type><name>info</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>insn</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>insnlist</name></name> <modifier>*</modifier></type><name>pinsn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tricore_fmt</name></type> <name>fmt</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>pinsn</name> <operator>=</operator> <name><name>insns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>pinsn</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pinsn</name> <operator>=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>len32</name></name> <operator>!=</operator> <name>len32</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>lose</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>tricore_opmask</name><index>[<expr><name>fmt</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec_insn</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>insn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decode</name><index>[<expr><name>fmt</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_decoded_insn</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>len32</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></for>







<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">".hword 0x%04lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>decode_pcp_insn</name> <parameter_list>(<parameter><decl><type><name>memaddr</name></type></decl></parameter>, <parameter><decl><type><name>buffer</name></type></decl></parameter>, <parameter><decl><type><name>info</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>insn2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>fail</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>, <decl><type ref="prev"/><name>ra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcplist</name></name> <modifier>*</modifier></type><name>pinsn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcp_opcode_t</name> <modifier>*</modifier></type><name>pop</name> <init>= <expr><operator>(</operator><name>pcp_opcode_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pcp_ccodes</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"uc"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"nz"</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"c/ult"</literal></expr>, <expr><literal type="string">"ugt"</literal></expr>, <expr><literal type="string">"slt"</literal></expr>, <expr><literal type="string">"sgt"</literal></expr>, 
<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"nn"</literal></expr>, <expr><literal type="string">"nv"</literal></expr>, <expr><literal type="string">"nc/uge"</literal></expr>, <expr><literal type="string">"sge"</literal></expr>, <expr><literal type="string">"sle"</literal></expr>, <expr><literal type="string">"cnz"</literal></expr>, <expr><literal type="string">"cnn"</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINT</name></cpp:macro> <cpp:value>(*info-&gt;fprintf_func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFILE</name></cpp:macro> <cpp:value>info-&gt;stream</cpp:value></cpp:define>


<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getl16</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pinsn</name> <operator>=</operator> <name><name>pcpinsns</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>pinsn</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pinsn</name> <operator>=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>opcode</name></name><operator>)</operator> <operator>!=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>opcode</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>lose</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pop</name> <operator>=</operator> <name><name>pinsn</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pop</name><operator>-&gt;</operator><name>len32</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">".hword 0x%04lx"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>insn2</name> <operator>=</operator> <call><name>bfd_getl16</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pop</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">".hword 0x%04lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pop</name><operator>-&gt;</operator><name>fmt_group</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>pop</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>pop</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"dst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"dst+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"dst-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"dst *ILLEGAL*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"src"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"src+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"src-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"src *ILLEGAL*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cnc=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cnt0=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"size=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cc_%s"</literal></expr></argument>, <argument><expr><name><name>pcp_ccodes</name><index>[<expr><name>val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"st=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"int=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"ep=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"ec=%lu"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"***UNKNOWN OPERAND `%c'***"</literal></expr></argument>, <argument><expr><name><name>pop</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name><name>pop</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>rb</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, [r%d], size=%lu"</literal></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, [%lu]"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>rb</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ld.p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"st.p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cc_%s, r%d, [r%d]"</literal></expr></argument>, <argument><expr><name><name>pcp_ccodes</name><index>[<expr><name>val</name></expr>]</index></name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cc_%s, r%d, r%d"</literal></expr></argument>, <argument><expr><name><name>pcp_ccodes</name><index>[<expr><name>val</name></expr>]</index></name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"chkb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, %lu, %s"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"set"</literal></expr> </then><else>: <expr><literal type="string">"clr"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ldl.il"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, 0x....%04lx"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>insn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ldl.iu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, 0x%04lx...."</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>insn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, %lu"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"set.f"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"clr.f"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&gt;=</operator> <name>val</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"[r%d], %lu ***ILLEGAL VALUE***, size=%lu"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>,
<argument><expr><name>insn</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"[r%d], %lu, size=%lu"</literal></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>insn</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>rb</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ra</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rb</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ra</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rb</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ra</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rb</name> <operator>==</operator> <name>ra</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, r%d ***ILLEGAL REGISTER USE***"</literal></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>pop</name><operator>-&gt;</operator><name>nr_operands</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>pop</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"[r%lu]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"dac=%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"cc_%s"</literal></expr></argument>, <argument><expr><name><name>pcp_ccodes</name><index>[<expr><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"rta=%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"eda=%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"sdb=%lu"</literal></expr></argument>, <argument><expr><name>insn</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"jl"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x200</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>~</operator><literal type="number">0x3ff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"jc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>insn</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>~</operator><literal type="number">0x3f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"jc.a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>memaddr</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>insn2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"***ILLEGAL expr FOR %s***"</literal></expr></argument>, <argument><expr><name><name>pop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"***UNKNOWN OPERAND `%c'***"</literal></expr></argument>, <argument><expr><name><name>pop</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name><name>pop</name><operator>-&gt;</operator><name>nr_operands</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>DPRINT</name> <argument_list>(<argument><expr><name>DFILE</name></expr></argument>, <argument><expr><literal type="string">"***ILLEGAL FORMAT GROUP %d***"</literal></expr></argument>, <argument><expr><name><name>pop</name><operator>-&gt;</operator><name>fmt_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><ternary><condition><expr><name><name>pop</name><operator>-&gt;</operator><name>len32</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DPRINT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DFILE</name></cpp:undef>
</block_content>}</block></function>









<function><type><name>int</name></type> 
<name>print_insn_tricore</name> <parameter_list>(<parameter><decl><type><name>memaddr</name></type></decl></parameter>, <parameter><decl><type><name>info</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>failure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mach</name></name> <operator>&amp;</operator> <name>bfd_mach_rider_mask</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>bfd_mach_rider_a</name></expr>:</case>
<expr_stmt><expr><name>current_isa</name> <operator>=</operator> <name>TRICORE_RIDER_A</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>bfd_mach_rider_b</name></expr>:</case> 
<expr_stmt><expr><name>current_isa</name> <operator>=</operator> <name>TRICORE_RIDER_B</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>bfd_mach_rider_2</name></expr>:</case>
<expr_stmt><expr><name>current_isa</name> <operator>=</operator> <name>TRICORE_V2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>tricore_init_arch_vars</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mach</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_hash_tables</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failure</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>failure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>failure</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>failure</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>failure</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">".byte 0x%02x"</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>section</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEC_ARCH_BIT_0</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>decode_pcp_insn</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>failure</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>failure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getl16</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">".hword 0x%04lx"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len32</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getl32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getl16</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>decode_tricore_insn</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>len32</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


</unit>
