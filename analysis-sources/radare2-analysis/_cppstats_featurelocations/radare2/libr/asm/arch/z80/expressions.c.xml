<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\z80\expressions.c">




































<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_rd_expr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_number</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"/><name><name>num</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read number of base %d"</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><name>base</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>tolower</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Digit found:%1x.\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>*</operator> <name>base</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_number returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_otherbasenumber</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%5d (0x%04x): Starting to read basenumber (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unexpected end of line after `@'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>!</operator><call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base must be between 1 and z\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>tolower</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_character</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%5d (0x%04x): Starting to read character (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unexpected end of line in string constant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>num_digits</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'3'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>num_digits</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><name>num_digits</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>b</name></expr>]</index> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>num_digits</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"empty literal character\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unexpected end of line after "</literal>
<literal type="string">"backslash in string constant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_character returned %d (%c).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_label</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>labels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s2</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
</block_content>}</block></for>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>c</name> <operator>-</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>labels</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>s1</name> <operator>&lt;</operator> <name>s2</name></expr> ?</condition><then> <expr><name>s1</name></expr> </then><else>: <expr><name>s2</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&gt;</operator> <name>s</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>force_skip</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>s2</name></expr></argument> &gt;</argument_list></name> <name>s</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>compute_ref</name> <argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%5d (0x%04x): returning invalid label %s.\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>force_skip</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_label</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exists</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read label (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>level</name></expr>;</init> <condition><expr><name>s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_label</name> <argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>labels</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>sp</name><operator>)</operator></expr> ?</condition><then> <expr><name>previous</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_p</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exists</name> <operator>&amp;&amp;</operator> <name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"using undefined label %.*s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>-</operator> <name>old_p</name></expr></argument>, <argument><expr><name>old_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rd_label returns invalid value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>exists</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rd_label returns valid value 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>l</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_value</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>not</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>base</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read value (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"+-~"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>not</name> <operator>=</operator> <operator>~</operator><name>not</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exist</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy_check</name></decl>;</decl_stmt>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dummy_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_check</name></expr></argument>,
<argument><expr><name>print_errors</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p1</name><operator>--</operator></expr>;</expr_stmt> 
<switch>switch <condition>(<expr><operator>*</operator><name>p1</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rd_number</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>!=</operator> <name>p2</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid character in number: \'%c\'\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <name>v</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rd_number</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>baseaddr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <name>v</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>rd_character</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>quote</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"missing closing quote (%c)\n"</literal></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>rd_otherbasenumber</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>rd_label</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <name>exist</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">010</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid literal starting with &amp;%c\n"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <call><name>rd_number</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rd_label</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>exist</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>not</name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>*</operator> <name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_factor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read factor (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <call><name>rd_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>rd_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"division by zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>/=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_factor returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_term</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read term (string=%s).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_factor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>rd_factor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>-=</operator> <call><name>rd_factor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_term returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_shift</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read shift expression "</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_term</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>&lt;&lt;=</operator> <call><name>rd_term</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>&gt;&gt;=</operator> <call><name>rd_term</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_shift returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_unequal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read "</literal>
<literal type="string">"unequality expression (string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_shift</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>&lt;=</operator> <call><name>rd_expr_unequal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>&gt;=</operator> <call><name>rd_expr_unequal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>&lt;</operator> <call><name>rd_expr_unequal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>&gt;</operator> <call><name>rd_expr_unequal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_shift returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_equal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read equality epression "</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_unequal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator> <operator>*</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name> <operator>==</operator> <call><name>rd_expr_equal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>!=</operator> <call><name>rd_expr_equal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_equal returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_and</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read and expression "</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_equal</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>&amp;=</operator> <call><name>rd_expr_and</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr_and returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_xor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read xor expression "</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_and</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr_xor: rd_expr_and returned %d "</literal>
<literal type="string">"(%04x).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>^=</operator> <call><name>rd_expr_xor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr_xor returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr_or</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Starting to read or expression "</literal>
<literal type="string">"(string=%s).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_xor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr_or: rd_expr_xor returned %d "</literal>
<literal type="string">"(%04x).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>rd_expr_or</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr_or returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_rd_expr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%5d (0x%04x): Starting to read expression "</literal>
<literal type="string">"(string=%s, delimiter=%c).\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>delimiter</name></expr> ?</condition><then> <expr><name>delimiter</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>p</name> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>delimiter</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"expression expected (not %s)\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rd_expr_or</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>check</name></expr></argument>,
<argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>delimiter</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>print_errors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"junk at end of expression: %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): rd_expr returned %d (%04x).\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d (0x%04x): Returning invalid result.\n"</literal></expr></argument>,
<argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_expr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_rd_expr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>print_errors</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>valid</name> <operator>||</operator> <operator>*</operator><name>valid</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>check</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printerr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"expression fully enclosed in parenthesis\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
