<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\z80\z80asm.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z80ASM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z80ASM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUFLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INCLUDE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<enum>enum <name>mnemonic</name>
<block>{
<decl><name>Z80_CALL</name></decl>, <decl><name>Z80_CPDR</name></decl>, <decl><name>Z80_CPIR</name></decl>, <decl><name>Z80_DJNZ</name></decl>, <decl><name>Z80_HALT</name></decl>, <decl><name>Z80_INDR</name></decl>,
<decl><name>Z80_INIR</name></decl>, <decl><name>Z80_LDDR</name></decl>, <decl><name>Z80_LDIR</name></decl>, <decl><name>Z80_OTDR</name></decl>, <decl><name>Z80_OTIR</name></decl>, <decl><name>Z80_OUTD</name></decl>,
<decl><name>Z80_OUTI</name></decl>, <decl><name>Z80_PUSH</name></decl>, <decl><name>Z80_RETI</name></decl>, <decl><name>Z80_RETN</name></decl>, <decl><name>Z80_RLCA</name></decl>, <decl><name>Z80_RRCA</name></decl>,
<decl><name>Z80_DEFB</name></decl>, <decl><name>Z80_DEFW</name></decl>, <decl><name>Z80_DEFS</name></decl>, <decl><name>Z80_DEFM</name></decl>, <decl><name>Z80_ADC</name></decl>, <decl><name>Z80_ADD</name></decl>,
<decl><name>Z80_AND</name></decl>, <decl><name>Z80_BIT</name></decl>, <decl><name>Z80_CCF</name></decl>, <decl><name>Z80_CPD</name></decl>, <decl><name>Z80_CPI</name></decl>, <decl><name>Z80_CPL</name></decl>, <decl><name>Z80_DAA</name></decl>,
<decl><name>Z80_DEC</name></decl>, <decl><name>Z80_EQU</name></decl>, <decl><name>Z80_EXX</name></decl>, <decl><name>Z80_INC</name></decl>, <decl><name>Z80_IND</name></decl>, <decl><name>Z80_INI</name></decl>, <decl><name>Z80_LDD</name></decl>,
<decl><name>Z80_LDI</name></decl>, <decl><name>Z80_NEG</name></decl>, <decl><name>Z80_NOP</name></decl>, <decl><name>Z80_OUT</name></decl>, <decl><name>Z80_POP</name></decl>, <decl><name>Z80_RES</name></decl>, <decl><name>Z80_RET</name></decl>,
<decl><name>Z80_RLA</name></decl>, <decl><name>Z80_RLC</name></decl>, <decl><name>Z80_RLD</name></decl>, <decl><name>Z80_RRA</name></decl>, <decl><name>Z80_RRC</name></decl>, <decl><name>Z80_RRD</name></decl>, <decl><name>Z80_RST</name></decl>,
<decl><name>Z80_SBC</name></decl>, <decl><name>Z80_SCF</name></decl>, <decl><name>Z80_SET</name></decl>, <decl><name>Z80_SLA</name></decl>, <decl><name>Z80_SLL</name></decl>, <decl><name>Z80_SLI</name></decl>, <decl><name>Z80_SRA</name></decl>,
<decl><name>Z80_SRL</name></decl>, <decl><name>Z80_SUB</name></decl>, <decl><name>Z80_XOR</name></decl>, <decl><name>Z80_ORG</name></decl>, <decl><name>Z80_CP</name></decl>, <decl><name>Z80_DI</name></decl>, <decl><name>Z80_EI</name></decl>,
<decl><name>Z80_EX</name></decl>, <decl><name>Z80_IM</name></decl>, <decl><name>Z80_IN</name></decl>, <decl><name>Z80_JP</name></decl>, <decl><name>Z80_JR</name></decl>, <decl><name>Z80_LD</name></decl>, <decl><name>Z80_OR</name></decl>, <decl><name>Z80_RL</name></decl>,
<decl><name>Z80_RR</name></decl>, <decl><name>Z80_DB</name></decl>, <decl><name>Z80_DW</name></decl>, <decl><name>Z80_DS</name></decl>, <decl><name>Z80_DM</name></decl>, <decl><name>Z80_INCLUDE</name></decl>, <decl><name>Z80_INCBIN</name></decl>,
<decl><name>Z80_IF</name></decl>, <decl><name>Z80_ELSE</name></decl>, <decl><name>Z80_ENDIF</name></decl>, <decl><name>Z80_END</name></decl>, <decl><name>Z80_MACRO</name></decl>, <decl><name>Z80_ENDM</name></decl>, <decl><name>Z80_SEEK</name></decl>
}</block>;</enum>


<enum>enum <name>reftype</name>
<block>{
<decl><name>TYPE_BSR</name></decl>, 
<decl><name>TYPE_DS</name></decl>, 
<decl><name>TYPE_RST</name></decl>, 
<decl><name>TYPE_ABSW</name></decl>, 
<decl><name>TYPE_ABSB</name></decl>, 
<decl><name>TYPE_RELB</name></decl>, 
<decl><name>TYPE_LABEL</name></decl> 
}</block>;</enum>


<enum>enum <name>filetype</name>
<block>{
<decl><name>FILETYPE_ASM</name></decl>
}</block>;</enum>


<struct>struct <name>label</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>reference</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>infile</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>filetype</name></name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>name</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>name</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>includedir</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>includedir</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>macro_arg</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>macro_arg</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>which</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>macro_line</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>macro_line</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_arg</name></name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>macro</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_line</name></name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>stack</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>includedir</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shouldclose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>labels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>macro</name></name> <modifier>*</modifier></type><name>macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>macro_line</name></name> <modifier>*</modifier></type><name>macro_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>macro_args</name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>reference</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>reference</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>reftype</name></name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>oseekpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>lseekpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>delimiter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>baseaddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>comma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>infile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>computed_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>includedir</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printerr</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delspc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_expr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_label</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exists</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_character</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_errors</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compute_ref</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reference</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_invalid</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
