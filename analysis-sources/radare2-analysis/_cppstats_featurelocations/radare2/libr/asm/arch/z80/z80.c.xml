<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\z80\z80.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"z80_tab.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>z80_op_24_branch_index_res</name> <parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>hex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hex</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>hex</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>hex</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x46</literal></expr>:</case> <return>return <expr><literal type="number">0x40</literal></expr>;</return>
<case>case <expr><literal type="number">0x4e</literal></expr>:</case> <return>return <expr><literal type="number">0x41</literal></expr>;</return>
<case>case <expr><literal type="number">0x56</literal></expr>:</case> <return>return <expr><literal type="number">0x42</literal></expr>;</return>
<case>case <expr><literal type="number">0x5e</literal></expr>:</case> <return>return <expr><literal type="number">0x43</literal></expr>;</return>
<case>case <expr><literal type="number">0x66</literal></expr>:</case> <return>return <expr><literal type="number">0x44</literal></expr>;</return>
<case>case <expr><literal type="number">0x6e</literal></expr>:</case> <return>return <expr><literal type="number">0x45</literal></expr>;</return>
<case>case <expr><literal type="number">0x76</literal></expr>:</case> <return>return <expr><literal type="number">0x46</literal></expr>;</return>
<case>case <expr><literal type="number">0x7e</literal></expr>:</case> <return>return <expr><literal type="number">0x47</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>hex</name> <operator>&gt;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>?</condition><then> <expr><name>hex</name> <operator>-</operator> <literal type="number">0x38</literal></expr></then><else>: <expr><literal type="number">0xc8</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>z80OpLength</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>z80_opcode</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>z80_op</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>Z80_OP_UNK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>Z80_ENC0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>z80_opcode</name> <operator>*</operator><operator>)</operator><name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>op</name><index>[<expr><call><name>z80_fddd_branch_index_res</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>Z80_ENC1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>z80_opcode</name> <operator>*</operator><operator>)</operator><name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>op</name><index>[<expr><call><name>z80_ed_branch_index_res</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>Z80_OP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>Z80_ARG8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>Z80_ARG16</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>Z80_OP16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>Z80_ARG16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>Z80_OP24</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>FUNC_ATTR_USED</name> <specifier>static</specifier> <name>int</name></type> <name>z80Disass</name> <parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>z80OpLength</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z80_opcode</name> <modifier>*</modifier></type><name>z_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cb_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z_op</name> <operator>=</operator> <name>z80_op</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z80_OP8</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z80_OP8</name><operator>^</operator><name>Z80_ARG8</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z80_OP8</name><operator>^</operator><name>Z80_ARG16</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z80_OP16</name></expr>:</case>
<expr_stmt><expr><name>cb_tab</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cb_tab</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z80_OP_UNK</name> <operator>^</operator> <name>Z80_ENC1</name></expr>:</case>
<expr_stmt><expr><name>z_op</name> <operator>=</operator> <operator>(</operator><name>z80_opcode</name> <operator>*</operator><operator>)</operator><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>z80_ed_branch_index_res</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>Z80_OP16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <operator>(</operator><name>Z80_OP16</name><operator>^</operator><name>Z80_ARG16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>Z80_OP_UNK</name> <operator>^</operator> <name>Z80_ENC0</name></expr>:</case>
<expr_stmt><expr><name>z_op</name> <operator>=</operator> <operator>(</operator><name>z80_opcode</name> <operator>*</operator><operator>)</operator><name><name>z_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>z80_fddd_branch_index_res</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>Z80_OP16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <operator>(</operator><name>Z80_OP16</name><operator>^</operator><name>Z80_ARG16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <operator>(</operator><name>Z80_OP16</name><operator>^</operator><name>Z80_ARG8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <operator>(</operator><name>Z80_OP24</name> <operator>^</operator> <name>Z80_ARG8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cb_tab</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>op_moar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>cb_tab</name><index>[<expr><call><name>z80_op_24_branch_index_res</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <operator>(</operator><name>Z80_OP16</name> <operator>^</operator> <name>Z80_ARG8</name> <operator>^</operator> <name>Z80_ARG16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>z_op</name><index>[<expr><name>res</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf_asm</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
