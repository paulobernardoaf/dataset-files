<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\wasm\wasm.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../bin/format/wasm/wasm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>WasmOpDef</name></type> <name><name>opcodes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>WASM_OP_TRAP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"trap"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_NOP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_BLOCK</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"block"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_LOOP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"loop"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_IF</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"if"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_ELSE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"else"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_END</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"end"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_BR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"br"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_BRIF</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"br_if"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_BRTABLE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"brtable"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_RETURN</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"return"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_CALL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"call"</literal></expr> , <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_CALLINDIRECT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"call_indirect"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_DROP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"drop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_SELECT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"select"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_GETLOCAL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"get_local"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_SETLOCAL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"set_local"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_TEELOCAL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"tee_local"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_GETGLOBAL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"get_global"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_SETGLOBAL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"set_global"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32LOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64LOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LOAD8S</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.load8_s"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LOAD8U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.load8_u"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LOAD16S</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.load16_s"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LOAD16U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.load_16_u"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD8S</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load8_s"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD8U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load8_u"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD16S</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load16_s"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD16U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load16_u"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD32S</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load32_s"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LOAD32U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.load32_u"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32STORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.store"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64STORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.store"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32STORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.store"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64STORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.store"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32STORE8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.store8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32STORE16</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.store16"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64STORE8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.store8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64STORE16</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.store16"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64STORE32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.store32"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_CURRENTMEMORY</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"current_memory"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_GROWMEMORY</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"grow_memory"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32CONST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.const"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64CONST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.const"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CONST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.const"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CONST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.const"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32EQZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.eqz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32EQ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.eq"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32NE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.ne"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.lt_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LTU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.lt_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32GTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.gt_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32GTU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.gt_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.le_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32LEU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.le_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32GES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.ge_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32GEU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.ge_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64EQZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.eqz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64EQ</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">" i64.eq"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64NE</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">" i64.ne"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.lt_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LTU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.lt_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64GTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.gt_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64GTU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.gt_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.le_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64LEU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.le_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64GES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.ge_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64GEU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.ge_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32EQ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.eq"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32NE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.ne"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32LT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.lt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32GT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.gt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.le"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32GE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.ge"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64EQ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.eq"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64NE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.ne"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64LT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.lt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64GT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.gt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.le"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64GE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.ge"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32CLZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.clz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32CTZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.ctz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32POPCNT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.popcnt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32SUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.sub"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32MUL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.mul"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32DIVS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.div_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32DIVU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.div_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32REMS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.rem_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32REMU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.rem_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32AND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.and"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32OR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.or"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32XOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.xor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32SHL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.shl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32SHRS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.shr_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32SHRU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.shr_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ROTL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.rotl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ROTR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.rotr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64CLZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.clz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64CTZ</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.ctz"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64POPCNT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.popcnt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64SUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.sub"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64MUL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.mul"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64DIVS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.div_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64DIVU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.div_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64REMS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.rem_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64REMU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.rem_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64AND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.and"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64OR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.or"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64XOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.xor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64SHL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.shl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64SHRS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.shr_s"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64SHRU</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.shr_u"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ROTL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.rotl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ROTR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.rotr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32ABS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.abs"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32NEG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.neg"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CEIL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.ceil"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32FLOOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.floor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32TRUNC</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.trunc"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32NEAREST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.nearest"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32SQRT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.sqrt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32ADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32SUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.sub"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32MUL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.mul"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32DIV</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.div"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32MIN</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.min"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32MAX</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32COPYSIGN</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">" f32.copysign"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64ABS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.abs"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64NEG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.neg"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CEIL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.ceil"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64FLOOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.floor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64TRUNC</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.trunc"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64NEAREST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.nearest"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64SQRT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.sqrt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64ADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64SUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.sub"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64MUL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.mul"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64DIV</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.div"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64MIN</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.min"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64MAX</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64COPYSIGN</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.copysign"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32WRAPI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.wrap/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32TRUNCSF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.trunc_s/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32TRUNCUF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.trunc_u/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32TRUNCSF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.trunc_s/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32TRUNCUF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.trunc_u/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64EXTENDSI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.extend_s/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64EXTENDUI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.extend_u/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64TRUNCSF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.trunc_s/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64TRUNCUF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.trunc_u/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64TRUNCSF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.trunc_s/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64TRUNCUF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.trunc_u/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CONVERTSI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.convert_s/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CONVERTUI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.convert_u/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CONVERTSI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.convert_s/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32CONVERTUI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.convert_u/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32DEMOTEF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.demote/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CONVERTSI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.convert_s/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CONVERTUI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.convert_u/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CONVERTSI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.convert_s/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64CONVERTUI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.convert_u/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64PROMOTEF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.promote/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32REINTERPRETF32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.reinterpret/f32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64REINTERPRETF64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.reinterpret/f64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F32REINTERPRETI32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f32.reinterpret/i32"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_F64REINTERPRETI64</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"f64.reinterpret/i64"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WasmOpDef</name></type> <name><name>opcodes_threads</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>WASM_OP_ATOMICNOTIFY</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"atomic.notify"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICWAIT</name></expr> ]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.wait"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICWAIT</name></expr> ]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.wait"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICLOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICLOAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.load"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICLOAD16U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.load16_u"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICLOAD8U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.load8_u"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICLOAD16U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.load16_u"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICLOAD32U</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.load32_u"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICSTORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.store"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICSTORE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.store"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICSTORE8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.store8"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICSTORE16</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.store16"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICSTORE8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.store8"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICSTORE16</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.store16"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICSTORE32</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.store32"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UADD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.add"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8USUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16USUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWSUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8USUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16USUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32USUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWSUB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.sub"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UAND</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.and"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.or"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UXOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.xor"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.xchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMWCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMWCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW8UCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw8_u.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I32ATOMICRMW16UCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i32.atomic.rmw16_u.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW8UCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw8_u.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW16UCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw16_u.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><index>[<expr><name>WASM_OP_I64ATOMICRMW32UCMPXCHG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"i64.atomic.rmw32_u.cmpxchg"</literal></expr> , <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WASM_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>R_IPI</name> <name>int</name></type> <name>wasm_asm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WasmOpDef</name> <modifier>*</modifier></type><name>opdef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>opdef</name> <operator>=</operator> <operator>&amp;</operator><name><name>opcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>opdef</name> <operator>=</operator> <operator>&amp;</operator><name><name>opcodes_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
<label><name>err</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>R_IPI</name> <name>int</name></type> <name>wasm_dis</name><parameter_list>(<parameter><decl><type><name>WasmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>WASM_TYPE_OP_CORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WasmOpDef</name> <modifier>*</modifier></type><name>opdef</name> <init>= <expr><operator>&amp;</operator><name><name>opcodes</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WASM_OP_TRAP</name></expr>:</case>
<case>case <expr><name>WASM_OP_NOP</name></expr>:</case>
<case>case <expr><name>WASM_OP_ELSE</name></expr>:</case>
<case>case <expr><name>WASM_OP_RETURN</name></expr>:</case>
<case>case <expr><name>WASM_OP_DROP</name></expr>:</case>
<case>case <expr><name>WASM_OP_SELECT</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32EQZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32EQ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32NE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LTS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LTU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32GTS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32GTU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LES</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LEU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32GES</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32GEU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64EQZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64EQ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64NE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LTS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LTU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64GTS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64GTU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LES</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LEU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64GES</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64GEU</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32EQ</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32NE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32LT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32GT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32LE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32GE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64EQ</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64NE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64LT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64GT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64LE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64GE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32CLZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32CTZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32POPCNT</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32SUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32MUL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32DIVS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32DIVU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32REMS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32REMU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32AND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32OR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32XOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32SHL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32SHRS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32SHRU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ROTL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ROTR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64CLZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64CTZ</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64POPCNT</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64SUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64MUL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64DIVS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64DIVU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64REMS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64REMU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64AND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64OR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64XOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64SHL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64SHRS</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64SHRU</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ROTL</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ROTR</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32ABS</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32NEG</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32CEIL</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32FLOOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32TRUNC</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32NEAREST</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32SQRT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32ADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32SUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32MUL</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32DIV</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32MIN</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32MAX</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32COPYSIGN</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64ABS</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64NEG</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64CEIL</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64FLOOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64TRUNC</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64NEAREST</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64SQRT</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64ADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64SUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64MUL</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64DIV</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64MIN</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64MAX</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64COPYSIGN</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32WRAPI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32TRUNCSF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32TRUNCUF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32TRUNCSF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32TRUNCUF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64EXTENDSI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64EXTENDUI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64TRUNCSF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64TRUNCUF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64TRUNCSF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64TRUNCUF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32CONVERTSI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32CONVERTUI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32CONVERTSI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32CONVERTUI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32DEMOTEF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64CONVERTSI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64CONVERTUI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64CONVERTSI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64CONVERTUI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64PROMOTEF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32REINTERPRETF32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64REINTERPRETF64</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32REINTERPRETI32</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64REINTERPRETI64</name></expr>:</case>
<case>case <expr><name>WASM_OP_END</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_BLOCK</name></expr>:</case>
<case>case <expr><name>WASM_OP_LOOP</name></expr>:</case>
<case>case <expr><name>WASM_OP_IF</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_i32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><literal type="number">0x80</literal> <operator>-</operator> <name>val</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_WASM_VALUETYPE_EMPTY</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_WASM_VALUETYPE_i32</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s (result i32)"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_WASM_VALUETYPE_i64</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s (result i64)"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_WASM_VALUETYPE_f32</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s (result f32)"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_WASM_VALUETYPE_f64</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s (result f64)"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s (result ?)"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_BR</name></expr>:</case>
<case>case <expr><name>WASM_OP_BRIF</name></expr>:</case>
<case>case <expr><name>WASM_OP_CALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_BRTABLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>def</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>table</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name> <operator>&lt;=</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d "</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_CALLINDIRECT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name> <operator>&lt;=</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reserved</name> <operator>&amp;=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_GETLOCAL</name></expr>:</case>
<case>case <expr><name>WASM_OP_SETLOCAL</name></expr>:</case>
<case>case <expr><name>WASM_OP_TEELOCAL</name></expr>:</case>
<case>case <expr><name>WASM_OP_GETGLOBAL</name></expr>:</case>
<case>case <expr><name>WASM_OP_SETGLOBAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_I32LOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32LOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64LOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LOAD8S</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LOAD8U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LOAD16S</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32LOAD16U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD8S</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD8U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD16S</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD16U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD32S</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64LOAD32U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32STORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64STORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F32STORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_F64STORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32STORE8</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32STORE16</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64STORE8</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64STORE16</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64STORE32</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name> <operator>&lt;=</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_CURRENTMEMORY</name></expr>:</case>
<case>case <expr><name>WASM_OP_GROWMEMORY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reserved</name> <operator>&amp;=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>WASM_OP_I32CONST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_i32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PFMT32d</name></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_I64CONST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_i64_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PFMT64d</name></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WASM_OP_F32CONST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<union>union <name>fi</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>r_read_at_le32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %f"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>WASM_OP_F64CONST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<union>union <name>di</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>r_read_at_le64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %f"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>WASM_TYPE_OP_ATOMIC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>atomic</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WasmOpDef</name> <modifier>*</modifier></type><name>opdef</name> <init>= <expr><operator>&amp;</operator><name><name>opcodes_threads</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WASM_OP_I32ATOMICLOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICLOAD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICLOAD8U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICLOAD16U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICLOAD8U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICLOAD16U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICLOAD32U</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICSTORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICSTORE</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICSTORE8</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICSTORE16</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICSTORE8</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICSTORE16</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICSTORE32</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8UADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16UADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8UADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16UADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32UADD</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8USUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16USUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWSUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8USUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16USUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32USUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWSUB</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8UAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16UAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8UAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16UAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32UAND</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8UOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16UOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8UOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16UOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32UOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8UXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16UXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8UXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16UXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32UXOR</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMWXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMWXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW8UXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I32ATOMICRMW16UXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW8UXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW16UXCHG</name></expr>:</case>
<case>case <expr><name>WASM_OP_I64ATOMICRMW32UXCHG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name> <operator>&lt;=</operator> <name>buf_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>opdef</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
