<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\rsp\rsp_idec.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsp_idec.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_gp_reg_soft_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"at"</literal></expr>, <expr><literal type="string">"v0"</literal></expr>, <expr><literal type="string">"v1"</literal></expr>, <expr><literal type="string">"a0"</literal></expr>, <expr><literal type="string">"a1"</literal></expr>, <expr><literal type="string">"a2"</literal></expr>, <expr><literal type="string">"a3"</literal></expr>,
<expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"t2"</literal></expr>, <expr><literal type="string">"t3"</literal></expr>, <expr><literal type="string">"t4"</literal></expr>, <expr><literal type="string">"t5"</literal></expr>, <expr><literal type="string">"t6"</literal></expr>, <expr><literal type="string">"t7"</literal></expr>,
<expr><literal type="string">"s0"</literal></expr>, <expr><literal type="string">"s1"</literal></expr>, <expr><literal type="string">"s2"</literal></expr>, <expr><literal type="string">"s3"</literal></expr>, <expr><literal type="string">"s4"</literal></expr>, <expr><literal type="string">"s5"</literal></expr>, <expr><literal type="string">"s6"</literal></expr>, <expr><literal type="string">"s7"</literal></expr>,
<expr><literal type="string">"t8"</literal></expr>, <expr><literal type="string">"t9"</literal></expr>, <expr><literal type="string">"k0"</literal></expr>, <expr><literal type="string">"k1"</literal></expr>, <expr><literal type="string">"gp"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"s8"</literal></expr>, <expr><literal type="string">"ra"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c0_reg_soft_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"SP_MEM_ADDR"</literal></expr>, <expr><literal type="string">"SP_DRAM_ADDR"</literal></expr>, <expr><literal type="string">"SP_RD_LEN"</literal></expr>, <expr><literal type="string">"SP_WR_LEN"</literal></expr>,
<expr><literal type="string">"SP_STATUS"</literal></expr>, <expr><literal type="string">"SP_DMA_FULL"</literal></expr>, <expr><literal type="string">"SP_DMA_BUSY"</literal></expr>, <expr><literal type="string">"SP_SEMAPHORE"</literal></expr>,
<expr><literal type="string">"DPC_START"</literal></expr>, <expr><literal type="string">"DPC_END"</literal></expr>, <expr><literal type="string">"DPC_CURRENT"</literal></expr>, <expr><literal type="string">"DPC_STATUS"</literal></expr>,
<expr><literal type="string">"DPC_CLOCK"</literal></expr>, <expr><literal type="string">"DPC_BUF_BUSY"</literal></expr>, <expr><literal type="string">"DPC_PIPE_BUSY"</literal></expr>, <expr><literal type="string">"DPC_TMEM_BUSY"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_gp_reg_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$0"</literal></expr>, <expr><literal type="string">"$1"</literal></expr>, <expr><literal type="string">"$2"</literal></expr>, <expr><literal type="string">"$3"</literal></expr>, <expr><literal type="string">"$4"</literal></expr>, <expr><literal type="string">"$5"</literal></expr>, <expr><literal type="string">"$6"</literal></expr>, <expr><literal type="string">"$7"</literal></expr>,
<expr><literal type="string">"$8"</literal></expr>, <expr><literal type="string">"$9"</literal></expr>, <expr><literal type="string">"$10"</literal></expr>, <expr><literal type="string">"$11"</literal></expr>, <expr><literal type="string">"$12"</literal></expr>, <expr><literal type="string">"$13"</literal></expr>, <expr><literal type="string">"$14"</literal></expr>, <expr><literal type="string">"$15"</literal></expr>,
<expr><literal type="string">"$16"</literal></expr>, <expr><literal type="string">"$17"</literal></expr>, <expr><literal type="string">"$18"</literal></expr>, <expr><literal type="string">"$19"</literal></expr>, <expr><literal type="string">"$20"</literal></expr>, <expr><literal type="string">"$21"</literal></expr>, <expr><literal type="string">"$22"</literal></expr>, <expr><literal type="string">"$23"</literal></expr>,
<expr><literal type="string">"$24"</literal></expr>, <expr><literal type="string">"$25"</literal></expr>, <expr><literal type="string">"$26"</literal></expr>, <expr><literal type="string">"$27"</literal></expr>, <expr><literal type="string">"$28"</literal></expr>, <expr><literal type="string">"$29"</literal></expr>, <expr><literal type="string">"$30"</literal></expr>, <expr><literal type="string">"$31"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c0_reg_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$c0"</literal></expr>, <expr><literal type="string">"$c1"</literal></expr>, <expr><literal type="string">"$c2"</literal></expr>, <expr><literal type="string">"$c3"</literal></expr>, <expr><literal type="string">"$c4"</literal></expr>, <expr><literal type="string">"$c5"</literal></expr>, <expr><literal type="string">"$c6"</literal></expr>, <expr><literal type="string">"$c7"</literal></expr>,
<expr><literal type="string">"$c8"</literal></expr>, <expr><literal type="string">"$c9"</literal></expr>, <expr><literal type="string">"$c10"</literal></expr>, <expr><literal type="string">"$c11"</literal></expr>, <expr><literal type="string">"$c12"</literal></expr>, <expr><literal type="string">"$c13"</literal></expr>, <expr><literal type="string">"$c14"</literal></expr>, <expr><literal type="string">"$c15"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c2_creg_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$vco"</literal></expr>, <expr><literal type="string">"$vcc"</literal></expr>, <expr><literal type="string">"$vce"</literal></expr>, <expr><literal type="string">"???"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c2_accu_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ACC_H"</literal></expr>, <expr><literal type="string">"ACC_M"</literal></expr>, <expr><literal type="string">"ACC_L"</literal></expr>, <expr><literal type="string">"???"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c2_vreg_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$v0"</literal></expr>, <expr><literal type="string">"$v1"</literal></expr>, <expr><literal type="string">"$v2"</literal></expr>, <expr><literal type="string">"$v3"</literal></expr>, <expr><literal type="string">"$v4"</literal></expr>, <expr><literal type="string">"$v5"</literal></expr>, <expr><literal type="string">"$v6"</literal></expr>, <expr><literal type="string">"$v7"</literal></expr>,
<expr><literal type="string">"$v8"</literal></expr>, <expr><literal type="string">"$v9"</literal></expr>, <expr><literal type="string">"$v10"</literal></expr>, <expr><literal type="string">"$v11"</literal></expr>, <expr><literal type="string">"$v12"</literal></expr>, <expr><literal type="string">"$v13"</literal></expr>, <expr><literal type="string">"$v14"</literal></expr>, <expr><literal type="string">"$v15"</literal></expr>,
<expr><literal type="string">"$v16"</literal></expr>, <expr><literal type="string">"$v17"</literal></expr>, <expr><literal type="string">"$v18"</literal></expr>, <expr><literal type="string">"$v19"</literal></expr>, <expr><literal type="string">"$v20"</literal></expr>, <expr><literal type="string">"$v21"</literal></expr>, <expr><literal type="string">"$v22"</literal></expr>, <expr><literal type="string">"$v23"</literal></expr>,
<expr><literal type="string">"$v24"</literal></expr>, <expr><literal type="string">"$v25"</literal></expr>, <expr><literal type="string">"$v26"</literal></expr>, <expr><literal type="string">"$v27"</literal></expr>, <expr><literal type="string">"$v28"</literal></expr>, <expr><literal type="string">"$v29"</literal></expr>, <expr><literal type="string">"$v30"</literal></expr>, <expr><literal type="string">"$v31"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>rsp_c2_vreg_element_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"[0q]"</literal></expr>, <expr><literal type="string">"[1q]"</literal></expr>, <expr><literal type="string">"[0h]"</literal></expr>, <expr><literal type="string">"[1h]"</literal></expr>, <expr><literal type="string">"[2h]"</literal></expr>, <expr><literal type="string">"[3h]"</literal></expr>,
<expr><literal type="string">"[0]"</literal></expr>, <expr><literal type="string">"[1]"</literal></expr>, <expr><literal type="string">"[2]"</literal></expr>, <expr><literal type="string">"[3]"</literal></expr>, <expr><literal type="string">"[4]"</literal></expr>, <expr><literal type="string">"[5]"</literal></expr>, <expr><literal type="string">"[6]"</literal></expr>, <expr><literal type="string">"[7]"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_GP_REG, 21, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_GP_REG, 16, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RD_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_GP_REG, 11, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_SHIFT_AMOUNT, 6, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUI_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_ZIMM, 0, 0xffff, 16, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIMM_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_ZIMM, 0, 0xffff, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMM_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_SIMM, 0, 0, 0, 0, 0xffff, 0x8000, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_OFFSET, 0, 0, 0, 0, 0xffff, 0x8000, 2 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_OFFSET_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0xffff, 0x8000, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_TARGET, 0, 0x03ff, 2, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C0_REG_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C0_REG, 11, 0x0f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2_CREG_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_CREG, 11, 0x03, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2_ACCU_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_ACCU, 21, 0x03, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VS_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG, 11, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG, 6, 0x1f, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BYTE_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG_BYTE, 16, 0x1f, 0, 7, 0xf, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VS_BYTE_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG_BYTE, 11, 0x1f, 0, 7, 0xf, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_SCALAR_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG_SCALAR, 16, 0x1f, 0,21, 0x7, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD_SCALAR_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG_SCALAR, 6, 0x1f, 0,11, 0x7, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_ELEMENT_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_C2_VREG_ELEMENT, 16, 0x1f, 0,21, 0xf, 0, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VOFFSET1_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0x7f, 0x40, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VOFFSET2_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0x7f, 0x40, 1 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VOFFSET4_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0x7f, 0x40, 2 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VOFFSET8_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0x7f, 0x40, 3 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VOFFSET16_DECODER</name></cpp:macro> <cpp:value>{ RSP_OPND_BASE_OFFSET, 21, 0x1f, 0, 0, 0x7f, 0x40, 4 }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_NONE</name></cpp:macro> <cpp:value>0,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_TARGET</name></cpp:macro> <cpp:value>1, { TARGET_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RS_OFFSET</name></cpp:macro> <cpp:value>2, { RS_DECODER, OFFSET_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RS_RT_OFFSET</name></cpp:macro> <cpp:value>3, { RS_DECODER, RT_DECODER, OFFSET_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_BASE_OFFSET</name></cpp:macro> <cpp:value>2, { RT_DECODER, BASE_OFFSET_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RS</name></cpp:macro> <cpp:value>1, { RS_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_LUI</name></cpp:macro> <cpp:value>2, { RT_DECODER, LUI_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_RS_SIMM</name></cpp:macro> <cpp:value>3, { RT_DECODER, RS_DECODER, SIMM_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_RS_ZIMM</name></cpp:macro> <cpp:value>3, { RT_DECODER, RS_DECODER, ZIMM_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RD_RT_SA</name></cpp:macro> <cpp:value>3, { RD_DECODER, RT_DECODER, SA_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RD_RT_RS</name></cpp:macro> <cpp:value>3, { RD_DECODER, RT_DECODER, RS_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RD_RS_RT</name></cpp:macro> <cpp:value>3, { RD_DECODER, RS_DECODER, RT_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_C0_REG</name></cpp:macro> <cpp:value>2, { RT_DECODER, C0_REG_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_C2_CREG</name></cpp:macro> <cpp:value>2, { RT_DECODER, C2_CREG_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_RT_VSB</name></cpp:macro> <cpp:value>2, { RT_DECODER, VS_BYTE_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VDS_VTS</name></cpp:macro> <cpp:value>2, { VD_SCALAR_DECODER, VT_SCALAR_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VTB_BASE_OFFSET1</name></cpp:macro> <cpp:value>2, { VT_BYTE_DECODER, BASE_VOFFSET1_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VTB_BASE_OFFSET2</name></cpp:macro> <cpp:value>2, { VT_BYTE_DECODER, BASE_VOFFSET2_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VTB_BASE_OFFSET4</name></cpp:macro> <cpp:value>2, { VT_BYTE_DECODER, BASE_VOFFSET4_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VTB_BASE_OFFSET8</name></cpp:macro> <cpp:value>2, { VT_BYTE_DECODER, BASE_VOFFSET8_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VTB_BASE_OFFSET16</name></cpp:macro> <cpp:value>2, { VT_BYTE_DECODER, BASE_VOFFSET16_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VD_VS_C2_ACCU</name></cpp:macro> <cpp:value>3, { VD_DECODER, VS_DECODER, C2_ACCU_DECODER }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNDS_VD_VS_VTE</name></cpp:macro> <cpp:value>3, { VD_DECODER, VS_DECODER, VT_ELEMENT_DECODER }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID</name></cpp:macro> <cpp:value>{ "invalid", RSP_OP_INVALID, OPNDS_NONE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro> <cpp:value>{ "nop", RSP_OP_NOP, OPNDS_NONE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL</name></cpp:macro> <cpp:value>{ "sll", RSP_OP_SLL, OPNDS_RD_RT_SA }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRL</name></cpp:macro> <cpp:value>{ "srl", RSP_OP_SRL, OPNDS_RD_RT_SA }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRA</name></cpp:macro> <cpp:value>{ "sra", RSP_OP_SRA, OPNDS_RD_RT_SA }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLLV</name></cpp:macro> <cpp:value>{ "sllv", RSP_OP_SLLV, OPNDS_RD_RT_RS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRLV</name></cpp:macro> <cpp:value>{ "srlv", RSP_OP_SRLV, OPNDS_RD_RT_RS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAV</name></cpp:macro> <cpp:value>{ "srav", RSP_OP_SRAV, OPNDS_RD_RT_RS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JR</name></cpp:macro> <cpp:value>{ "jr", RSP_OP_JR, OPNDS_RS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BREAK</name></cpp:macro> <cpp:value>{ "break", RSP_OP_BREAK, OPNDS_NONE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro> <cpp:value>{ "add", RSP_OP_ADD, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU</name></cpp:macro> <cpp:value>{ "addu", RSP_OP_ADDU, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name></cpp:macro> <cpp:value>{ "sub", RSP_OP_SUB, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU</name></cpp:macro> <cpp:value>{ "subu", RSP_OP_SUBU, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro> <cpp:value>{ "and", RSP_OP_AND, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name></cpp:macro> <cpp:value>{ "or", RSP_OP_OR, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR</name></cpp:macro> <cpp:value>{ "xor", RSP_OP_XOR, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR</name></cpp:macro> <cpp:value>{ "nor", RSP_OP_NOR, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLT</name></cpp:macro> <cpp:value>{ "slt", RSP_OP_SLT, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTU</name></cpp:macro> <cpp:value>{ "sltu", RSP_OP_SLTU, OPNDS_RD_RS_RT }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLTZ</name></cpp:macro> <cpp:value>{ "bltz", RSP_OP_BLTZ, OPNDS_RS_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGEZ</name></cpp:macro> <cpp:value>{ "bgez", RSP_OP_BGEZ, OPNDS_RS_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLTZAL</name></cpp:macro> <cpp:value>{ "bltzal", RSP_OP_BLTZAL, OPNDS_RS_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGEZAL</name></cpp:macro> <cpp:value>{ "bgezal", RSP_OP_BGEZAL, OPNDS_RS_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFC0</name></cpp:macro> <cpp:value>{ "mfc0", RSP_OP_MFC0, OPNDS_RT_C0_REG }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTC0</name></cpp:macro> <cpp:value>{ "mtc0", RSP_OP_MTC0, OPNDS_RT_C0_REG }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFC2</name></cpp:macro> <cpp:value>{ "mfc2", RSP_OP_MFC2, OPNDS_RT_VSB }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTC2</name></cpp:macro> <cpp:value>{ "mtc2", RSP_OP_MTC2, OPNDS_RT_VSB }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFC2</name></cpp:macro> <cpp:value>{ "cfc2", RSP_OP_CFC2, OPNDS_RT_C2_CREG }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTC2</name></cpp:macro> <cpp:value>{ "ctc2", RSP_OP_CTC2, OPNDS_RT_C2_CREG }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMULF</name></cpp:macro> <cpp:value>{ "vmulf", RSP_OP_VMULF, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMULU</name></cpp:macro> <cpp:value>{ "vmulu", RSP_OP_VMULU, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUDL</name></cpp:macro> <cpp:value>{ "vmudl", RSP_OP_VMUDL, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUDM</name></cpp:macro> <cpp:value>{ "vmudm", RSP_OP_VMUDM, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUDN</name></cpp:macro> <cpp:value>{ "vmudn", RSP_OP_VMUDN, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUDH</name></cpp:macro> <cpp:value>{ "vmudh", RSP_OP_VMUDH, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMACF</name></cpp:macro> <cpp:value>{ "vmacf", RSP_OP_VMACF, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMACU</name></cpp:macro> <cpp:value>{ "vmacu", RSP_OP_VMACU, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMADL</name></cpp:macro> <cpp:value>{ "vmadl", RSP_OP_VMADL, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMADM</name></cpp:macro> <cpp:value>{ "vmadm", RSP_OP_VMADM, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMADN</name></cpp:macro> <cpp:value>{ "vmadn", RSP_OP_VMADN, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMADH</name></cpp:macro> <cpp:value>{ "vmadh", RSP_OP_VMADH, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VADD</name></cpp:macro> <cpp:value>{ "vadd", RSP_OP_VADD, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUB</name></cpp:macro> <cpp:value>{ "vsub", RSP_OP_VSUB, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VABS</name></cpp:macro> <cpp:value>{ "vabs", RSP_OP_VABS, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VADDC</name></cpp:macro> <cpp:value>{ "vaddc", RSP_OP_VADDC, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUBC</name></cpp:macro> <cpp:value>{ "vsubc", RSP_OP_VSUBC, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSAR</name></cpp:macro> <cpp:value>{ "vsar", RSP_OP_VSAR, OPNDS_VD_VS_C2_ACCU }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLT</name></cpp:macro> <cpp:value>{ "vlt", RSP_OP_VLT, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEQ</name></cpp:macro> <cpp:value>{ "veq", RSP_OP_VEQ, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNE</name></cpp:macro> <cpp:value>{ "vne", RSP_OP_VNE, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VGE</name></cpp:macro> <cpp:value>{ "vge", RSP_OP_VGE, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCL</name></cpp:macro> <cpp:value>{ "vcl", RSP_OP_VCL, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCH</name></cpp:macro> <cpp:value>{ "vch", RSP_OP_VCH, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCR</name></cpp:macro> <cpp:value>{ "vcr", RSP_OP_VCR, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMRG</name></cpp:macro> <cpp:value>{ "vmrg", RSP_OP_VMRG, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAND</name></cpp:macro> <cpp:value>{ "vand", RSP_OP_VAND, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNAND</name></cpp:macro> <cpp:value>{ "vnand", RSP_OP_VNAND, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOR</name></cpp:macro> <cpp:value>{ "vor", RSP_OP_VOR, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNOR</name></cpp:macro> <cpp:value>{ "vnor", RSP_OP_VNOR, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VXOR</name></cpp:macro> <cpp:value>{ "vxor", RSP_OP_VXOR, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNXOR</name></cpp:macro> <cpp:value>{ "vnxor", RSP_OP_VNXOR, OPNDS_VD_VS_VTE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRCP</name></cpp:macro> <cpp:value>{ "vrcp", RSP_OP_VRCP, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRCPL</name></cpp:macro> <cpp:value>{ "vrcpl", RSP_OP_VRCPL, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRCPH</name></cpp:macro> <cpp:value>{ "vrcph", RSP_OP_VRCPH, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV</name></cpp:macro> <cpp:value>{ "vmov", RSP_OP_VMOV, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRSQ</name></cpp:macro> <cpp:value>{ "vrsq", RSP_OP_VRSQ, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRSQL</name></cpp:macro> <cpp:value>{ "vrsql", RSP_OP_VRSQL, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VRSQH</name></cpp:macro> <cpp:value>{ "vrsqh", RSP_OP_VRSQH, OPNDS_VDS_VTS }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNOP</name></cpp:macro> <cpp:value>{ "vnop", RSP_OP_VNOP, OPNDS_NONE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBV</name></cpp:macro> <cpp:value>{ "lbv", RSP_OP_LBV, OPNDS_VTB_BASE_OFFSET1 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSV</name></cpp:macro> <cpp:value>{ "lsv", RSP_OP_LSV, OPNDS_VTB_BASE_OFFSET2 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLV</name></cpp:macro> <cpp:value>{ "llv", RSP_OP_LLV, OPNDS_VTB_BASE_OFFSET4 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDV</name></cpp:macro> <cpp:value>{ "ldv", RSP_OP_LDV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQV</name></cpp:macro> <cpp:value>{ "lqv", RSP_OP_LQV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRV</name></cpp:macro> <cpp:value>{ "lrv", RSP_OP_LRV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPV</name></cpp:macro> <cpp:value>{ "lpv", RSP_OP_LPV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUV</name></cpp:macro> <cpp:value>{ "luv", RSP_OP_LUV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LHV</name></cpp:macro> <cpp:value>{ "lhv", RSP_OP_LHV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFV</name></cpp:macro> <cpp:value>{ "lfv", RSP_OP_LFV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTV</name></cpp:macro> <cpp:value>{ "ltv", RSP_OP_LTV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBV</name></cpp:macro> <cpp:value>{ "sbv", RSP_OP_SBV, OPNDS_VTB_BASE_OFFSET1 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSV</name></cpp:macro> <cpp:value>{ "ssv", RSP_OP_SSV, OPNDS_VTB_BASE_OFFSET2 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLV</name></cpp:macro> <cpp:value>{ "slv", RSP_OP_SLV, OPNDS_VTB_BASE_OFFSET4 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDV</name></cpp:macro> <cpp:value>{ "sdv", RSP_OP_SDV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQV</name></cpp:macro> <cpp:value>{ "sqv", RSP_OP_SQV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRV</name></cpp:macro> <cpp:value>{ "srv", RSP_OP_SRV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPV</name></cpp:macro> <cpp:value>{ "spv", RSP_OP_SPV, OPNDS_VTB_BASE_OFFSET8 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUV</name></cpp:macro> <cpp:value>{ "suv", RSP_OP_SUV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHV</name></cpp:macro> <cpp:value>{ "shv", RSP_OP_SHV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFV</name></cpp:macro> <cpp:value>{ "sfv", RSP_OP_SFV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWV</name></cpp:macro> <cpp:value>{ "swv", RSP_OP_SWV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STV</name></cpp:macro> <cpp:value>{ "stv", RSP_OP_STV, OPNDS_VTB_BASE_OFFSET16 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>J</name></cpp:macro> <cpp:value>{ "j", RSP_OP_J, OPNDS_TARGET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAL</name></cpp:macro> <cpp:value>{ "jal", RSP_OP_JAL, OPNDS_TARGET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEQ</name></cpp:macro> <cpp:value>{ "beq", RSP_OP_BEQ, OPNDS_RS_RT_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BNE</name></cpp:macro> <cpp:value>{ "bne", RSP_OP_BNE, OPNDS_RS_RT_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEZ</name></cpp:macro> <cpp:value>{ "blez", RSP_OP_BLEZ, OPNDS_RS_RT_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGTZ</name></cpp:macro> <cpp:value>{ "bgtz", RSP_OP_BGTZ, OPNDS_RS_RT_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDI</name></cpp:macro> <cpp:value>{ "addi", RSP_OP_ADDI, OPNDS_RT_RS_SIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIU</name></cpp:macro> <cpp:value>{ "addiu", RSP_OP_ADDIU, OPNDS_RT_RS_SIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTI</name></cpp:macro> <cpp:value>{ "slti", RSP_OP_SLTI, OPNDS_RT_RS_SIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTIU</name></cpp:macro> <cpp:value>{ "sltiu", RSP_OP_SLTIU, OPNDS_RT_RS_SIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDI</name></cpp:macro> <cpp:value>{ "andi", RSP_OP_ANDI, OPNDS_RT_RS_ZIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORI</name></cpp:macro> <cpp:value>{ "ori", RSP_OP_ORI, OPNDS_RT_RS_ZIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XORI</name></cpp:macro> <cpp:value>{ "xori", RSP_OP_XORI, OPNDS_RT_RS_ZIMM }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUI</name></cpp:macro> <cpp:value>{ "lui", RSP_OP_LUI, OPNDS_RT_LUI }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LB</name></cpp:macro> <cpp:value>{ "lb", RSP_OP_LB, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LH</name></cpp:macro> <cpp:value>{ "lh", RSP_OP_LH, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LW</name></cpp:macro> <cpp:value>{ "lw", RSP_OP_LW, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBU</name></cpp:macro> <cpp:value>{ "lbu", RSP_OP_LBU, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LHU</name></cpp:macro> <cpp:value>{ "lhu", RSP_OP_LHU, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB</name></cpp:macro> <cpp:value>{ "sb", RSP_OP_SB, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH</name></cpp:macro> <cpp:value>{ "sh", RSP_OP_SH, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SW</name></cpp:macro> <cpp:value>{ "sw", RSP_OP_SW, OPNDS_RT_BASE_OFFSET }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>rsp_operand_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>u_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>u_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>u_lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>s_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>s_smask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_lshift</name></decl>;</decl_stmt>
}</block></struct></type> <name>rsp_operand_decoder</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mnemonic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rsp_opcode</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noperands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rsp_operand_decoder</name></type> <name><name>odecs</name><index>[<expr><name>RSP_MAX_OPNDS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>rsp_instruction_priv</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rsp_instruction_priv</name></type> <name><name>rsp_op_table</name><index>[]</index></name> <init>= <expr><block>{



<expr><name>SLL</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>SRL</name></expr>, <expr><name>SRA</name></expr>, <expr><name>SLLV</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>SRLV</name></expr>, <expr><name>SRAV</name></expr>,
<expr><name>JR</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>BREAK</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>ADD</name></expr>, <expr><name>ADDU</name></expr>, <expr><name>SUB</name></expr>, <expr><name>SUBU</name></expr>, <expr><name>AND</name></expr>, <expr><name>OR</name></expr>, <expr><name>XOR</name></expr>, <expr><name>NOR</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>SLT</name></expr>, <expr><name>SLTU</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>BLTZ</name></expr>, <expr><name>BGEZ</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>BLTZAL</name></expr>, <expr><name>BGEZAL</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>MFC0</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>MTC0</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>MFC2</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>CFC2</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>MTC2</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>CTC2</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>VMULF</name></expr>, <expr><name>VMULU</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>VMUDL</name></expr>, <expr><name>VMUDM</name></expr>, <expr><name>VMUDN</name></expr>, <expr><name>VMUDH</name></expr>,
<expr><name>VMACF</name></expr>, <expr><name>VMACU</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>VMADL</name></expr>, <expr><name>VMADM</name></expr>, <expr><name>VMADN</name></expr>, <expr><name>VMADH</name></expr>,
<expr><name>VADD</name></expr>, <expr><name>VSUB</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>VABS</name></expr>, <expr><name>VADDC</name></expr>, <expr><name>VSUBC</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>VSAR</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>VLT</name></expr>, <expr><name>VEQ</name></expr>, <expr><name>VNE</name></expr>, <expr><name>VGE</name></expr>, <expr><name>VCL</name></expr>, <expr><name>VCH</name></expr>, <expr><name>VCR</name></expr>, <expr><name>VMRG</name></expr>,
<expr><name>VAND</name></expr>, <expr><name>VNAND</name></expr>, <expr><name>VOR</name></expr>, <expr><name>VNOR</name></expr>, <expr><name>VXOR</name></expr>, <expr><name>VNXOR</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>VRCP</name></expr>, <expr><name>VRCPL</name></expr>, <expr><name>VRCPH</name></expr>, <expr><name>VMOV</name></expr>, <expr><name>VRSQ</name></expr>, <expr><name>VRSQL</name></expr>, <expr><name>VRSQH</name></expr>, <expr><name>VNOP</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>LBV</name></expr>, <expr><name>LSV</name></expr>, <expr><name>LLV</name></expr>, <expr><name>LDV</name></expr>, <expr><name>LQV</name></expr>, <expr><name>LRV</name></expr>, <expr><name>LPV</name></expr>, <expr><name>LUV</name></expr>,
<expr><name>LHV</name></expr>, <expr><name>LFV</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>LTV</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>SBV</name></expr>, <expr><name>SSV</name></expr>, <expr><name>SLV</name></expr>, <expr><name>SDV</name></expr>, <expr><name>SQV</name></expr>, <expr><name>SRV</name></expr>, <expr><name>SPV</name></expr>, <expr><name>SUV</name></expr>,
<expr><name>SHV</name></expr>, <expr><name>SFV</name></expr>, <expr><name>SWV</name></expr>, <expr><name>STV</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>J</name></expr>, <expr><name>JAL</name></expr>, <expr><name>BEQ</name></expr>, <expr><name>BNE</name></expr>, <expr><name>BLEZ</name></expr>, <expr><name>BGTZ</name></expr>,
<expr><name>ADDI</name></expr>, <expr><name>ADDIU</name></expr>, <expr><name>SLTI</name></expr>, <expr><name>SLTIU</name></expr>, <expr><name>ANDI</name></expr>, <expr><name>ORI</name></expr>, <expr><name>XORI</name></expr>, <expr><name>LUI</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>LB</name></expr>, <expr><name>LH</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>LW</name></expr>, <expr><name>LBU</name></expr>, <expr><name>LHU</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>SB</name></expr>, <expr><name>SH</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>SW</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,
<expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>, <expr><name>INVALID</name></expr>,



<expr><name>NOP</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIAL</name></cpp:macro> <cpp:value>{ 0, 0, 0x3f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGIMM</name></cpp:macro> <cpp:value>{ 64, 16, 0x1f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COP0</name></cpp:macro> <cpp:value>{ 96, 21, 0x1f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COP2</name></cpp:macro> <cpp:value>{ 128, 21, 0x1f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECTOP</name></cpp:macro> <cpp:value>{ 160, 0, 0x3f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LWC2</name></cpp:macro> <cpp:value>{ 224, 11, 0x1f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWC2</name></cpp:macro> <cpp:value>{ 256, 11, 0x1f }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN</name></cpp:macro> <cpp:value>{ 288, 26, 0x3f }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name></decl>;</decl_stmt>
}</block></struct></type> <name>rsp_op_escape</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rsp_op_escape</name></type> <name><name>rsp_escapes_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SPECIAL</name></expr>, <expr><name>SPECIAL</name></expr>, <expr><name>REGIMM</name></expr>, <expr><name>REGIMM</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>COP0</name></expr>, <expr><name>COP0</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>COP2</name></expr>, <expr><name>VECTOP</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>LWC2</name></expr>, <expr><name>LWC2</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>SWC2</name></expr>, <expr><name>SWC2</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>,
<expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>, <expr><name>MAIN</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>rsp_instruction_priv</name><modifier>*</modifier></type> <name>rsp_decode_priv</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>iw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rsp_op_escape</name><modifier>*</modifier></type> <name>escape</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>iw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>rsp_op_table</name><index>[<expr><literal type="number">352</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>escape</name> <operator>=</operator> <operator>&amp;</operator><name><name>rsp_escapes_table</name><index>[<expr><operator>(</operator><name>iw</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>rsp_op_table</name><index>[<expr><name><name>escape</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>iw</name> <operator>&gt;&gt;</operator> <name><name>escape</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>escape</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st32</name></type> <name>rsp_sign_extend</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<return>return <expr><operator>(</operator><name>x</name> <operator>^</operator> <name>m</name><operator>)</operator> <operator>-</operator> <name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rsp_operand</name></type> <name>rsp_operand_decode</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>iw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsp_operand_decoder</name><modifier>*</modifier></type> <name>odec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rsp_operand</name></type> <name>opnd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opnd</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>odec</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opnd</name><operator>.</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iw</name> <operator>&gt;&gt;</operator> <name><name>odec</name><operator>-&gt;</operator><name>u_shift</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>odec</name><operator>-&gt;</operator><name>u_mask</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>odec</name><operator>-&gt;</operator><name>u_lshift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opnd</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>rsp_sign_extend</name> <argument_list>(<argument><expr><operator>(</operator><name>iw</name> <operator>&gt;&gt;</operator> <name><name>odec</name><operator>-&gt;</operator><name>s_shift</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>odec</name><operator>-&gt;</operator><name>s_mask</name></name></expr></argument>, <argument><expr><name><name>odec</name><operator>-&gt;</operator><name>s_smask</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>odec</name><operator>-&gt;</operator><name>s_lshift</name></name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name><name>opnd</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RSP_OPND_TARGET</name></expr>:</case>
<expr_stmt><expr><name><name>opnd</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>rsp_mem_addr</name> <argument_list>(<argument><expr><name><name>opnd</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name>RSP_IMEM_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RSP_OPND_OFFSET</name></expr>:</case>

<expr_stmt><expr><name><name>opnd</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>rsp_mem_addr</name> <argument_list>(<argument><expr><name>pc</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>opnd</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>RSP_IMEM_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>opnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>rsp_instruction</name></type> <name>rsp_instruction_decode</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>iw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rsp_instruction_priv</name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><call><name>rsp_decode_priv</name> <argument_list>(<argument><expr><name>iw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rsp_instruction</name></type> <name>r_instr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r_instr</name><operator>.</operator><name>mnemonic</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_instr</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_instr</name><operator>.</operator><name>noperands</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>noperands</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>opnd</name> <operator>&lt;</operator> <name><name>r_instr</name><operator>.</operator><name>noperands</name></name></expr>;</condition> <incr><expr><name>opnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>opnd</name></expr>]</index></name> <operator>=</operator> <call><name>rsp_operand_decode</name> <argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>iw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>odecs</name><index>[<expr><name>opnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>r_instr</name></expr>;</return>
</block_content>}</block></function>
</unit>
