<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\p\asm_dalvik.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dalvik/opcode.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dalvik_disassemble</name> <parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vA</name></decl>, <decl><type ref="prev"/><name>vB</name></decl>, <decl><type ref="prev"/><name>vC</name></decl>, <decl><type ref="prev"/><name>vD</name></decl>, <decl><type ref="prev"/><name>vE</name></decl>, <decl><type ref="prev"/><name>vF</name></decl>, <decl><type ref="prev"/><name>vG</name></decl>, <decl><type ref="prev"/><name>vH</name></decl>, <decl><type ref="prev"/><name>payload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strasm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>dataalign</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> 



<block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>array_size</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_key</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"packed-switch-payload %d, %d"</literal></expr></argument>, <argument><expr><name>array_size</name></expr></argument>, <argument><expr><name>first_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>array_size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case> 



<block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>array_size</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"sparse-switch-payload %d"</literal></expr></argument>, <argument><expr><name>array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>array_size</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case> 



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>elem_width</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>array_size</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"fill-array-data-payload %d, %d"</literal></expr></argument>, <argument><expr><name>elem_width</name></expr></argument>, <argument><expr><name>array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <name>array_size</name> <operator>*</operator> <name>elem_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_asm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>fmtop</name></expr>:</case> <break>break;</break>
<case>case <expr><name>fmtopvAvB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAvBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAAAvBBBB</name></expr>:</case> 
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAA</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAcB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, %#x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAcBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>sB</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, %#04hx"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>fmtopvAAcBBBBBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x17</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i:v%i, 0x%08x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vA</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%08x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAcBBBB0000</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vB</name> <operator>=</operator> <literal type="number">0</literal> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x19</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i:v%i, 0x%08x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vA</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%08x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAcBBBBBBBBBBBBBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>lB</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i:v%i, 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vA</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAvBBvCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, v%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAvBBcCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, %#x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAvBcCCCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, %#x"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoppAA</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vA</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoppAAAA</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vA</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAApBBBB</name></expr>:</case> 
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vB</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoppAAAAAAAA</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vA</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAvBpCCCC</name></expr>:</case> 
<expr_stmt><expr><name>vA</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">" v%i, v%i, 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vC</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAApBBBBBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <operator>(</operator><name>vB</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoptinlineI</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>vA</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", [%04x]"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoptinlineIR</name></expr>:</case>
<case>case <expr><name>fmtoptinvokeVSR</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, [%04x]"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoptinvokeVS</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>vA</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", [%04x]"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAtBBBB</name></expr>:</case> 
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x1a</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>R_ASM_GET_OFFSET</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, string+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x1c</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x1f</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x22</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, class+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, %s"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, field+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, %s"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoptopvAvBoCCCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>R_ASM_GET_OFFSET</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, [obj+%04x]"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, [0x%"</literal><name>PFMT64x</name><literal type="string">"]"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopAAtBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>R_ASM_GET_OFFSET</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, thing+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAvBtCCCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x20</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x23</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, %s"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, class+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, %s"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, v%i, field+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvAAtBBBBBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>R_ASM_GET_OFFSET</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, string+%i"</literal></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" v%i, 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvCCCCmBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x25</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, %s"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, class+%i"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfd</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, %s"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, call_site+%i"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, %s"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, method+%i"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtopvXtBBBB</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>vA</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i, v%i, v%i, v%i, v%i}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x24</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s ; 0x%x"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", class+%i"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfc</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s ; 0x%x"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", call_site+%i"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s ; 0x%x"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", method+%i"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtop45CC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vG</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vD</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vF</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vE</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vH</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>vA</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%d}"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%d, v%d}"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%d, v%d, v%d}"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vD</name></expr></argument>, <argument><expr><name>vE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%d, v%d, v%d, v%d}"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vD</name></expr></argument>, <argument><expr><name>vE</name></expr></argument>, <argument><expr><name>vF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%d, v%d, v%d, v%d, v%d}"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vD</name></expr></argument>, <argument><expr><name>vE</name></expr></argument>, <argument><expr><name>vF</name></expr></argument>, <argument><expr><name>vG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><literal type="string">", method+%i"</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><name>vH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><literal type="string">", proto+%i"</literal></expr></argument>, <argument><expr><name>vH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>fmtop4RCC</name></expr>:</case>
<expr_stmt><expr><name>vA</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vB</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vC</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vH</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, %s"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" {v%i..v%i}, method+%i"</literal></expr></argument>, <argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vC</name> <operator>+</operator> <name>vA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_str</name> <operator>=</operator> <call><name>R_ASM_GET_NAME</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><name>vH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", proto+%i"</literal></expr></argument>, <argument><expr><name>vH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>fmtoptinvokeI</name></expr>:</case> 
<case>case <expr><name>fmtoptinvokeIR</name></expr>:</case>
<case>case <expr><name>fmt00</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strasm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>strasm</name></expr>?</condition><then> <expr><name>strasm</name></expr></then><else>: <expr><literal type="string">"invalid"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>payload</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>payload</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>payload</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>payload</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dalvik_assemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_write_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setbin</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>dalvik_opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_dalvik</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dalvik"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"dalvik"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"AndroidVM Dalvik"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal> <operator>|</operator> <literal type="number">64</literal></expr>,
<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_LITTLE</name></expr>,
<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>dalvik_disassemble</name></expr>,
<expr><operator>.</operator><name>assemble</name> <operator>=</operator> <operator>&amp;</operator><name>dalvik_assemble</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_dalvik</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
