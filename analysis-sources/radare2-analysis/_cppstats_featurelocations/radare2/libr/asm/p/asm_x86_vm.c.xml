<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\p\asm_x86_vm.c">


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPCEXT2</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y)[2]==(x))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>decompile_vm</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x3F</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VPCEXT2</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VPCEXT2</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VPCEXT2</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VPCEXT2</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VPCEXT2</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>R_ASM_SYNTAX_ATT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"vpcext $0x%x, $0x%x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"vpcext %xh, %xh"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmgetinfo"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsetinfo"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmdxdsbl"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmdxenbl"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmcpuid"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmhlt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsplaf"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmpushfd"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmpopfd"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmcli"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsti"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmiretd"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsgdt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsidt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsldt"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmstr"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0F</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xC6</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x04</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator><literal type="string">"vmsdte"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VPCEXT2</name></cpp:undef>
</unit>
