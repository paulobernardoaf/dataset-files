<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\p\asm_sh.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RStrBuf</name> <modifier>*</modifier></type><name>buf_global</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sh_buffer_read_memory</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name>bfd_byte</name> <modifier>*</modifier></type><name>myaddr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>myaddr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>print_insn_shl</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>print_insn_shb</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>symbol_at_address</name><parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memory_error_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<macro><name>DECLARE_GENERIC_PRINT_ADDRESS_FUNC</name><argument_list>()</argument_list></macro>
<macro><name>DECLARE_GENERIC_FPRINTF_FUNC</name><argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>disassemble_info</name></name></type> <name>disasm_obj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_global</name> <operator>=</operator> <operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Offset</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>disasm_obj</name></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>disassemble_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>read_memory_func</name></name> <operator>=</operator> <operator>&amp;</operator><name>sh_buffer_read_memory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>symbol_at_address_func</name></name> <operator>=</operator> <operator>&amp;</operator><name>symbol_at_address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>memory_error_func</name></name> <operator>=</operator> <operator>&amp;</operator><name>memory_error_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>print_address_func</name></name> <operator>=</operator> <operator>&amp;</operator><name>generic_print_address_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>endian</name></name> <operator>=</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>fprintf_func</name></name> <operator>=</operator> <operator>&amp;</operator><name>generic_fprintf_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disasm_obj</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disasm_obj</name><operator>.</operator><name>endian</name></name> <operator>==</operator> <name>BFD_ENDIAN_BIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>print_insn_shb</name> <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>)</operator><name>Offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disasm_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>print_insn_shl</name> <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>)</operator><name>Offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disasm_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"(data)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_sh</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sh"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"sh"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"GPL3"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_LITTLE</name> <operator>|</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"SuperH-4 CPU"</literal></expr>,
<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_sh</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
