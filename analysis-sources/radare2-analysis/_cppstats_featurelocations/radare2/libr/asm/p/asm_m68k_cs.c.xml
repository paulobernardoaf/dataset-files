<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\p\asm_m68k_cs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPSTONE_M68K_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M68K</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M68K</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>(</name><cpp:literal>"Cannot find capstone-m68k support"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Cannot find capstone-m68k support</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAPSTONE_HAS_M68K</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M68K_LONGEST_INSTRUCTION</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_features</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>cd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cs_mnemonics.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_insn</name><modifier>*</modifier></type> <name>insn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_mode</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><name>CS_MODE_BIG_ENDIAN</name></expr></then><else>: <expr><name>CS_MODE_LITTLE_ENDIAN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>obits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68000"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_000</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68010"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_010</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68020"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_020</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68030"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_030</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68040"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_040</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68060"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_060</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_M68K</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>features</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>mybuf</name><index>[<expr><name>M68K_LONGEST_INSTRUCTION</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mylen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>M68K_LONGEST_INSTRUCTION</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>mylen</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>size</name></name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>features</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_features</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"illegal"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name>buf_asm</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>beach</name>:</label>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name>buf_asm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf_asm</name></expr></argument>, <argument><expr><literal type="string">"dc.w"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_m68k_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M68K disassembler"</literal></expr>,
<expr><operator>.</operator><name>cpus</name> <operator>=</operator> <literal type="string">"68000,68010,68020,68030,68040,68060"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,
<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>,
<expr><operator>.</operator><name>mnemonics</name> <operator>=</operator> <operator>&amp;</operator><name>mnemonics</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_features</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_m68k_cs</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_m68k_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m68k.cs (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M68K disassembler (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>author</name> <operator>=</operator> <literal type="string">"pancake"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_m68k_cs</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
