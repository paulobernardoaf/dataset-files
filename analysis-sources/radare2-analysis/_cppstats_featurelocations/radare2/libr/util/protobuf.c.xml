<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\protobuf.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>float</name></type> <name>ft32</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>ft64</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_VARINT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_64_BIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_LEN_DELIM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_START_GRP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_END_GRP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIRE_32_BIT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<typedef>typedef <macro><name>R_PACKED</name> <argument_list>(<argument>struct _proto_head {
ut8 wire : <literal type="number">3</literal>;
ut8 number : <literal type="number">5</literal>;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>proto_head_t</name></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s_wire</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>byte</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WIRE_VARINT</name></expr>:</case>
<return>return <expr><literal type="string">"[VARINT]"</literal></expr>;</return>
<case>case <expr><name>WIRE_64_BIT</name></expr>:</case>
<return>return <expr><literal type="string">"[64_BIT]"</literal></expr>;</return>
<case>case <expr><name>WIRE_LEN_DELIM</name></expr>:</case>
<return>return <expr><literal type="string">"[LEN_DELIM]"</literal></expr>;</return>
<case>case <expr><name>WIRE_START_GRP</name></expr>:</case>
<return>return <expr><literal type="string">"[START_GROUP]"</literal></expr>;</return>
<case>case <expr><name>WIRE_END_GRP</name></expr>:</case>
<return>return <expr><literal type="string">"[END_GROUP]"</literal></expr>;</return>
<case>case <expr><name>WIRE_32_BIT</name></expr>:</case>
<return>return <expr><literal type="string">"[32_BIT]"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"[UNKN]"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pad</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_array</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_buffer</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>padcnt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>debug</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>var32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>var64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>proto_head_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>buffer</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>buffer</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>proto_head_t</name><operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>&lt;</operator> <name>start</name> <operator>||</operator> <name>buffer</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\ninvalid buffer pointer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>wire</name></name> <operator>&gt;</operator> <name>WIRE_32_BIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\nunknown wire id (%u).\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>wire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>wire</name></name> <operator>!=</operator> <name>WIRE_END_GRP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pad</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>padcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%u %-13s"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>number</name></name></expr></argument>, <argument><expr><call><name>s_wire</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>wire</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>wire</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WIRE_VARINT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>st64</name><modifier>*</modifier></type> <name>i</name> <init>= <expr><operator>(</operator><name>st64</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>var64</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_u64_leb128</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">": %"</literal><name>PFMT64u</name><literal type="string">" | %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>var64</name></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WIRE_64_BIT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ft64</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><operator>(</operator><name>ft64</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>var64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name><modifier>*</modifier></type> <name>i</name> <init>= <expr><operator>(</operator><name>st64</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>var64</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_u64_leb128</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">": %"</literal><name>PFMT64u</name><literal type="string">" | %"</literal><name>PFMT64d</name><literal type="string">" | %f\n"</literal></expr></argument>, <argument><expr><name>var64</name></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WIRE_LEN_DELIM</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_u64_leb128</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>bytes_read</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>pe</name> <init>= <expr><name>ps</name> <operator>+</operator> <name>var64</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>&gt;</operator> <name>buffer</name> <operator>&amp;&amp;</operator> <name>pe</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">": \"%.*s\"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>var64</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_buffer</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>padcnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pad</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>padcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>+=</operator> <name>var64</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\ninvalid delimited length (%"</literal><name>PFMT64u</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>var64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>WIRE_START_GRP</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padcnt</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WIRE_END_GRP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>padcnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padcnt</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pad</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>padcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WIRE_32_BIT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ft32</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><operator>(</operator><name>ft32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>var32</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name><modifier>*</modifier></type> <name>i</name> <init>= <expr><operator>(</operator><name>st32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>var32</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_u32_leb128</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">": %u | %d | %f\n"</literal></expr></argument>, <argument><expr><name>var32</name></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>decode_array</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_protobuf_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>debug</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid buffer pointer or size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_buffer</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
