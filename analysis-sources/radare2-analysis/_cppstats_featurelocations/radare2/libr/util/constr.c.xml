<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\constr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>



<function><type><name>R_API</name> <name>RConstr</name><modifier>*</modifier></type> <name>r_constr_new</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RConstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <ternary><condition><expr><name>size</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then> <expr><name>size</name></expr></then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_constr_free</name> <parameter_list>(<parameter><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_constr_get</name> <parameter_list>(<parameter><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr>;</init> <condition><expr><name>p</name><operator>&lt;</operator><name>e</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_constr_append</name> <parameter_list>(<parameter><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>l</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name><operator>+</operator><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_constr_add</name> <parameter_list>(<parameter><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_constr_get</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr></then><else>: <expr><call><name>r_constr_append</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAIN</name></expr></cpp:if>
<function><name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConstr</name> <modifier>*</modifier></type><name>cstr</name> <init>= <expr><call><name>r_constr_new</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_constr_add</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_constr_add</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_constr_add</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="string">"World"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_constr_free</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
