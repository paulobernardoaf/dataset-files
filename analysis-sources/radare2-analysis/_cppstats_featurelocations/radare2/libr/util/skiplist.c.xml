<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\skiplist.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_skiplist.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPLIST_MAX_DEPTH</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RSkipListNode</name> <modifier>*</modifier></type><name>r_skiplist_node_new</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSkipListNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>forward</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RSkipListNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_skiplist_node_free</name> <parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>freefn</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>list</name><operator>-&gt;</operator><name>freefn</name></name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_head</name> <parameter_list>(<parameter><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SKIPLIST_MAX_DEPTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>RSkipListNode</name> <modifier>*</modifier></type><name>find_insertpoint</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>updates</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>by_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>by_data</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name>
<operator>&amp;&amp;</operator> <call><name><name>list</name><operator>-&gt;</operator><name>compare</name></name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>updates</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>updates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>delete_element</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>by_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name><name>update</name><index>[<expr><name>SKIPLIST_MAX_DEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find_insertpoint</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>by_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>||</operator> <call><name><name>list</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_skiplist_node_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>]</index></name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>R_API</name> <name>RSkipList</name><modifier>*</modifier></type> <name>r_skiplist_new</name><parameter_list>(<parameter><decl><type><name>RListFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>RListComparator</name></type> <name>comparefn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSkipList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>r_skiplist_node_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SKIPLIST_MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_head</name> <argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <name>freefn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>comparefn</name></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_purge</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>forward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>forward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_skiplist_node_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>init_head</name> <argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_free</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_skiplist_purge</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_skiplist_node_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_insert</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name><name>update</name><index>[<expr><name>SKIPLIST_MAX_DEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x_level</name></decl>, <decl><type ref="prev"/><name>new_level</name></decl>;</decl_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find_insertpoint</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>list</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>x_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>&lt;</operator> <name>RAND_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>x_level</name> <operator>&lt;</operator> <name>SKIPLIST_MAX_DEPTH</name></expr>;</condition> <incr><expr><name>x_level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>new_level</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x_level</name> <operator>&gt;</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>new_level</name> <operator>=</operator> <name>x_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>r_skiplist_node_new</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list_level</name></name> <operator>=</operator> <name>new_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_delete</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>delete_element</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_delete_node</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>delete_element</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name><modifier>*</modifier></type> <name>x</name> <init>= <expr><call><name>find_insertpoint</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>&amp;&amp;</operator> <call><name><name>list</name><operator>-&gt;</operator><name>compare</name></name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find_geq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name><modifier>*</modifier></type> <name>x</name> <init>= <expr><call><name>find_insertpoint</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find_leq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list_level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name> 
<operator>&amp;&amp;</operator> <call><name><name>list</name><operator>-&gt;</operator><name>compare</name></name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_join</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>l2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<macro><name>r_skiplist_foreach</name> <argument_list>(<argument>l2</argument>, <argument>it</argument>, <argument>data</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_skiplist_insert</name> <argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>r_skiplist_purge</name> <argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_skiplist_get_first</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>forward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>res</name><operator>-&gt;</operator><name>data</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_skiplist_get_n</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_skiplist_foreach</name> <argument_list>(<argument>list</argument>, <argument>node</argument>, <argument>data</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_skiplist_get_geq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>r_skiplist_find_geq</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_skiplist_get_leq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>r_skiplist_find_leq</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_empty</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_skiplist_to_list</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<macro><name>r_skiplist_foreach</name> <argument_list>(<argument>list</argument>, <argument>n</argument>, <argument>data</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
