<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\base91.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>b91</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>,
<expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>,
<expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>,
<expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>,
<expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,
<expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'$'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">'*'</literal></expr>,
<expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">','</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">':'</literal></expr>, <expr><literal type="char">';'</literal></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="char">'='</literal></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><literal type="char">'?'</literal></expr>,
<expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'['</literal></expr>, <expr><literal type="char">']'</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><literal type="char">'`'</literal></expr>, <expr><literal type="char">'{'</literal></expr>, <expr><literal type="char">'|'</literal></expr>, <expr><literal type="char">'}'</literal></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="char">'"'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get_char_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">91</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b91</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_base91_decode</name><parameter_list>(<parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>bout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>in</name> <operator>=</operator> <name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>in</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_char_index</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <literal type="number">91</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name><operator>&amp;</operator><literal type="number">8191</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>v</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>|</operator> <name>v</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_base91_encode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>in</name> <operator>=</operator> <name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>in</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name><name>bin</name><index>[<expr><name>in</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">8191</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">16383</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b91</name><index>[<expr><name>v</name> <operator>%</operator> <literal type="number">91</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b91</name><index>[<expr><name>v</name> <operator>/</operator> <literal type="number">91</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b91</name><index>[<expr><name>b</name> <operator>%</operator> <literal type="number">91</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>||</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bout</name><index>[<expr><name>out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b91</name><index>[<expr><name>b</name> <operator>/</operator> <literal type="number">91</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
