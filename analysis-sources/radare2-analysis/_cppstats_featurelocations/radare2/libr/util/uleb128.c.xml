<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\uleb128.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>



<function><type><name>R_API</name> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_uleb128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data_end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>==</operator> <name>ST32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data_end</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>datalen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>datalen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>data</name> <operator>&lt;</operator> <name>data_end</name></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <literal type="number">7</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_uleb128: undefined behaviour in %d shift on ut32\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>R_API</name> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_uleb128_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>datalen</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>datalen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>datalen</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_uleb128_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>otarget</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmptarget</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>source</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmptarget</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>otarget</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>otarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>otarget</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>otarget</name> <operator>=</operator> <name>tmptarget</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>otarget</name><operator>+</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>source</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>target</name><operator>)</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>source</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>otarget</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_leb128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>st64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>data</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>|=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>st64</name></type> <name>r_sleb128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cond</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>chunk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>chunk</name> <operator>&lt;&lt;</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>cond</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>cond</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_AT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((type)(p[i]) &amp; 0x7f) &lt;&lt; (shift))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 0, 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 1, 7) | LEB128_1 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 2, 14) | LEB128_2 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 3, 21) | LEB128_3 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 4, 28) | LEB128_4 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 5, 35) | LEB128_5 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_7</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 6, 42) | LEB128_6 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_8</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 7, 49) | LEB128_7 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_9</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 8, 56) | LEB128_8 (type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEB128_10</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BYTE_AT (type, 9, 63) | LEB128_9 (type))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_AMOUNT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>sign_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(type) * 8 - 1 - (sign_bit))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_EXTEND</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>sign_bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type)((value) &lt;&lt; SHIFT_AMOUNT (type, sign_bit)) &gt;&gt; SHIFT_AMOUNT (type, sign_bit))</cpp:value></cpp:define>



<function><type><name>R_API</name> <name>size_t</name></type> <name>read_u32_leb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut32</name><modifier>*</modifier></type> <name>out_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_1</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_2</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_3</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_4</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_5</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>size_t</name></type> <name>read_i32_leb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>st32</name><modifier>*</modifier></type> <name>out_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><call><name>LEB128_1</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><call><name>LEB128_2</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><call><name>LEB128_3</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><call><name>LEB128_4</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>sign_bit_set</name> <init>= <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_bits</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sign_bit_set</name> <operator>&amp;&amp;</operator> <name>top_bits</name> <operator>!=</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>sign_bit_set</name> <operator>&amp;&amp;</operator> <name>top_bits</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><call><name>LEB128_5</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>size_t</name></type> <name>read_u64_leb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut64</name><modifier>*</modifier></type> <name>out_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_1</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_2</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_3</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_4</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_5</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_6</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_7</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">7</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_8</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_9</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">9</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>LEB128_10</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">10</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>size_t</name></type> <name>read_i64_leb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>st64</name><modifier>*</modifier></type> <name>out_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_1</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_2</name><argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_3</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_4</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_5</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_6</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_7</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">7</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_8</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_9</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <call><name>SIGN_EXTEND</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">9</literal> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>sign_bit_set</name> <init>= <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_bits</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfe</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sign_bit_set</name> <operator>&amp;&amp;</operator> <name>top_bits</name> <operator>!=</operator> <literal type="number">0x7e</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>sign_bit_set</name> <operator>&amp;&amp;</operator> <name>top_bits</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><call><name>LEB128_10</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">10</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTE_AT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_5</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_6</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_7</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_9</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEB128_10</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SHIFT_AMOUNT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIGN_EXTEND</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
main() {
ut32 n;
ut8 *buf = "\x10\x02\x90\x88";
r_uleb128 (buf, &amp;n);
printf ("n = %d\n", n);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
