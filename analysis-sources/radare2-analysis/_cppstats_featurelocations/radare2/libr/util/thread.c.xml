<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\thread.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_th.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_act.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_policy.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>_r_th_launcher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>_r_th_launcher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>_th</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sleep</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_th_lock_wait</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_th_lock_wait</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>th</name><operator>-&gt;</operator><name>fun</name></name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_exit</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_th_push_task</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_th_t</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R_TH_TID</name></type> <name>r_th_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<return>return <expr><call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>GetCurrentThread</name> <argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"Not implemented on this platform"</cpp:literal><name>)</name></cpp:pragma>
<return>return <expr><operator>(</operator><name>R_TH_TID</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_th_setname</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_NP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_PTHREAD_NP</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>pthread_setname_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set thread name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>pthread_setname_np</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set thread name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__FreeBSD__</name> <operator>||</operator> <name>__OpenBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>pthread_set_name_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__NetBSD__</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>pthread_setname_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set thread name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"warning r_th_setname not implemented"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_th_getname</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_NP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_PTHREAD_NP</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>||</operator> <name>__NetBSD__</name> <operator>||</operator> <name>__APPLE__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>pthread_getname_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get thread name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>__FreeBSD__</name> <operator>&amp;&amp;</operator> <name>__FreeBSD_version</name> <operator>&gt;=</operator> <literal type="number">1200000</literal><operator>)</operator> <operator>||</operator> <name>__DragonFly__</name> <operator>||</operator> <operator>(</operator><name>__OpenBSD__</name> <operator>&amp;&amp;</operator> <name>OpenBSD</name> <operator>&gt;=</operator> <literal type="number">201905</literal><operator>)</operator></expr></cpp:elif>
<expr_stmt><expr><call><name>pthread_get_name_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"warning r_th_getname not implemented"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_th_setaffinity</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<decl_stmt><decl><type><name>cpu_set_t</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CPU_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CPU_SET</name><argument_list>(<argument><expr><name>cpuid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sched_setaffinity</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set cpu affinity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__FreeBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>cpuset_t</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CPU_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CPU_SET</name><argument_list>(<argument><expr><name>cpuid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_setaffinity_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set cpu affinity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__NetBSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>cpuset_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cpuset_create</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_setaffinity_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><call><name>cpuset_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cpuset_destroy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set cpu affinity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cpuset_destroy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>thread_affinity_policy_data_t</name></type> <name>c</name> <init>= <expr><block>{<expr><name>cpuid</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>thread_policy_set</name> <argument_list>(<argument><expr><call><name>pthread_mach_thread_np</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>THREAD_AFFINITY_POLICY</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_policy_t</name><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set cpu affinity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>SetThreadAffinityMask</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cpuid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set cpu affinity\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"warning r_th_setaffinity not implemented"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>R_API</name> <name>RThread</name> <modifier>*</modifier></type><name>r_th_new</name><argument_list>(<argument><expr><call><name>R_TH_FUNCTION</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>int</name> <name>delay</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RThread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>fun</name></name> <operator>=</operator> <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_r_th_launcher</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>CreateThread</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_r_th_launcher</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>th</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_th_break</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_th_kill</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name> <operator>||</operator> <operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_break</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_wait</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_kill</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pthread_cancel</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>TerminateThread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_th_start</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></while>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_th_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_th_t</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_join</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_th_wait_async</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_th_t</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>th</name><operator>-&gt;</operator><name>running</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_th_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_th_t</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_th_kill_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_th_t</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_th_kill</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


typedef struct r_th_pipe_t {
RList *msglist;
RThread *th;

} RThreadPipe;

r_th_pipe_new();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
