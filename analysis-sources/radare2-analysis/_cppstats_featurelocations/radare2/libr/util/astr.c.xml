<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\astr.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1_oids.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_hex</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_create_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allocated</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RASN1String</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>allocated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RASN1String</name> <modifier>*</modifier></type><name>newstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_concatenate_strings</name> <parameter_list>(<parameter><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s0</name></decl></parameter>, <parameter><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>freestr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s0</name> <operator>||</operator> <operator>!</operator><name>s1</name> <operator>||</operator> <name><name>s0</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s1</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s0</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>s1</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>freestr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>s0</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>s0</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name><name>s0</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>freestr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_filter</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_utctime</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>length</name> <operator>!=</operator> <literal type="number">13</literal> <operator>||</operator> <name><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>str_sz</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'5'</literal></expr> ?</condition><then> <expr><literal type="char">'2'</literal></expr> </then><else>: <expr><literal type="char">'1'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'5'</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">'9'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_time</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>length</name> <operator>!=</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>str_sz</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_bits</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>size</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_boolean</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>length</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>newstr</name> <argument_list>(<argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_integer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>_hex</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>_hex</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name><modifier>*</modifier></type> <name>r_asn1_stringify_bytes</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">48</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>_hex</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>_hex</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">49</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>r_asn1_stringify_oid</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASN1_OID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>buffer</name></expr>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>slen</name> <operator>&lt;</operator> <name>ASN1_OID_LEN</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>oid</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>|=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>m</name> <init>= <expr><name>oid</name> <operator>/</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>n</name> <init>= <expr><name>oid</name> <operator>%</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ASN1_OID_LEN</name></expr></argument>, <argument><expr><literal type="string">"%01u.%01u"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>slen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ASN1_OID_LEN</name> <operator>-</operator> <name>slen</name></expr></argument>, <argument><expr><literal type="string">".%01u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>slen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>X509OIDList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>X509OIDList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><name>ASN1_OID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>newstr</name> <argument_list>(<argument><expr><name><name>X509OIDList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>X509OIDList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name> <operator>&amp;&amp;</operator> <name><name>X509OIDList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition>;</do>
<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ASN1_OID_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_asn1_free_string</name> <parameter_list>(<parameter><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>str</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>asn1_stringify_tag</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">"Unknown tag"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TAG_EOC</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"EOC"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_BOOLEAN</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"BOOLEAN"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_INTEGER</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"INTEGER"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_BITSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"BIT STRING"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_OCTETSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"OCTET STRING"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_NULL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_OID</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"OBJECT IDENTIFIER"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_OBJDESCRIPTOR</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"ObjectDescriptor"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_EXTERNAL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"EXTERNAL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_REAL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"REAL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_ENUMERATED</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"ENUMERATED"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_EMBEDDED_PDV</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"EMBEDDED PDV"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_UTF8STRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"UTF8String"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_SEQUENCE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"SEQUENCE"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_SET</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"SET"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_NUMERICSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"NumericString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_PRINTABLESTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"PrintableString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_T61STRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"TeletexString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_VIDEOTEXSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"VideotexString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_IA5STRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"IA5String"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_UTCTIME</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"UTCTime"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_GENERALIZEDTIME</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"GeneralizedTime"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_GRAPHICSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"GraphicString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_VISIBLESTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"VisibleString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_GENERALSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"GeneralString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_UNIVERSALSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"UniversalString"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAG_BMPSTRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"BMPString"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>newstr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1String</name> <modifier>*</modifier></type><name>asn1_stringify_sector</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TAG_EOC</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>TAG_BOOLEAN</name></expr>:</case>
<return>return <expr><call><name>newstr</name> <argument_list>(<argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TAG_REAL</name></expr>:</case>
<case>case <expr><name>TAG_INTEGER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>r_asn1_stringify_bytes</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>TAG_BITSTRING</name></expr>:</case>

<return>return <expr><call><name>r_asn1_stringify_bits</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>



<case>case <expr><name>TAG_OCTETSTRING</name></expr>:</case>
<return>return <expr><call><name>r_asn1_stringify_bytes</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TAG_NULL</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>TAG_OID</name></expr>:</case>
<return>return <expr><call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>




<case>case <expr><name>TAG_UTF8STRING</name></expr>:</case>


<case>case <expr><name>TAG_NUMERICSTRING</name></expr>:</case>
<case>case <expr><name>TAG_PRINTABLESTRING</name></expr>:</case>


<case>case <expr><name>TAG_IA5STRING</name></expr>:</case>
<case>case <expr><name>TAG_VISIBLESTRING</name></expr>:</case>
<return>return <expr><call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TAG_UTCTIME</name></expr>:</case>
<return>return <expr><call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TAG_GENERALIZEDTIME</name></expr>:</case>
<return>return <expr><call><name>r_asn1_stringify_time</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>




</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
