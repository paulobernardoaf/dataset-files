<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\tinyrange.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RRangeTiny</name> <modifier>*</modifier></type><name>r_tinyrange_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RRangeTiny</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_init</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_fini</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_free</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_tinyrange_fini</name> <argument_list>(<argument><expr><name>bbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>bbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_tinyrange_in</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>lastIndex</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&lt;</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&gt;</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>lastIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lastIndex</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>idx</name> <operator>&lt;=</operator> <name>lastIndex</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&gt;=</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>at</name> <operator>&lt;</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>lastIndex</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&lt;</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lastIndex</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>-=</operator> <operator>(</operator><name>idx</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>lastIndex</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_tinyrange_add</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ranges</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bbr</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
main() {
RRangeTiny *bbr = r_tinyrange_new ();
r_tinyrange_add (bbr, 100, 200);
r_tinyrange_add (bbr, 300, 400);
r_tinyrange_add (bbr, 400, 500);
eprintf ("%d\n", r_tinyrange_in (bbr, 100));
eprintf ("%d\n", r_tinyrange_in (bbr, 250));
eprintf ("%d\n", r_tinyrange_in (bbr, 450));

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
