<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\buf_sparse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<struct>struct <name>buf_sparse_priv</name> <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buffer_sparse_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RBufferSparse</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sparse_limits</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <operator>*</operator><name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>set</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBufferSparse</name> <modifier>*</modifier></type><name>sparse_append</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBufferSparse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>s</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>st64</name></type> <name>sparse_write</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>olen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name> <init>= <expr><name>addr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>reallen</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>delta</name> <operator>&gt;=</operator> <name>len</name></expr>?</condition><then> <expr><name>len</name></expr></then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>delta</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>reallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>reallen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>reallen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>reallen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>olen</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sparse_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>olen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>get_priv_sparse</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator>struct <name>buf_sparse_priv</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_warn_if_fail</name> <argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>priv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_sparse_init</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>buf_sparse_priv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>buffer_sparse_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_sparse_fini</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_sparse_resize</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>priv-&gt;sparse</argument>, <argument>iter</argument>, <argument>tmp</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;=</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RBufferSparse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>ns</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>written</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>ut64</name></type> <name>max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><call><name>sparse_limits</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>max</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><call><name>sparse_write</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>buf_sparse_size</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>max</name></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>sparse_limits</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>max</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_sparse_read</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>priv-&gt;sparse</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>to</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>l</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>l</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>r</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>max</name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_sparse_write</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>sparse_write</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_sparse_seek</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>max</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><macro><name>addr</name></macro> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>-</operator><name>addr</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>st64</name><operator>)</operator><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BUF_CUR</name></expr>:</case>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BUF_SET</name></expr>:</case>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BUF_END</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sparse_limits</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>max</name> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_warn_if_reached</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name><name>priv</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>buf_sparse_nonempty_list</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf_sparse_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_sparse</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_list_clone</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RBufferMethods</name></type> <name>buffer_sparse_methods</name> <init>= <expr><block>{
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>buf_sparse_init</name></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>buf_sparse_fini</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>buf_sparse_read</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>buf_sparse_write</name></expr>,
<expr><operator>.</operator><name>get_size</name> <operator>=</operator> <name>buf_sparse_size</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>buf_sparse_resize</name></expr>,
<expr><operator>.</operator><name>seek</name> <operator>=</operator> <name>buf_sparse_seek</name></expr>,
<expr><operator>.</operator><name>nonempty_list</name> <operator>=</operator> <name>buf_sparse_nonempty_list</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
