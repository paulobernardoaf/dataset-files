<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\regex\engine.c">











































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>matcher</name></cpp:macro> <cpp:value>smatcher</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>sfast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slow</name></cpp:macro> <cpp:value>sslow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dissect</name></cpp:macro> <cpp:value>sdissect</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>backref</name></cpp:macro> <cpp:value>sbackref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>step</name></cpp:macro> <cpp:value>sstep</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name></cpp:macro> <cpp:value>sprint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>at</name></cpp:macro> <cpp:value>sat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>match</name></cpp:macro> <cpp:value>smat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nope</name></cpp:macro> <cpp:value>snope</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>matcher</name></cpp:macro> <cpp:value>lmatcher</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>lfast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slow</name></cpp:macro> <cpp:value>lslow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dissect</name></cpp:macro> <cpp:value>ldissect</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>backref</name></cpp:macro> <cpp:value>lbackref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>step</name></cpp:macro> <cpp:value>lstep</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name></cpp:macro> <cpp:value>lprint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>at</name></cpp:macro> <cpp:value>lat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>match</name></cpp:macro> <cpp:value>lmat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nope</name></cpp:macro> <cpp:value>lnope</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>match</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegexMatch</name> <modifier>*</modifier></type><name>pmatch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>beginp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>coldp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lastpos</name></decl>;</decl_stmt> 
<expr_stmt><expr><name>STATEVARS</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>states</name></type> <name>st</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>states</name></type> <name>fresh</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>states</name></type> <name>tmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>states</name></type> <name>empty</name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>matcher</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>RRegexMatch</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>backref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>slow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>states</name></type> <name>step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>states</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>states</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RECURSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOL</name></cpp:macro> <cpp:value>(OUT+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL</name></cpp:macro> <cpp:value>(BOL+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOLEOL</name></cpp:macro> <cpp:value>(BOL+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTHING</name></cpp:macro> <cpp:value>(BOL+3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOW</name></cpp:macro> <cpp:value>(BOL+4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOW</name></cpp:macro> <cpp:value>(BOL+5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEMAX</name></cpp:macro> <cpp:value>(BOL+5)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &gt; CHAR_MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNONCHAR</name></cpp:macro> <cpp:value>(CODEMAX-CHAR_MAX)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>states</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>, <parameter><decl><type><name>sopno</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pchar</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>print(m, t, s, c, stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>at(m, t, p1, p2, s1, s2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTE</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (m-&gt;eflags&amp;R_REGEX_TRACE) (void)printf("=%s\n", (str)); }</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nope</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type> 
<name>matcher</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>RRegexMatch</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name></type> <name>mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name>mv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>sopno</name></type> <name>gf</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>firststate</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>sopno</name></type> <name>gl</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>laststate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NOSUB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eflags</name><operator>&amp;</operator><name>R_REGEX_STARTEND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>string</name> <operator>+</operator> <name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>string</name> <operator>+</operator> <name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stop</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>R_REGEX_INVARG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>must</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>dp</name> <operator>&lt;</operator> <name>stop</name></expr>;</condition> <incr><expr><name>dp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dp</name> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>must</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>stop</name> <operator>-</operator> <name>dp</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>mlen</name></name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>must</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>g</name><operator>-&gt;</operator><name>mlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return<expr><operator>(</operator><name>R_REGEX_NOMATCH</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <name>eflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>offp</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>=</operator> <name>stop</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nstates</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nstates</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>R_REGEX_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STATESETUP</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>fresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>fast</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endp</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATETEARDOWN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>R_REGEX_NOMATCH</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>backrefs</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"finding start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>coldp</name></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>backrefs</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RRegexMatch</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_REGEX_ESPACE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>=</operator> <operator>(</operator><name>RRegexMatch</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>RRegexMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STATETEARDOWN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>R_REGEX_ESPACE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>backrefs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_BACKR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"dissecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>dissect</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>nplus</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>nplus</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>nplus</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATETEARDOWN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_REGEX_ESPACE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>nplus</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>nplus</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATETEARDOWN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>R_REGEX_ESPACE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"backref dissect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>(</operator><name>sopno</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>backrefs</name></name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>nplus</name></name> <operator>||</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>endp</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"backoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr></argument>, <argument><expr><name>endp</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"backoff dissect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>(</operator><name>sopno</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>dp</name> <operator>!=</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><literal type="string">"false alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>coldp</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>coldp</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name>endp</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmatch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STATETEARDOWN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> 
<name>dissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>startst</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>stopst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sopno</name></type> <name>ss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>es</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>ssub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>esub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ssp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldssp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AT</name><argument_list>(<argument><expr><literal type="string">"diss"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ss</name> <operator>=</operator> <name>startst</name></expr>;</init> <condition><expr><name>ss</name> <operator>&lt;</operator> <name>stopst</name></expr>;</condition> <incr><expr><name>ss</name> <operator>=</operator> <name>es</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>es</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>es</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPLUS_</name></expr>:</case>
<case>case <expr><name>OQUEST_</name></expr>:</case>
<expr_stmt><expr><name>es</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>es</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OCH_</name></expr>:</case>
<while>while <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>es</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>es</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>es</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>es</name><operator>++</operator></expr>;</expr_stmt>


<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OEND</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OCHAR</name></expr>:</case>
<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBOL</name></expr>:</case>
<case>case <expr><name>OEOL</name></expr>:</case>
<case>case <expr><name>OBOW</name></expr>:</case>
<case>case <expr><name>OEOW</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OANY</name></expr>:</case>
<case>case <expr><name>OANYOF</name></expr>:</case>
<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBACK_</name></expr>:</case>
<case>case <expr><name>O_BACK</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>OQUEST_</name></expr>:</case>
<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>stop</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stp</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rest</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>rest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>=</operator> <name>es</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>dissect</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>rest</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>rest</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPLUS_</name></expr>:</case>
<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>stop</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stp</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>rest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>=</operator> <name>es</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ssp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldssp</name> <operator>=</operator> <name>ssp</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content> 
<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sep</name> <operator>||</operator> <name>sep</name> <operator>==</operator> <name>ssp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>oldssp</name> <operator>=</operator> <name>ssp</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ssp</name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>ssp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ssp</name> <operator>=</operator> <name>oldssp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <name>rest</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>dissect</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OCH_</name></expr>:</case>
<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>stop</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stp</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rest</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>stp</name> <operator>=</operator> <name>rest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OOR1</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>slow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rest</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>esub</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>esub</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>esub</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>dissect</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>rest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>O_PLUS</name></expr>:</case>
<case>case <expr><name>O_QUEST</name></expr>:</case>
<case>case <expr><name>OOR1</name></expr>:</case>
<case>case <expr><name>OOR2</name></expr>:</case>
<case>case <expr><name>O_CH</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OLPAREN</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ORPAREN</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sp</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> 
<name>backref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>startst</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>stopst</name></decl></parameter>,
<parameter><decl><type><name>sopno</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rec</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sopno</name></type> <name>ss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>ssub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>esub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ssp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sop</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cset</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AT</name><argument_list>(<argument><expr><literal type="string">"back"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>


<expr_stmt><expr><name>hard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ss</name> <operator>=</operator> <name>startst</name></expr>;</init> <condition><expr><operator>!</operator><name>hard</name> <operator>&amp;&amp;</operator> <name>ss</name> <operator>&lt;</operator> <name>stopst</name></expr>;</condition> <incr><expr><name>ss</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OCHAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>stop</name> <operator>||</operator> <operator>*</operator><name>sp</name><operator>++</operator> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OANY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OANYOF</name></expr>:</case>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>sets</name><index>[<expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>stop</name> <operator>||</operator> <operator>!</operator><call><name>CHIN</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OBOL</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sp</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTBOL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>sp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OEOL</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sp</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTEOL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OBOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <operator>(</operator><name>sp</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTBOL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>sp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>sp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OEOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <operator>(</operator><name>sp</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTEOL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>sp</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>sp</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>sp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>O_QUEST</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OOR1</name></expr>:</case> 
<expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ss</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>)</condition>;</do>

<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>hard</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hard</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>sp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ss</name><operator>--</operator></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>AT</name><argument_list>(<argument><expr><literal type="string">"hard"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBACK_</name></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rec</name><operator>++</operator> <operator>&gt;</operator> <name>MAX_RECURSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stop</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;</operator> <name>stop</name> <operator>-</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ssp</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>ss</name></expr>]</index></name> <operator>!=</operator> <call><name>SOP</name><argument_list>(<argument><expr><name>O_BACK</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return<expr><operator>(</operator><call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OQUEST_</name></expr>:</case> 
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt> 
<return>return<expr><operator>(</operator><call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<break>break;</break>
<case>case <expr><name>OPLUS_</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lev</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nplus</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name><index>[<expr><name>lev</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>O_PLUS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>lastpos</name><index>[<expr><name>lev</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return<expr><operator>(</operator><call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lastpos</name><index>[<expr><name>lev</name></expr>]</index></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>-</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OCH_</name></expr>:</case> 
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>=</operator> <name>ss</name> <operator>+</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OOR1</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content> 
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ssub</name></expr></argument>, <argument><expr><name>esub</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>O_CH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>esub</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ssub</name> <operator>=</operator> <name>esub</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>esub</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>esub</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>esub</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>OLPAREN</name></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offsave</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name>offsave</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ORPAREN</name></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offsave</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>backref</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name>offsave</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> 
<name>fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>startst</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>stopst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>states</name></type> <name>st</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>states</name></type> <name>fresh</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>fresh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>states</name></type> <name>tmp</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>tmp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>start</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>OUT</name></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>start</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flagch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>coldp</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET1</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>startst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NOTHING</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>fresh</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coldp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>OUT</name></expr> </then><else>: <expr><operator>*</operator><name>p</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name><operator>==</operator><name>fresh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coldp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>flagch</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>lastc</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>lastc</name> <operator>==</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTBOL</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>BOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nbol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>c</name> <operator>==</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTEOL</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flagch</name> <operator>==</operator> <name>BOL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BOLEOL</name></expr> </then><else>: <expr><name>EOL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>neol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>flagch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"boleol"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name>flagch</name> <operator>==</operator> <name>BOL</name> <operator>||</operator> <operator>(</operator><name>lastc</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><name>lastc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>c</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>BOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>lastc</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><name>lastc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flagch</name> <operator>==</operator> <name>EOL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>EOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagch</name> <operator>==</operator> <name>BOW</name> <operator>||</operator> <name>flagch</name> <operator>==</operator> <name>EOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>flagch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"boweow"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ISSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>p</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>fresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>OUT</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"aft"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ</name><argument_list>(<argument><expr><call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NOTHING</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>coldp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>coldp</name></name> <operator>=</operator> <name>coldp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> 
<name>slow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>startst</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>stopst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>states</name></type> <name>st</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>states</name></type> <name>empty</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>empty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>states</name></type> <name>tmp</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>tmp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>start</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>beginp</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>OUT</name></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>start</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flagch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>matchp</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>AT</name><argument_list>(<argument><expr><literal type="string">"slow"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET1</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>startst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"sstart"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NOTHING</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matchp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>endp</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>OUT</name></expr> </then><else>: <expr><operator>*</operator><name>p</name></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name>flagch</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>lastc</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>lastc</name> <operator>==</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTBOL</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>BOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nbol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name><operator>&amp;</operator><name>R_REGEX_NEWLINE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>c</name> <operator>==</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_NOTEOL</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flagch</name> <operator>==</operator> <name>BOL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BOLEOL</name></expr> </then><else>: <expr><name>EOL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>neol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>flagch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"sboleol"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name>flagch</name> <operator>==</operator> <name>BOL</name> <operator>||</operator> <operator>(</operator><name>lastc</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><name>lastc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>c</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>BOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>lastc</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <call><name>ISWORD</name><argument_list>(<argument><expr><name>lastc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flagch</name> <operator>==</operator> <name>EOL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>OUT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISWORD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flagch</name> <operator>=</operator> <name>EOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagch</name> <operator>==</operator> <name>BOW</name> <operator>||</operator> <name>flagch</name> <operator>==</operator> <name>EOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>flagch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"sboweow"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ISSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matchp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>p</name> <operator>==</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>OUT</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SP</name><argument_list>(<argument><expr><literal type="string">"saft"</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ</name><argument_list>(<argument><expr><call><name>step</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>startst</name></expr></argument>, <argument><expr><name>stopst</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NOTHING</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return<expr><operator>(</operator><name>matchp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>states</name></type>
<name>step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>sopno</name></type> <name>start</name></decl></parameter>, 
<parameter><decl><type><name>sopno</name></type> <name>stop</name></decl></parameter>, 
<parameter><decl><type><name>states</name></type> <name>bef</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, 
<parameter><decl><type><name>states</name></type> <name>aft</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>cset</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sop</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sopno</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>onestate</name></type> <name>here</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>look</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pc</name> <operator>=</operator> <name>start</name></expr><operator>,</operator> <expr><call><name>INIT</name><argument_list>(<argument><expr><name>here</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pc</name> <operator>!=</operator> <name>stop</name></expr>;</condition> <incr><expr><name>pc</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>INC</name><argument_list>(<argument><expr><name>here</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>pc</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OEND</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OCHAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONCHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OBOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>BOL</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>BOLEOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OEOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOL</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>BOLEOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OBOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>BOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OEOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OANY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONCHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OANYOF</name></expr>:</case>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>sets</name><index>[<expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONCHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CHIN</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>bef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OBACK_</name></expr>:</case> 
<case>case <expr><name>O_BACK</name></expr>:</case>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPLUS_</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_PLUS</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ISSETBACK</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BACK</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <call><name>ISSETBACK</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pc</name> <operator>-=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name>here</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OQUEST_</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_QUEST</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OLPAREN</name></expr>:</case> 
<case>case <expr><name>ORPAREN</name></expr>:</case>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OCH_</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>OP</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>pc</name><operator>+</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OOR2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OOR1</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>ISSTATEIN</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>here</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>look</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>pc</name><operator>+</operator><name>look</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>;</condition>
<incr><expr><name>look</name> <operator>+=</operator> <call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><name>look</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OOR2</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>pc</name><operator>+</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>O_CH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strip</name><index>[<expr><name>pc</name><operator>+</operator><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OOR2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><call><name>OPND</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>O_CH</name></expr>:</case> 
<expr_stmt><expr><call><name>FWD</name><argument_list>(<argument><expr><name>aft</name></expr></argument>, <argument><expr><name>aft</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ops in regex.c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return<expr><operator>(</operator><name>aft</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>caption</name></decl></parameter>, <parameter><decl><type><name>states</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>pchar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>nstates</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>first</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"\t"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>sopno</name></type> <name>startst</name></decl></parameter>,
<parameter><decl><type><name>sopno</name></type> <name>stopst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>eflags</name></name><operator>&amp;</operator><name>R_REGEX_TRACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s-"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>pchar</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>pchar</name><argument_list>(<argument><expr><operator>*</operator><name>stop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld-%ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>startst</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>stopst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PCHARDONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCHARDONE</name></cpp:macro></cpp:define> 








<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> 
<name>pchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pbuf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pbuf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"\\%o"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return<expr><operator>(</operator><name>pbuf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>matcher</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fast</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>slow</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dissect</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>backref</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>step</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>print</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>at</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>match</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nope</name></cpp:undef>
</unit>
