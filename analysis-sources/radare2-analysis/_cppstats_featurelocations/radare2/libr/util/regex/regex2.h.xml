<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\regex\regex2.h">







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC1</name></cpp:macro> <cpp:value>((('r'^0200)&lt;&lt;8) | 'e')</cpp:value></cpp:define>




















<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>sop</name>;</typedef> 
<typedef>typedef <type><name>long</name></type> <name>sopno</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPRMASK</name></cpp:macro> <cpp:value>0xf8000000LU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPDMASK</name></cpp:macro> <cpp:value>0x07ffffffLU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPSHIFT</name></cpp:macro> <cpp:value>((unsigned)27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&amp;OPRMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPND</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&amp;OPDMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOP</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>opnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)|(opnd))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEND</name></cpp:macro> <cpp:value>(1LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCHAR</name></cpp:macro> <cpp:value>(2LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBOL</name></cpp:macro> <cpp:value>(3LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEOL</name></cpp:macro> <cpp:value>(4LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OANY</name></cpp:macro> <cpp:value>(5LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OANYOF</name></cpp:macro> <cpp:value>(6LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBACK_</name></cpp:macro> <cpp:value>(7LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BACK</name></cpp:macro> <cpp:value>(8LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPLUS_</name></cpp:macro> <cpp:value>(9LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_PLUS</name></cpp:macro> <cpp:value>(10LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OQUEST_</name></cpp:macro> <cpp:value>(11LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_QUEST</name></cpp:macro> <cpp:value>(12LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLPAREN</name></cpp:macro> <cpp:value>(13LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORPAREN</name></cpp:macro> <cpp:value>(14LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCH_</name></cpp:macro> <cpp:value>(15LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OOR1</name></cpp:macro> <cpp:value>(16LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OOR2</name></cpp:macro> <cpp:value>(17LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CH</name></cpp:macro> <cpp:value>(18LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBOW</name></cpp:macro> <cpp:value>(19LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEOW</name></cpp:macro> <cpp:value>(20LU&lt;&lt;OPSHIFT)</cpp:value></cpp:define> 













<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>smultis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>multis</name></decl>;</decl_stmt> 
}</block></struct></type> <name>cset</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHadd</name><parameter_list>(<parameter><type><name>cs</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cs)-&gt;ptr[(ut8)(c)] |= (cs)-&gt;mask, (cs)-&gt;hash += (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHsub</name><parameter_list>(<parameter><type><name>cs</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cs)-&gt;ptr[(ut8)(c)] &amp;= ~(cs)-&gt;mask, (cs)-&gt;hash -= (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHIN</name><parameter_list>(<parameter><type><name>cs</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cs)-&gt;ptr[(ut8)(c)] &amp; (cs)-&gt;mask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCadd</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>cs</name></type></parameter>, <parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mcadd(p, cs, cp)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCsub</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>cs</name></type></parameter>, <parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mcsub(p, cs, cp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCin</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>cs</name></type></parameter>, <parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mcin(p, cs, cp)</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>cat_t</name>;</typedef>




<struct>struct <name>re_guts</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC2</name></cpp:macro> <cpp:value>((('R'^0200)&lt;&lt;8)|'E')</cpp:value></cpp:define>
<decl_stmt><decl><type><name>sop</name> <modifier>*</modifier></type><name>strip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>csetsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ncsets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cset</name> <modifier>*</modifier></type><name>sets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>setbits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cflags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>nstates</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>firststate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>laststate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>iflags</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEBOL</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEEOL</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>nbol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>neol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ncategories</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cat_t</name> <modifier>*</modifier></type><name>categories</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>must</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>nsub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>backrefs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sopno</name></type> <name>nplus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cat_t</name></type> <name><name>catspace</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name></cpp:macro> <cpp:value>(CHAR_MAX+1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISWORD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isalnum((ut8)(c)) || (c) == '_')</cpp:value></cpp:define>
</unit>
