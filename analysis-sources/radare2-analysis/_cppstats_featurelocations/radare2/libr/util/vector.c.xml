<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\vector.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_vector.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WORDSIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_VECTOR_LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_VECTOR_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_VECTOR_CAPACITY</name></cpp:macro> <cpp:value>(vec-&gt;capacity &lt; INITIAL_VECTOR_LEN ? INITIAL_VECTOR_LEN : vec-&gt;capacity &lt;= 12 ? vec-&gt;capacity * 2 : vec-&gt;capacity + (vec-&gt;capacity &gt;&gt; 1))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESIZE_OR_RETURN_NULL</name><parameter_list>(<parameter><type><name>next_capacity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t new_capacity = next_capacity; void **new_a = realloc (vec-&gt;a, vec-&gt;elem_size * new_capacity); if (!new_a) { return NULL; } vec-&gt;a = new_a; vec-&gt;capacity = new_capacity; } while (0)</cpp:value></cpp:define>











<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_init</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>RVectorFree</name></type> <name>free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>=</operator> <name>elem_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>free_user</name></name> <operator>=</operator> <name>free_user</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_vector_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>RVectorFree</name></type> <name>free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RVector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_free_elems</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>vec</name><operator>-&gt;</operator><name>free</name></name> <argument_list>(<argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>--</operator><name><name>vec</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>free_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_clear</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>vector_free_elems</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_free</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>vector_free_elems</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vector_clone</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>elem_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>free</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>free_user</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>free_user</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>a</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_vector_clone</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RVector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_clone</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_index_ptr</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_assign</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_assign_at</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>elem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_assign</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_remove_at</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>into</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_assign</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>into</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_insert</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESIZE_OR_RETURN_NULL</name> <argument_list>(<argument><expr><name>NEXT_VECTOR_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_assign</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_insert_range</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESIZE_OR_RETURN_NULL</name> <argument_list>(<argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>NEXT_VECTOR_CAPACITY</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name>count</name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>elem_size</name></name> <operator>*</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_pop</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>into</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_assign</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>into</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vector_pop_front</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_push</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESIZE_OR_RETURN_NULL</name> <argument_list>(<argument><expr><name>NEXT_VECTOR_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_assign</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_push_front</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_vector_insert</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_reserve</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESIZE_OR_RETURN_NULL</name> <argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>a</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_shrink</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESIZE_OR_RETURN_NULL</name> <argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>a</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>pvector_free_elem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>e</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPVectorFree</name></type> <name>elem_free</name> <init>= <expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>elem_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_pvector_init</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>RPVectorFree</name></type> <name>free</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><name>free</name></expr> ?</condition><then> <expr><name>pvector_free_elem</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RPVector</name> <modifier>*</modifier></type><name>r_pvector_new</name><parameter_list>(<parameter><decl><type><name>RPVectorFree</name></type> <name>free</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RPVector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pvector_clear</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pvector_free</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_contains</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_remove_at</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pvector_remove_data</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>el</name> <init>= <expr><call><name>r_pvector_contains</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>el</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name>el</name> <operator>-</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_pop</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_vector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_pop_front</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_vector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>quick_sort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RPVectorComparator</name></type> <name>cmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pivot</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pivot</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quick_sort</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quick_sort</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pvector_sort</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>RPVectorComparator</name></type> <name>cmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>quick_sort</name> <argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
