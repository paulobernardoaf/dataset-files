<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\udiff.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_diff.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SYSTEM_DIFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<function><type><name>R_API</name> <name>RDiff</name> <modifier>*</modifier></type><name>r_diff_new_from</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>off_a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>off_a</name></name> <operator>=</operator> <name>off_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>off_b</name></name> <operator>=</operator> <name>off_b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDiff</name> <modifier>*</modifier></type><name>r_diff_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_diff_new_from</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDiff</name> <modifier>*</modifier></type><name>r_diff_free</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_diff_set_callback</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>RDiffCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_diff_set_delta</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block></struct></type> <name>RDiffUser</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_SYSTEM_DIFF</name></expr></cpp:if>
<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_diff_buffers_to_string</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_diff_buffers_unified</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tostring</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RDiffOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDiffUser</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>(</operator><name>RDiffUser</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a_str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>a_buf</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"+(%s)"</literal></expr></argument>, <argument><expr><name>a_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char *bufasm = r_str_prefix_all (a_str, "- ");
u-&gt;str = r_str_appendf (u-&gt;str, "-(%s)", bufasm);
free (bufasm);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b_str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>b_off</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"+(%s)"</literal></expr></argument>, <argument><expr><name>b_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char *bufasm = r_str_prefix_all (b_str, "+ ");
u-&gt;str = r_str_appendf (u-&gt;str, "+(%s)", bufasm);
free (bufasm);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b_str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>a_buf</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>b_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_diff_buffers_to_string</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>callback</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDiffUser</name></type> <name>du</name> <init>= <expr><block>{<expr><name>d</name></expr>, <macro><name>strdup</name> <argument_list>(<argument><literal type="string">""</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <operator>&amp;</operator><name>tostring</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>&amp;</operator><name>du</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_diff_buffers_static</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<return>return <expr><name><name>du</name><operator>.</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>diffHit</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{const size_t i_hit = i - hit;int ra = la - i_hit;int rb = lb - i_hit;struct r_diff_op_t o = {.a_off = d-&gt;off_a+i-hit, .a_buf = a+i-hit, .a_len = R_MIN (hit, ra),.b_off = d-&gt;off_b+i-hit, .b_buf = b+i-hit, .b_len = R_MIN (hit, rb)};d-&gt;callback (d, d-&gt;user, &amp;o);}</cpp:value></cpp:define>










<function><type><name>R_API</name> <name>int</name></type> <name>r_diff_buffers_static</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>la</name> <operator>!=</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Buffer truncated to %d byte(s) (%d not compared)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>R_ABS</name><argument_list>(<argument><expr><name>lb</name><operator>-</operator><name>la</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hit</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diffHit</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>hit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diffHit</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_diff_buffers_unified</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><literal type="string">".a"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><literal type="string">".b"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (r_mem_is_printable (a, R_MIN (5, la))) {
r_file_dump (".a", a, la, 0);
r_file_dump (".b", b, lb, 0);
} else {
r_file_hexdump (".a", a, la, 0);
r_file_hexdump (".b", b, lb, 0);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_len</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_sys_cmd_str_full</name> <argument_list>(<argument><expr><literal type="string">"diff -u .a .b"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><literal type="string">".a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><literal type="string">".b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_diff_buffers</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>d</name><operator>-&gt;</operator><name>delta</name></name></expr>
?</condition><then> <expr><call><name>r_diff_buffers_delta</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>r_diff_buffers_static</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_diff_buffers_distance_levenstein</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>similarity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verbose</name> <init>= <expr><ternary><condition><expr><name>d</name></expr>?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>verbose</name></name></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>











<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>aBufPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bBufPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>aLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>bLen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>v0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v1</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smallest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colMin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extendStop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extendStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ut64</name></type> <name>loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
















<if_stmt><if>if <condition>(<expr><name>la</name> <operator>&lt;</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aBufPtr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bBufPtr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aLen</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bLen</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>aBufPtr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bBufPtr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aLen</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bLen</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>bLen</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aBufPtr</name> <operator>||</operator> <operator>!</operator><name>bBufPtr</name> <operator>||</operator> <name>aLen</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>bLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>aLen</name> <operator>==</operator> <name>bLen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>aBufPtr</name></expr></argument>, <argument><expr><name>bBufPtr</name></expr></argument>, <argument><expr><name>aLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>distance</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>similarity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>similarity</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>bLen</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: cannot allocate %i bytes."</literal></expr></argument>, <argument><expr><name>bLen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>bLen</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: cannot allocate %i bytes"</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>bLen</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bLen</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>v0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<expr_stmt><expr><name>stop</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>extendStop</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>bLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>bLen</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <name><name>v0</name><index>[<expr><name>start</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>colMin</name> <operator>=</operator> <name>aLen</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>stop</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>loops</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>cost</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>aBufPtr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>bBufPtr</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>v0</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>smallest</name></expr></argument>, <argument><expr><operator>(</operator><name><name>v0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>cost</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>bLen</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>smallest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>smallest</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>colMin</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>colMin</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>smallest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>






<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>colMin</name> <operator>-</operator> <name>extendStart</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cost</name> <operator>&amp;&amp;</operator> <name><name>aBufPtr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>bBufPtr</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extendStop</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>aLen</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <name>bLen</name> <operator>&amp;&amp;</operator> <name><name>aBufPtr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>bBufPtr</name><index>[<expr><name>start</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>extendStart</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>%</operator> <literal type="number">10000</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\rProcessing %d of %d\r"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>aLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\rProcessing %d of %d (loops=%"</literal><name>PFMT64d</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>aLen</name></expr></argument>,<argument><expr><name>loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>distance</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name><name>v0</name><index>[<expr><name>stop</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>similarity</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>v0</name><index>[<expr><name>stop</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name>R_MAX</name> <argument_list>(<argument><expr><name>aLen</name></expr></argument>, <argument><expr><name>bLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>similarity</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">1</literal> <operator>-</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>bool</name></type> <name>r_diff_buffers_distance_myers</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>similarity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verbose</name> <init>= <expr><ternary><condition><expr><name>diff</name></expr> ?</condition><then> <expr><name><name>diff</name><operator>-&gt;</operator><name>verbose</name></name></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>length</name> <init>= <expr><name>la</name> <operator>+</operator> <name>lb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name>a</name> <operator>+</operator> <name>la</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name> <init>= <expr><name>b</name> <operator>+</operator> <name>lb</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ea</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>a</name> <operator>==</operator> <operator>*</operator><name>b</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ea</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <name><name>ea</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>eb</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>ea</name><operator>--</operator></expr><operator>,</operator> <expr><name>eb</name><operator>--</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>
<expr_stmt><expr><name>la</name> <operator>=</operator> <name>ea</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <name>eb</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><name>la</name> <operator>+</operator> <name>lb</name></expr></init></decl>, <decl><type ref="prev"/><name>di</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>st64</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>!</operator><operator>(</operator><name>v0</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v0</name> <operator>+</operator> <name>lb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>di</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>di</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>di</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>-</operator><name>di</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>di</name> <operator>-</operator> <operator>(</operator><name>st64</name><operator>)</operator><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>di</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>di</name> <operator>-</operator> <operator>(</operator><name>st64</name><operator>)</operator><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>low</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>high</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <operator>-</operator><name>di</name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>!=</operator> <name>di</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>la</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>lb</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>la</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>di</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\rProcessing dist %"</literal> <name>PFMT64d</name> <literal type="string">" of max %"</literal> <name>PFMT64d</name> <literal type="string">"\r"</literal></expr></argument>, <argument><expr><name>di</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>di</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>similarity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>similarity</name> <operator>=</operator> <ternary><condition><expr><name>length</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>di</name> <operator>/</operator> <name>length</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_diff_buffers_distance_original</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>similarity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verbose</name> <init>= <expr><ternary><condition><expr><name>diff</name></expr> ?</condition><then> <expr><name><name>diff</name><operator>-&gt;</operator><name>verbose</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>length</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name>a</name> <operator>+</operator> <name>la</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name> <init>= <expr><name>b</name> <operator>+</operator> <name>lb</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ea</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>a</name> <operator>==</operator> <operator>*</operator><name>b</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ea</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <name><name>ea</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>eb</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>ea</name><operator>--</operator></expr><operator>,</operator> <expr><name>eb</name><operator>--</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>
<expr_stmt><expr><name>la</name> <operator>=</operator> <name>ea</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <name>eb</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>la</name> <operator>&lt;</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
<expr_stmt><expr><name>la</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <operator>(</operator><name>lb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>d</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>lb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>la</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ul</name> <init>= <expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>u</name> <init>= <expr><name><name>d</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><name>ul</name></expr> </then><else>: <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>ul</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\rProcessing %"</literal> <name>PFMT32u</name> <literal type="string">" of %"</literal> <name>PFMT32u</name> <literal type="string">"\r"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>distance</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>lb</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>similarity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>similarity</name> <operator>=</operator> <ternary><condition><expr><name>length</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>d</name><index>[<expr><name>lb</name></expr>]</index></name> <operator>/</operator> <name>length</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_diff_buffers_distance</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>similarity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<return>return <expr><call><name>r_diff_buffers_distance_myers</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<return>return <expr><call><name>r_diff_buffers_distance_levenstein</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_diff_buffers_distance_original</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
