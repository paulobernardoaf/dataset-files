<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\zip.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXOUT</name></cpp:macro> <cpp:value>50000000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gzerr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>errors</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"file error"</literal></expr>, 
<expr><literal type="string">"stream error"</literal></expr>, 
<expr><literal type="string">"data error"</literal></expr>, 
<expr><literal type="string">"insufficient memory"</literal></expr>, 
<expr><literal type="string">"buffer error"</literal></expr>, 
<expr><literal type="string">"incompatible version"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal> <operator>||</operator> <name>n</name></expr></argument>&gt;</argument_list></name><literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>errors</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_inflate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcLen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>srcConsumed</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dstLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>srcLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>srcLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>inflateInit2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>MAX_WBITS</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>+</operator> <name>srcLen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_ptr</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_size</name> <operator>+=</operator> <name>srcLen</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&gt;</operator> <name>MAXOUT</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>srcLen</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflate</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"inflate error: %d %s\n"</literal></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>gzerr</name> <argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>dstLen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dstLen</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>srcConsumed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>srcConsumed</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name><name>stream</name><operator>.</operator><name>next_in</name></name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>inflateEnd</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>

<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>inflateEnd</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
