<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\signal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
}</block> <decl><name><name>signals</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"SIGINT"</literal></expr>, <expr><name>SIGINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGILL"</literal></expr>, <expr><name>SIGILL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGABRT"</literal></expr>, <expr><name>SIGABRT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGFPE"</literal></expr>, <expr><name>SIGFPE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGSEGV"</literal></expr>, <expr><name>SIGSEGV</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGTERM"</literal></expr>, <expr><name>SIGTERM</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__LINUX__</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"SIGSTKFLT"</literal></expr>, <expr><name>SIGSTKFLT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGWINCH"</literal></expr>, <expr><name>SIGWINCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGIO"</literal></expr>, <expr><name>SIGIO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGPWR"</literal></expr>, <expr><name>SIGPWR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGPOLL"</literal></expr>, <expr><name>SIGPOLL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"SIGHUP"</literal></expr>, <expr><name>SIGHUP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGQUIT"</literal></expr>, <expr><name>SIGQUIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGTRAP"</literal></expr>, <expr><name>SIGTRAP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGBUS"</literal></expr>, <expr><name>SIGBUS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGKILL"</literal></expr>, <expr><name>SIGKILL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGUSR1"</literal></expr>, <expr><name>SIGUSR1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGUSR2"</literal></expr>, <expr><name>SIGUSR2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGPIPE"</literal></expr>, <expr><name>SIGPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGALRM"</literal></expr>, <expr><name>SIGALRM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGCHLD"</literal></expr>, <expr><name>SIGCHLD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGCONT"</literal></expr>, <expr><name>SIGCONT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGSTOP"</literal></expr>, <expr><name>SIGSTOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGTSTP"</literal></expr>, <expr><name>SIGTSTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGTTIN"</literal></expr>, <expr><name>SIGTTIN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGTTOU"</literal></expr>, <expr><name>SIGTTOU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGURG"</literal></expr>, <expr><name>SIGURG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGXCPU"</literal></expr>, <expr><name>SIGXCPU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGXFSZ"</literal></expr>, <expr><name>SIGXFSZ</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGVTALRM"</literal></expr>, <expr><name>SIGVTALRM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGPROF"</literal></expr>, <expr><name>SIGPROF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SIGSYS"</literal></expr>, <expr><name>SIGSYS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>R_API</name> <name>int</name></type> <name>r_signal_from_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_signal_to_string</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:if>
<function><type><name>R_API</name> <name>void</name></type> <name>r_signal_sigmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sigset_t</name> <modifier>*</modifier></type><name>newmask</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>oldmask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_sigmask</name> <argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><name>newmask</name></expr></argument>, <argument><expr><name>oldmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
