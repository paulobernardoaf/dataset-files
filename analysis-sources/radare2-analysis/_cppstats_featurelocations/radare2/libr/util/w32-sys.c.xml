<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\w32-sys.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>r_sys_perror_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fun</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ErrorExit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r_sys_perror(x); return false; }</cpp:value></cpp:define>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ReadFromPipe</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_sys_get_src_dir_w32</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>fullpath</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>shortpath</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetModuleFileName</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>GetShortPathName</name> <argument_list>(<argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>shortpath</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>shortpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>r_file_dirname</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sys_getenv_asbool</name> <argument_list>(<argument><expr><literal type="string">"R_ALT_SRC_DIR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>dir</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>r_file_dirname</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sys_cmd_str_full_w32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sterr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>saAttr</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdOutRd CreatePipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetHandleInformation</name> <argument_list>(<argument><expr><name>fo</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdOut SetHandleInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sterr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdErrRd CreatePipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetHandleInformation</name> <argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdErr SetHandleInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdInRd CreatePipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nBytesWritten</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WriteFile</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBytesWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetHandleInformation</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdIn SetHandleInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sys_create_child_proc_w32</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>fi</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdInWr CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdOutWr CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"StdErrWr CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <call><name>ReadFromPipe</name> <argument_list>(<argument><expr><name>fo</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sterr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sterr</name> <operator>=</operator> <call><name>ReadFromPipe</name> <argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fi</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"PipeIn CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fo</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>fo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"PipeOut CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ErrorExit</name> <argument_list>(<argument><expr><literal type="string">"PipeErr CloseHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sys_create_child_proc_w32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdline</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>cmdline_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name> <init>= <expr><literal type="number">32768</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>_cmdline_</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_cmdline_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>STARTUPINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_</name> <operator>=</operator> <call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpandEnvironmentStrings</name> <argument_list>(<argument><expr><name>cmdline_</name></expr></argument>, <argument><expr><name>_cmdline_</name></expr></argument>, <argument><expr><name>max_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>CreateProcess</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>_cmdline_</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>TRUE</name></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"CreateProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdline_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmdline_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ReadFromPipe</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR</name></type> <name><name>chBuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bSuccess</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strsz</name> <init>= <expr><name>BUFSIZE</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>strsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bSuccess</name> <operator>=</operator> <call><name>ReadFile</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>chBuf</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bSuccess</name> <operator>||</operator> <name>dwRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>strl</name><operator>+</operator><name>dwRead</name><operator>&gt;</operator><name>strsz</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_tmp</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>strsz</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><name>strl</name></expr></argument>, <argument><expr><name>chBuf</name></expr></argument>, <argument><expr><name>dwRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strl</name> <operator>+=</operator> <name>dwRead</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>strl</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>strl</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
