<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\str_constpool.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_str_constpool.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kv_fini</name><parameter_list>(<parameter><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_str_constpool_init</name><parameter_list>(<parameter><decl><type><name>RStrConstPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <call><name>ht_pp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kv_fini</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_str_constpool_fini</name><parameter_list>(<parameter><decl><type><name>RStrConstPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_str_constpool_get</name><parameter_list>(<parameter><decl><type><name>RStrConstPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>ht_pp_find_kv</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>ht_pp_find_kv</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
