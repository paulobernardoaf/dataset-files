<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\asn1.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ASN1_STD_FORMAT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>asn1_setformat</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ASN1_STD_FORMAT</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>asn1_ber_indefinite</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>buffer</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>next</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>ASN1_FORM</name><operator>)</operator> <operator>==</operator> <name>FORM_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>--</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>asn1_ber_indefinite</name> <argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>next</name> <operator>-</operator> <name>buffer</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RASN1Object</name> <modifier>*</modifier></type><name>asn1_parse_header</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>start_pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>head</name></decl>, <decl><type ref="prev"/><name>length8</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>length64</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RASN1Object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <ternary><condition><expr><name>start_pointer</name></expr> ?</condition><then> <expr><operator>(</operator><name>buffer</name> <operator>-</operator> <name>start_pointer</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>klass</name></name> <operator>=</operator> <name>head</name> <operator>&amp;</operator> <name>ASN1_CLASS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>form</name></name> <operator>=</operator> <name>head</name> <operator>&amp;</operator> <name>ASN1_FORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>head</name> <operator>&amp;</operator> <name>ASN1_TAG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length8</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length8</name> <operator>&amp;</operator> <name>ASN1_LENLONG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length8</name> <operator>&amp;=</operator> <name>ASN1_LENSHORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length8</name> <operator>&amp;&amp;</operator> <name>length8</name> <operator>&lt;</operator> <name>length</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>i8</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8</name> <operator>&lt;</operator> <name>length8</name></expr>;</condition> <incr><expr><name>i8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>i8</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>length64</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length64</name> <operator>|=</operator> <name>byte</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length64</name> <operator>&gt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>+=</operator> <name>length8</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>length64</name> <operator>=</operator> <call><name>asn1_ber_indefinite</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name>length64</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name>length8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_BITSTRING</name> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>object</name></expr>;</return>
<label><name>out_error</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>r_asn1_count_objects</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next</name> <operator>&gt;=</operator> <name>buffer</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>asn1_parse_header</name> <argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name>next</name> <operator>==</operator> <name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>+</operator> <name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>counter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1Object</name> <modifier>*</modifier></type><name>r_asn1_create_object</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>start_pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>asn1_parse_header</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>start_pointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>object</name><operator>-&gt;</operator><name>form</name></name> <operator>==</operator> <name>FORM_CONSTRUCTED</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_BITSTRING</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_OCTETSTRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>next</name> <operator>+</operator> <name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>buffer</name> <operator>+</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><call><name>r_asn1_count_objects</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RASN1Object</name><operator>*</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>next</name> <operator>&gt;=</operator> <name>buffer</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>inner</name> <init>= <expr><call><name>r_asn1_create_object</name> <argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>next</name></expr></argument>, <argument><expr><name>start_pointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inner</name> <operator>||</operator> <name>next</name> <operator>==</operator> <name><name>inner</name><operator>-&gt;</operator><name>sector</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>inner</name><operator>-&gt;</operator><name>sector</name></name> <operator>+</operator> <name><name>inner</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>inner</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>object</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RASN1Binary</name> <modifier>*</modifier></type><name>r_asn1_create_binary</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RASN1Binary</name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RASN1Binary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>binary</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_asn1_print_hex</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ASN1_STD_FORMAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>depth</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ASN1_STD_FORMAT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>r_asn1_print_padded</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>depth</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>form</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>v</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TAG_NULL</name></expr>:</case>
<case>case <expr><name>TAG_EOC</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>TAG_INTEGER</name></expr>:</case>
<case>case <expr><name>TAG_REAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n%s%s\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TAG_BITSTRING</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RASN1String</name><modifier>*</modifier></type> <name>r_asn1_print_hexdump_padded</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>readable</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ASN1_STD_FORMAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">" : "</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>depth</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>sector</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%-16s|\n%s"</literal></expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>readable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>readable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readable</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_PRINTABLE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%-16s|"</literal></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><call><name>r_asn1_create_string</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asn1str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>asn1str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_asn1_to_string</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>root</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1String</name><modifier>*</modifier></type> <name>asn1str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>temp_name</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>klass</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLASS_UNIVERSAL</name></expr>:</case> 
<switch>switch <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TAG_EOC</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"EOC"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_BOOLEAN</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BOOLEAN"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>object</name><operator>-&gt;</operator><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TAG_INTEGER</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"INTEGER"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_print_hex</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_print_hexdump_padded</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TAG_BITSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BIT_STRING"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_print_hex</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_print_hexdump_padded</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TAG_OCTETSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"OCTET_STRING"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_is_printable_limited</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_print_hex</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_print_hexdump_padded</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TAG_NULL</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_OID</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"OBJECT_IDENTIFIER"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_OBJDESCRIPTOR</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"OBJECT_DESCRIPTOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_EXTERNAL</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"EXTERNAL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_REAL</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"REAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_print_hexdump_padded</name> <argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_ENUMERATED</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ENUMERATED"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_EMBEDDED_PDV</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"EMBEDDED_PDV"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_UTF8STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"UTF8String"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SEQUENCE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_SET</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SET"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_NUMERICSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"NumericString"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_PRINTABLESTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"PrintableString"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_T61STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"TeletexString"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_VIDEOTEXSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"VideotexString"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_IA5STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IA5String"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_UTCTIME</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"UTCTime"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_GENERALIZEDTIME</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"GeneralizedTime"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_time</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_GRAPHICSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"GraphicString"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_VISIBLESTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"VisibleString"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_GENERALSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"GeneralString"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_UNIVERSALSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"UniversalString"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_BMPSTRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BMPString"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asn1str</name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Universal_%u"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>CLASS_APPLICATION</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Application_%u"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_CONTEXT</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Context [%u]"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_PRIVATE</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Private_%u"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>temp_name</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>asn1str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name><name>asn1str</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ASN1_STD_FORMAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%4"</literal><name>PFMT64d</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%4u:%2d: %s %-20s: %s\n"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>object</name><operator>-&gt;</operator><name>form</name></name></expr> ?</condition><then> <expr><literal type="string">"cons"</literal></expr> </then><else>: <expr><literal type="string">"prim"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>asn1str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_to_string</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_print_padded</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>asn1str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_asn1_to_string</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><name>root</name></expr>?</condition><then> <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_asn1_free_object</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>sector</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_asn1_free_binary</name> <parameter_list>(<parameter><decl><type><name>RASN1Binary</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
