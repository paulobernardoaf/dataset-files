<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\donut.c">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>





k;double sin()
,cos();main(){float A=
0,B=0,i,j,z[1760];char b[
1760];printf("\x1b[2J");for(;;
){memset(b,32,1760);memset(z,0,7040)
;for(j=0;6.28&gt;j;j+=0.07)for(i=0;6.28
&gt;i;i+=0.02){float c=sin(i),d=cos(j),e=
sin(A),f=sin(j),g=cos(A),h=d+2,D=1/(c*
h*e+f*g+5),l=cos (i),m=cos(B),n=s\
in(B),t=c*h*g-f* e;int x=40+30*D*
(l*h*m-t*n),y= 12+15*D*(l*h*n
+t*m),o=x+80*y, N=8*((f*e-c*d*g
)*m-c*d*e-f*g-l *d*n);if(22&gt;y&amp;&amp;
y&gt;0&amp;&amp;x&gt;0&amp;&amp;80&gt;x&amp;&amp;D&gt;z[o]){z[o]=D;;;b[o]=
".,-~:;=!*#$@"[N&gt;0?N:0];}}
printf("\x1b[H");for(k=0;1761&gt;k;k++)
putchar(k%80?b[k]:10);A+=0.04;B+=
0.02;}}




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_str_donut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>osize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>osize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>A</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>B</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name><name>z</name><index>[<expr><literal type="number">1760</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">1760</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>o</name><index>[<expr><literal type="number">1760</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">1760</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7040</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>osize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>A</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Zero</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Width</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Height</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Align</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>osize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Align</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>Zero</name></expr>;</init> <condition><expr><literal type="number">6.28</literal><operator>&gt;</operator><name>j</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">0.07</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>Zero</name></expr>;</init><condition><expr><literal type="number">6.28</literal> <operator>&gt;</operator><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">0.02</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>c</name><init>=<expr><call><name>sin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name><init>=<expr><call><name>cos</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>e</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name><init>=<expr><call><name>sin</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>g</name><init>=<expr><call><name>cos</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>h</name><init>=<expr><name>d</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>D</name><init>=<expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><name>c</name><operator>*</operator> <name>h</name><operator>*</operator><name>e</name><operator>+</operator><name>f</name><operator>*</operator><name>g</name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><call><name>cos</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><call><name>cos</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><call><name>sin</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><name>c</name><operator>*</operator><name>h</name><operator>*</operator><name>g</name><operator>-</operator><name>f</name><operator>*</operator><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>Align</name><operator>+</operator><name>Width</name><operator>*</operator><name>D</name><operator>*</operator><operator>(</operator><name>l</name><operator>*</operator><name>h</name><operator>*</operator><name>m</name><operator>-</operator><name>t</name><operator>*</operator><name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">12</literal><operator>+</operator><name>Height</name><operator>*</operator><name>D</name><operator>*</operator><operator>(</operator><name>l</name><operator>*</operator><name>h</name><operator>*</operator><name>n</name> <operator>+</operator><name>t</name><operator>*</operator><name>m</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o</name><init>=<expr><name>x</name><operator>+</operator><literal type="number">80</literal><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name><init>=<expr><literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>f</name><operator>*</operator><name>e</name><operator>-</operator><name>c</name><operator>*</operator><name>d</name><operator>*</operator><name>g</name><operator>)</operator><operator>*</operator><name>m</name><operator>-</operator><name>c</name><operator>*</operator><name>d</name><operator>*</operator><name>e</name><operator>-</operator><name>f</name><operator>*</operator><name>g</name><operator>-</operator><name>l</name><operator>*</operator><name>d</name><operator>*</operator><name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">22</literal> <operator>&gt;</operator><name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><literal type="number">80</literal><operator>&gt;</operator><name>x</name><operator>&amp;&amp;</operator><name>D</name><operator>&gt;</operator><name><name>z</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <literal type="string">" .,-:!/|S$@&amp;"</literal><index>[<expr><ternary><condition><expr><name>N</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>N</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">1760</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>k</name><operator>%</operator><literal type="number">80</literal></expr>?</condition><then><expr><name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>o</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>osize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">0.03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>+=</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">0.0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>+=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
