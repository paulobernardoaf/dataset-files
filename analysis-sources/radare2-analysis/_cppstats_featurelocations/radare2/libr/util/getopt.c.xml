<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\getopt.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADCH</name></cpp:macro> <cpp:value>(int)'?'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADARG</name></cpp:macro> <cpp:value>(int)':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>void</name></type> <name>r_getopt_init</name><parameter_list>(<parameter><decl><type><name>RGetopt</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ostr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RGetopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ostr</name></name> <operator>=</operator> <name>ostr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_getopt_next</name><parameter_list>(<parameter><decl><type><name>RGetopt</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><name>EMSG</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oli</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>reset</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>place</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name> <operator>&gt;=</operator> <name><name>opt</name><operator>-&gt;</operator><name>argc</name></name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>place</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>place</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>place</name><operator>++</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">':'</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>oli</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ostr</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>err</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>ostr</name></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: illegal option -- %c\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>BADCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>oli</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>place</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;=</operator> <operator>++</operator><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>ostr</name></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BADARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: option requires an argument -- %c\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>BADCH</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
