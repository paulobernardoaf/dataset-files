<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\table.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_table.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cons.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>Gnth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RListComparator</name></type> <name>Gcmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sortString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sortNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>RTableColumnType</name></type> <name>r_table_type_string</name> <init>= <expr><block>{ <expr><literal type="string">"string"</literal></expr>, <expr><name>sortString</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RTableColumnType</name></type> <name>r_table_type_number</name> <init>= <expr><block>{ <expr><literal type="string">"number"</literal></expr>, <expr><name>sortNumber</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RTableColumnType</name> <modifier>*</modifier></type><name>r_table_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>r_table_type_string</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>r_table_type_number</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>__table_adjust</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itemLength</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>itemLength</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itemLength</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>ncol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>itemLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ncol</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_row_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_row</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>_row</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_column_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><name>_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTableColumn</name> <modifier>*</modifier></type><name>r_table_column_clone</name><parameter_list>(<parameter><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RTableColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTable</name> <modifier>*</modifier></type><name>r_table_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>showHeader</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_table_column_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_table_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>showSum</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_free</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_add_column</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RTableColumnType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxWidth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RTableColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>maxWidth</name></name> <operator>=</operator> <name>maxWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemLength</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>itemLength</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTableRow</name> <modifier>*</modifier></type><name>r_table_row_new</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RTableRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
<return>return <expr><name>row</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__addRow</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itemLength</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>itemLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_add_row_list</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>r_table_row_new</name> <argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>totalCols</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>totalCols</name></name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_set_columnsf</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RTableColumnType</name> <modifier>*</modifier></type><name>typeString</name> <init>= <expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumnType</name> <modifier>*</modifier></type><name>typeNumber</name> <init>= <expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition><expr><operator>*</operator><name>f</name></expr>;</condition><incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>typeString</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>typeNumber</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid format string char '%c', use 's' or 'n'\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_add_rowf</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>f</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>arg</name></expr>?</condition><then><expr><name>arg</name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid format string char '%c', use 's' or 'n'\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_row_list</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_add_row</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__addRow</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__addRow</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>r_table_row_new</name> <argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>totalCols</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>totalCols</name></name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>__strbuf_append_col_aligned_fancy</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><operator>(</operator><name>RCons</name> <operator>*</operator><operator>)</operator> <name><name>t</name><operator>-&gt;</operator><name>cons</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v_line</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cons</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name> <operator>||</operator> <name><name>cons</name><operator>-&gt;</operator><name>use_utf8_curvy</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>RUNE_LINE_VERT</name></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name> <init>= <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_TABLE_ALIGN_LEFT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %-*s "</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_TABLE_ALIGN_RIGHT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %*s "</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_TABLE_ALIGN_CENTER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><operator>(</operator><name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>len</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>pad</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %-*s "</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%-*s "</literal></expr></argument>, <argument><expr><name>pad</name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ll</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__computeTotal</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_cmp</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_str_isnumber</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <call><name>sdb_atoi</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_table_tofancystring</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><operator>(</operator><name>RCons</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>cons</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>useUtf8</name> <init>= <expr><operator>(</operator><name>cons</name> <operator>&amp;&amp;</operator> <name><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>useUtf8Curvy</name> <init>= <expr><operator>(</operator><name>cons</name> <operator>&amp;&amp;</operator> <name><name>cons</name><operator>-&gt;</operator><name>use_utf8_curvy</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v_line</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name> <operator>||</operator> <name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_LINE_VERT</name></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h_line</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name> <operator>||</operator> <name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_LINE_HORIZ</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l_intersect</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name> <operator>||</operator> <name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_LINE_VERT</name></expr> </then><else>: <expr><literal type="string">")"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_intersect</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name> <operator>||</operator> <name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_LINE_VERT</name></expr> </then><else>: <expr><literal type="string">"("</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tl_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_CURVE_CORNER_TL</name></expr> </then><else>: <expr><name>RUNE_CORNER_TL</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_CURVE_CORNER_TR</name></expr> </then><else>: <expr><name>RUNE_CORNER_TR</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bl_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_CURVE_CORNER_BL</name></expr> </then><else>: <expr><name>RUNE_CORNER_BL</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"`"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>br_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNE_CURVE_CORNER_BR</name></expr> </then><else>: <expr><name>RUNE_CORNER_BR</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"'"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__table_adjust</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>__strbuf_append_col_aligned_fancy</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_line_str</name> <init>= <expr><call><name>r_str_repeat</name> <argument_list>(<argument><expr><name>h_line</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>tl_corner</name></expr></argument>, <argument><expr><name>h_line_str</name></expr></argument>, <argument><expr><name>tr_corner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_prepend</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s%s%s\n"</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>, <argument><expr><name>l_intersect</name></expr></argument>, <argument><expr><name>h_line_str</name></expr></argument>, <argument><expr><name>r_intersect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>__strbuf_append_col_aligned_fancy</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>showSum</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__computeTotal</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>l_intersect</name></expr></argument>, <argument><expr><name>h_line_str</name></expr></argument>, <argument><expr><name>r_intersect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><ternary><condition><expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>__strbuf_append_col_aligned_fancy</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>v_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>bl_corner</name></expr></argument>, <argument><expr><name>h_line_str</name></expr></argument>, <argument><expr><name>br_corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>h_line_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__strbuf_append_col_aligned</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nopad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name> <init>= <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nopad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&lt;</operator> <name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padlen</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>len2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_TABLE_ALIGN_LEFT</name></expr>:</case>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>r_str_repeat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>padlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%-*s%s"</literal></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_TABLE_ALIGN_RIGHT</name></expr>:</case>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>r_str_repeat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>padlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%*s "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_TABLE_ALIGN_CENTER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><operator>(</operator><name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>len2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>col</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>pad</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>len2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%-*s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%-*s "</literal></expr></argument>, <argument><expr><name>pad</name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ll</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_table_tostring</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>showJSON</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_table_tojson</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><operator>(</operator><name>RCons</name> <operator>*</operator><operator>)</operator> <name><name>t</name><operator>-&gt;</operator><name>cons</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h_line</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cons</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name> <operator>||</operator> <name><name>cons</name><operator>-&gt;</operator><name>use_utf8_curvy</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>RUNE_LONG_LINE_HORIZ</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__table_adjust</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>showHeader</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>nopad</name> <init>= <expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name> <init>= <expr><call><name>__strbuf_append_col_aligned</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nopad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_str_repeat</name> <argument_list>(<argument><expr><name>h_line</name></expr></argument>, <argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>nopad</name> <init>= <expr><operator>!</operator><name><name>iter2</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__strbuf_append_col_aligned</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>nopad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>showSum</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__computeTotal</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_str_repeat</name> <argument_list>(<argument><expr><name>h_line</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>nopad</name> <init>= <expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__strbuf_append_col_aligned</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nopad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_table_tocsv</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>showHeader</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\"%s\""</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\"%s\""</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_table_tojson</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>row-&gt;items</argument>, <argument>iter2</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <operator>&amp;</operator><name>r_table_type_number</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>item</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pj_drain</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_filter</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>un</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>t</name> <operator>&amp;&amp;</operator> <name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>uv</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>un</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>iter</argument>, <argument>iter2</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>nv</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>nv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>nv</name> <operator>&gt;</operator> <name>uv</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>nv</name> <operator>&lt;</operator> <name>uv</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>nv</name> <operator>==</operator> <name>uv</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>nv</name> <operator>==</operator> <name>uv</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'~'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>nn</name></expr></argument>, <argument><expr><name>un</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_add_rowf</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>RTableRow</name><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>RTableRow</name><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wa</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>Gnth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wb</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>Gnth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>Gcmp</name> <argument_list>(<argument><expr><name>wa</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_sort</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Gnth</name> <operator>=</operator> <name>nth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>col</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Gcmp</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_reverse</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Gnth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Gcmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>RTableRow</name><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>RTableRow</name><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wa</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>Gnth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wb</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>Gnth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>wa</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_sortlen</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Gnth</name> <operator>=</operator> <name>nth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Gcmp</name> <operator>=</operator> <name>cmplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>Gcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_reverse</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Gnth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Gcmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_table_column_nth</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;cols</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__resolveOperation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="char">'&gt;'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="char">'&lt;'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="char">'='</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="char">'!'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__table_column_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>RTableColumn</name><operator>*</operator><operator>)</operator><name>_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_columns</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>col_names</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>free_cols</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>free_cols</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>free_cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>


<struct>struct <name>col_source</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>oldcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dup</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>col_sources</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>col_names</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>col_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</struct>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col_sources</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>free_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>col_names</argument>, <argument>it</argument>, <argument>col_name</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fc</name> <init>= <expr><call><name>r_table_column_nth</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col_sources</name><index>[<expr><name>new_count</name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col_sources</name><index>[<expr><name>new_count</name></expr>]</index></name><operator>.</operator><name>dup</name> <operator>=</operator> <operator>!</operator><name><name>free_cols</name><index>[<expr><name>fc</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>free_cols</name><index>[<expr><name>fc</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>RTableRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>t-&gt;rows</argument>, <argument>it</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>old_items</name> <init>= <expr><name><name>row</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>new_items</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>old_items</name></expr></argument>, <argument><expr><name><name>col_sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col_sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>new_items</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>new_items</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>fit</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>old_items</argument>, <argument>fit</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>free_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>old_items</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>old_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>old_cols</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>new_cols</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_table_column_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>old_cols</name></expr></argument>, <argument><expr><name><name>col_sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col_sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>r_table_column_clone</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>new_cols</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>new_cols</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>old_cols</argument>, <argument>it</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>free_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_column_free</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>old_cols</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>old_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>col_sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>free_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_filter_columns</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>__table_column_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>col</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ncol</name> <init>= <expr><call><name>r_table_column_nth</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ncol</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>ncol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__table_special</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="string">":quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>showHeader</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="string">":json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>showJSON</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_table_query</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__table_adjust</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RTableQuery&gt; comma separated \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" colname/sort/inc sort rows by given colname\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" name/sortlen/inc sort rows by strlen()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" col0/cols/col1/col2 select cols\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" col0/gt/0x800 grep rows matching col0 &gt; 0x800\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" col0/lt/0x800 grep rows matching col0 &lt; 0x800\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" col0/eq/0x800 grep rows matching col0 == 0x800\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" name/str/warn grep rows matching col(name).str(warn)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" name/strlen/3 grep rows matching strlen(col) == X\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" name/minlen/3 grep rows matching strlen(col) &gt; X\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" name/maxlen/3 grep rows matching strlen(col) &lt; X\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" size/sum sum all the values of given column\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" :json .tostring() == .tojson()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" :quiet do not print column names header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qq</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>queries</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>qq</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>queries</argument>, <argument>iter</argument>, <argument>query</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>columnName</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__table_special</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>r_table_column_nth</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>columnName</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>columnName</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid column name (%s) for (%s)\n"</literal></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>operation</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_sort</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>operand</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"sortlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_sortlen</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>operand</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"join"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>operand</name></expr>?</condition><then><expr><name>operand</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_prepend</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"strlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>operand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"minlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>operand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"maxlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>operand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>operand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><literal type="string">"cols"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>operand</name></expr>?</condition><then><expr><name>operand</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_prepend</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><call><name>__resolveOperation</name> <argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid operation (%s)\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_table_filter</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>qq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__table_adjust</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_table_align</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_hide_header</name> <parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>showHeader</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_table_visual_list</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>seek</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>mul</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><operator>(</operator><name>RCons</name> <operator>*</operator><operator>)</operator> <name><name>table</name><operator>-&gt;</operator><name>cons</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>showHeader</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h_line</name> <init>= <expr><ternary><condition><expr><name><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name></expr> ?</condition><then> <expr><name>RUNE_LONG_LINE_HORIZ</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><ternary><condition><expr><name><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name></expr> ?</condition><then> <expr><name>UTF_BLOCK</name></expr> </then><else>: <expr><literal type="string">"#"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_table_set_columnsf</name> <argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sssssss"</literal></expr></argument>, <argument><expr><literal type="string">"No."</literal></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><literal type="string">"perms"</literal></expr></argument>, <argument><expr><literal type="string">"extra"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>info</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mul</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>info</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>pos</name> <init>= <expr><name>min</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>mul</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>npos</name> <init>= <expr><name>min</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mul</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name> <operator>&lt;</operator> <name>npos</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>&gt;</operator> <name>pos</name><operator>)</operator></expr>
?</condition><then> <expr><name>block</name></expr></then><else>: <expr><name>h_line</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>va</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_table_add_rowf</name> <argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sssssss"</literal></expr></argument>,
<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>r_itv_contain</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vitv</name></name></expr></argument>, <argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vitv</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>b</name></expr></argument>,
<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>vitv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>perm</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator></expr>?</condition><then><expr><name><name>info</name><operator>-&gt;</operator><name>extra</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>?</condition><then><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_table_add_rowf</name> <argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sssssss"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>r_itv_contain</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pitv</name></name></expr></argument>, <argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pitv</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>,
<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pitv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>perm</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>extra</name></name><operator>)</operator></expr>?</condition><then><expr><name><name>info</name><operator>-&gt;</operator><name>extra</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>?</condition><then><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seek</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>j</name> <operator>*</operator> <name>mul</name><operator>)</operator> <operator>+</operator> <name>min</name> <operator>&gt;=</operator> <name>seek</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>j</name> <operator>*</operator> <name>mul</name><operator>)</operator> <operator>+</operator> <name>min</name> <operator>&lt;=</operator> <name>seek</name> <operator>+</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"^"</literal></expr> </then><else>: <expr><name>h_line</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_table_add_rowf</name> <argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sssssss"</literal></expr></argument>, <argument><expr><literal type="string">"=&gt;"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>seek</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

R_API RTable *r_table_clone(RTable *t) {

return NULL;
}

R_API RTable *r_table_push(RTable *t) {

return NULL;
}

R_API RTable *r_table_pop(RTable *t) {

return NULL;
}

R_API void r_table_fromjson(RTable *t, const char *csv) {

}

R_API void r_table_fromcsv(RTable *t, const char *csv) {

}

R_API char *r_table_tohtml(RTable *t) {

return NULL;
}

R_API void r_table_transpose(RTable *t) {

}

R_API void r_table_format(RTable *t, int nth, RTableColumnType *type) {


}


R_API ut64 r_table_reduce(RTable *t, int nth) {

return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
