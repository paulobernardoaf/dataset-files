<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\bitmap.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_TEST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITWORD_BITS</name></cpp:macro> <cpp:value>(sizeof(RBitword) * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITWORD_BITS_MASK</name></cpp:macro> <cpp:value>(BITWORD_BITS - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITWORD_MULT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((bit) + (BITWORD_BITS_MASK)) &amp; ~(BITWORD_BITS_MASK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITWORD_TEST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&gt;&gt;(y)) &amp; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_WORD_COUNT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITWORD_MULT(bit) &gt;&gt; BITWORD_BITS_SHIFT)</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>RBitmap</name> <modifier>*</modifier></type><name>r_bitmap_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><call><name>BITMAP_WORD_COUNT</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBitword</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bitmap_set_bytes</name><parameter_list>(<parameter><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bitmap_free</name><parameter_list>(<parameter><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bitmap_set</name><parameter_list>(<parameter><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <name>BITWORD_BITS_SHIFT</name><operator>)</operator></expr>]</index></name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name>RBitword</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITWORD_BITS_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bitmap_unset</name><parameter_list>(<parameter><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <name>BITWORD_BITS_SHIFT</name><operator>)</operator></expr>]</index></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><operator>(</operator><name>RBitword</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITWORD_BITS_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bitmap_test</name><parameter_list>(<parameter><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBitword</name></type> <name>bword</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>bitmap</name><index>[ <expr><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <name>BITWORD_BITS_SHIFT</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>BITWORD_TEST</name> <argument_list>(<argument><expr><name>bword</name></expr></argument>, <argument><expr><operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITWORD_BITS_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BITMAP_TEST</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VALUE</name></cpp:macro> <cpp:value>(2343 + 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>test_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">543</literal></expr>,<expr><literal type="number">2343</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_values_len</name></cpp:macro> <cpp:value>(sizeof(test_values)/sizeof(uint32_t))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_values</name><parameter_list>(<parameter><decl><type><name>Bitmap</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_bitmap_set</name> <argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unset_values</name><parameter_list>(<parameter><decl><type><name>Bitmap</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_values</name><parameter_list>(<parameter><decl><type><name>Bitmap</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_bitmap_test</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>is_set</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Value not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Bitmap</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>bitmap_new</name><argument_list>(<argument><expr><name>MAX_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_values</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>test_values</name></expr></argument>, <argument><expr><name>test_values_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>test_values</name></expr></argument>, <argument><expr><name>test_values_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unset_values</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>test_values</name></expr></argument>, <argument><expr><name>test_values_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>test_values</name></expr></argument>, <argument><expr><name>test_values_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
