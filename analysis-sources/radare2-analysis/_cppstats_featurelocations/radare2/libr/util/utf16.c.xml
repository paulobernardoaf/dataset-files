<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\util\utf16.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>


<function><type><name>R_API</name> <name>int</name></type> <name>r_utf16_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bigendian</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><operator>!</operator><name>bigendian</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><operator>!</operator><name>high</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>high</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xdc</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>high</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xdc</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xdc</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ptr</name><index>[<expr><name>high</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>ptr</name><index>[<expr><name>low</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>high</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>ptr</name><index>[<expr><name>low</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator>
<operator>+</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>high</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>high</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>ptr</name><index>[<expr><name>low</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>ptr</name><index>[<expr><name>low</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_utf16le_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_utf16_decode</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptrlen</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_utf16be_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_utf16_decode</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptrlen</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_utf16le_encode</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>RRune</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RRune</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0xd800</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0xdc00</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>high</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>high</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>low</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>low</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
