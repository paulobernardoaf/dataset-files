<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\cons\rgb.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>value_range</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_color_table</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x008000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x808000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x000080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x800080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x008080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0c0c0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x808080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00ffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffff</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">216</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>value_range</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">36</literal><operator>)</operator> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>value_range</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">6</literal><operator>)</operator> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>value_range</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">232</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lookup_rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>color</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>color_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>color</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>__approximate_rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>grey</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>grey</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">232</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>r</name> <operator>/</operator> <operator>(</operator><literal type="number">255</literal> <operator>/</operator> <literal type="number">24.1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
const double M = 16;
double R = r;
double G = g;
double B = b;
R = R /256 * 216;
R /= 256 * 216;
R /= 256 * 216;
r = R = R_DIM (R / 16, 0, 16);
g = G = R_DIM (G / 16, 0, 16);
b = B = R_DIM (B / 16, 0, 16);
r &amp;= 0xff;
g &amp;= 0xff;
b &amp;= 0xff;
return (ut32)((G * M * M) + (g * M) + b) + 16;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><literal type="number">256.0</literal> <operator>/</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>r</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>g</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>b</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">36</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>__lookup_rgb</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>__approximate_rgb</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__unrgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>color</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>color</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>g</name> <operator>=</operator> <operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rgb</name> <init>= <expr><name><name>color_table</name><index>[<expr><name>color</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_rgb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>color_table</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_color_table</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_rgb_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>isbg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bold</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>bold</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <expr_stmt><expr><name>isbg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <expr_stmt><expr><name>isbg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETRGB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (r) *r = (x); if (g) *g = (y); if (b) *b = (z)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name>bold</name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unrgb</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>isbg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'7'</literal></expr>:</case> <expr_stmt><expr><call><name>SETRGB</name> <argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str_off</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RColor</name></type> <name>rc</name> <init>= <expr><name>RColor_BLACK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>id16</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<return>return <expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cons_rgb_gen</name><parameter_list>(<parameter><decl><type><name>RConsColorMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>st8</name></type> <name>id16</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>fgbg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>==</operator> <name>ALPHA_BG</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">48</literal></expr></then><else>: <expr><literal type="number">38</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x1b'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>attr</name></expr>;</condition> <incr><expr><name>attr</name> <operator>&amp;=</operator> <name>attr</name> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>outstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>attr</name> <operator>&amp;</operator> <operator>-</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_CONS_ATTR_BOLD</name></expr>:</case> <expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_CONS_ATTR_DIM</name></expr>:</case> <expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_CONS_ATTR_ITALIC</name></expr>:</case> <expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'3'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_CONS_ATTR_UNDERLINE</name></expr>:</case> <expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'4'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_CONS_ATTR_BLINK</name></expr>:</case> <expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>outstr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR_MODE_256</name></expr>:</case> 
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>outstr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%d;5;%dm"</literal></expr></argument>, <argument><expr><name>fgbg</name></expr></argument>, <argument><expr><call><name>rgb</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_MODE_16M</name></expr>:</case> 
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>outstr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%d;2;%d;%d;%dm"</literal></expr></argument>, <argument><expr><name>fgbg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_MODE_16</name></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>ut8</name></type> <name>bright</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fgbg</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id16</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>id16</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>id16</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bright</name> <operator>=</operator> <ternary><condition><expr><name>id16</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">60</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bright</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">53</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">60</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&gt;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>g</name> <operator>&gt;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&gt;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>g</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&gt;=</operator> <name>k</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>g</name> <operator>&gt;=</operator> <name>k</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&gt;=</operator> <name>k</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>g</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>outstr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%dm"</literal></expr></argument>, <argument><expr><name>fgbg</name> <operator>+</operator> <name>bright</name> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>written</name> <operator>&gt;=</operator> <name>sz</name> <operator>-</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str_mode</name><parameter_list>(<parameter><decl><type><name>RConsColorMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rcolor</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>outstr</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>ALPHA_RESET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>outstr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>ALPHA_FGBG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_rgb_gen</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALPHA_BG</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r2</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g2</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b2</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>id16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_gen</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>outstr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,
<argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>id16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>outstr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_cons_rgb_str_mode</name> <argument_list>(<argument><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>, <argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_tostring</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"white"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"red"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"green"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"blue"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"yellow"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"cyan"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"magenta"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>str</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
