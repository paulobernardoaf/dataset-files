<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\cons\stiv.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XY</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( b+((y)*(w*3))+(x*3) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;0)?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ABS((x)) * (y))</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>renderer</name>)<parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reduce8</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>colors_len</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>select</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>odistance</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>colors</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xd0</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x10</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x10</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xf5</literal></expr>,<expr><literal type="number">0x3a</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xf0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xfb</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0xf8</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0xf0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0xf0</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>/=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>/=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>/=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>g</name><operator>&lt;</operator><literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&lt;</operator><literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>&gt;</operator><literal type="number">200</literal><operator>&amp;&amp;</operator> <name>g</name><operator>&gt;</operator><literal type="number">200</literal><operator>&amp;&amp;</operator> <name>b</name><operator>&gt;</operator><literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">7</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>odistance</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>colors_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>=
<expr><call><name>POND</name> <argument_list>(<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>POND</name> <argument_list>(<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>g</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>POND</name> <argument_list>(<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>odistance</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>distance</name> <operator>&lt;</operator> <name>odistance</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>odistance</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>select</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>select</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_ansi</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>reduce8</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%dm"</literal></expr></argument>, <argument><expr><name>color</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>fg</name></expr>?</condition><then><expr><literal type="number">30</literal></expr></then><else>:<expr><literal type="number">40</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>r</name><operator>/</operator><literal type="number">50.6</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>g</name><operator>/</operator><literal type="number">50.6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b</name><operator>/</operator><literal type="number">50.6</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>r</name><operator>*</operator><literal type="number">36</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name><operator>*</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_256</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;5;%dm"</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><call><name>rgb</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;5;%dm"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><call><name>rgb</name> <argument_list>(<argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_rgb</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[38;2;%d;%d;%dm"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[48;2;%d;%d;%dm"</literal></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_greyscale</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>color1</name></decl>, <decl><type ref="prev"/><name>color2</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<expr_stmt><expr><name>color1</name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color2</name> <operator>=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">231</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>color1</name><operator>/</operator><literal type="number">10.3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name><operator>&lt;</operator><literal type="number">232</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">232</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;5;%dm"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">231</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>color2</name><operator>/</operator><literal type="number">10.3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name><operator>&lt;</operator><literal type="number">232</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">232</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;5;%dm"</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_ascii</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><literal type="string">" `.,-:+*%$#"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>pal_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p</name><operator>+</operator><name>q</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">255</literal><operator>/</operator><name>pal_len</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>pal_len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>pal_len</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>pal</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dorender</name> <parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>XY</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>XY</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name><operator>&gt;</operator> <operator>(</operator><name>buf</name><operator>+</operator><name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>renderer</name> <argument_list>(<argument><expr><name>cb_printf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>renderer</name> <operator>!=</operator> <name>render_ascii</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_ascii</name> <argument_list>(<argument><expr><name>cb_printf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>renderer</name><operator>==</operator><name>render_ascii</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"\n"</literal></expr></then><else>:<expr><literal type="string">"\x1b[0m\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selectrenderer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>renderer</name> <operator>=</operator> <name>render_ascii</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name>renderer</name> <operator>=</operator> <name>render_ansi</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <expr_stmt><expr><name>renderer</name> <operator>=</operator> <name>render_greyscale</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <expr_stmt><expr><name>renderer</name> <operator>=</operator> <name>render_256</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>renderer</name> <operator>=</operator> <name>render_rgb</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>bufsz</name> <operator>/</operator> <name>width</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>selectrenderer</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dorender</name> <argument_list>(<argument><expr><name>r_cons_printf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int
main(int argc, const char **argv) {
ut8 *buf, *c, *d;
int n, x, y, w, h, imgsz, readsz;
if (argc&lt;3) {
printf ("stiv . suckless terminal image viewer\n");
printf ("Usage: stiv [width] [height] [ascii|ansi|grey|256|rgb] &lt; rgb24\n");
return 1;
}
w = atoi (argv[1]);
h = atoi (argv[2]);
if (argc&gt;3) {
selectrenderer (argv[3]);
} else renderer = render_rgb;
if (w&lt;1 || h&lt;1) {
printf ("Invalid arguments\n");
return 1;
}
imgsz = w * h * 3;
buf = malloc (imgsz);
readsz = 0;
do {
n = read(0, buf+readsz, imgsz);
if (n&lt;1) break;
readsz += n;
} while (readsz &lt; imgsz);

dorender (buf, readsz, w, h);

free (buf);
return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
