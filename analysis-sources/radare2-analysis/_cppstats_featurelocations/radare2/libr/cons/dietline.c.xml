<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\cons\dietline.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_win_printf (false, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UTF8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_line_readchar_win</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UTF8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_nullstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>word_break_characters</name><index>[]</index></name> <init>= <expr><literal type="string">"\t\n ~`!@#$%^&amp;*()-_=+[]{}\\|;:\"'&lt;&gt;,./"</literal></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><enum>enum <block>{
<decl><name>MINOR_BREAK</name></decl>,
<decl><name>MAJOR_BREAK</name></decl>
}</block></enum></type> <name>BreakMode</name>;</typedef>

<decl_stmt><decl><type><name>bool</name></type> <name>enable_yank_pop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_word_break_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MAJOR_BREAK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>word_break_characters</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name><name>word_break_characters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>word_break_characters</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>backward_kill_word</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>backward_kill_Word</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kill_word</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kill_Word</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>paste</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>-</operator> <name>cursor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>enable_yank_pop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unix_word_rubout</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>


</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>


</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inithist</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>R_LINE_HISTSIZE</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_line_dietline_init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>completion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inithist</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>echo</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_line_readchar_utf8</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<return>return <expr><call><name>r_line_readchar_win</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if ((t = read (0, s, 1)) != 1) {
return t;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>r_cons_controlz</name> <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>len</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>r_line_readchar_win</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list> <block>{<block_content> 
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>irInBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>bCtrl</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>zerosep</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rsz</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rsz</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<label><name>do_it_again</name>:</label>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ReadConsoleInput</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irInBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>UnicodeChar</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8_l</name> <argument_list>(<argument><expr><operator>(</operator><name>PTCHAR</name><operator>)</operator><operator>&amp;</operator><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy_s</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>bCtrl</name> <operator>=</operator> <name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bCtrl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x31</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VK_UP</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VK_DOWN</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VK_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VK_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VK_PRIOR</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>VK_NEXT</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'6'</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>VK_DELETE</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'3'</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>VK_HOME</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>VK_END</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt> <break>break;</break> 
<default>default:</default> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>do_it_again</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy_s</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_set_hist_callback</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>RLineHistoryUpCb</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>RLineHistoryDownCb</name></type> <name>down</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>cb_history_up</name></name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>cb_history_down</name></name> <operator>=</operator> <name>down</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>offset_hist_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sdbshell_hist_iter</name></name> <operator>=</operator> <call><name>r_list_head</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>sdbshell_hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_cmd_up</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>hist_up</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>line</name><operator>-&gt;</operator><name>hist_up</name></name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inithist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><operator>--</operator><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_cmd_down</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>hist_down</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>line</name><operator>-&gt;</operator><name>hist_down</name></name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inithist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name><name>line</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inithist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name> <operator>==</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_line_hist_up</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>cb_history_up</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>I</name><operator>.</operator><name>cb_history_up</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_line_hist_down</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>cb_history_down</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>I</name><operator>.</operator><name>cb_history_down</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_hist_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inithist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_list</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inithist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s #!%d\n"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_line_hist_free</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sdbshell_hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>R_LINE_BUFSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_hist_add</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_str_lastbut</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sys_mkdirp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"could not save history into %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_chop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_draw</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>pos_y</name></decl>, <decl><type ref="prev"/><name>pos_x</name> <init>= <expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>R_SELWIDGET_DIR_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos_y</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos_y</name> <operator>=</operator> <call><name>r_cons_get_cur_line</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_y</name> <operator>+</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_pad</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_y</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>background_color</name> <init>= <expr><ternary><condition><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr> ?</condition><then> <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>widget_bg</name></name></expr> </then><else>: <expr><name>Color_INVERT_RESET</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>selected_color</name> <init>= <expr><ternary><condition><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr> ?</condition><then> <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>widget_sel</name></name></expr> </then><else>: <expr><name>Color_INVERT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>scrollbar</name> <init>= <expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>&gt;</operator> <name>R_SELWIDGET_MAXH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrollbar_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>scrollbar_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollbar</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrollbar_y</name> <operator>=</operator> <operator>(</operator><name>R_SELWIDGET_MAXH</name> <operator>*</operator> <operator>(</operator><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollbar_l</name> <operator>=</operator> <operator>(</operator><name>R_SELWIDGET_MAXH</name> <operator>*</operator> <name>R_SELWIDGET_MAXH</name><operator>)</operator> <operator>/</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>R_SELWIDGET_DIR_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>pos_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos_y</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>pos_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos_y</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr> ?</condition><then> <expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>y</name> <operator>+</operator> <name>scroll</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>==</operator> <name>y</name> <operator>+</operator> <name>scroll</name></expr> ?</condition><then> <expr><name>selected_color</name></expr> </then><else>: <expr><name>background_color</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%-*.*s"</literal></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollbar</name> <operator>&amp;&amp;</operator> <call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name>scrollbar_y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>scrollbar_y</name> <operator>+</operator> <name>scrollbar_l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>Color_INVERT</name><literal type="string">" "</literal><name>Color_INVERT_RESET</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>pos_x</name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>pos_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>Color_RESET_BG</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sel_widget</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>R_SELWIDGET_DIR_UP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>+</operator> <name>steps</name></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name>height</name> <operator>-</operator> <operator>(</operator><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name>steps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sel_widget</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>R_SELWIDGET_DIR_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name>steps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>+</operator> <name>steps</name></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name>height</name> <operator>-</operator> <operator>(</operator><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_rline_task</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_clear_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_erase</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sel_widget</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>&amp;&amp;</operator> <name><name>cons</name><operator>-&gt;</operator><name>event_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>event_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cons</name><operator>-&gt;</operator><name>cb_task_oneshot</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>print_rline_task</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R_CONS_CLEAR_FROM_CURSOR_TO_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_select</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sel_widget</name> <operator>&amp;&amp;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>&lt;</operator> <name><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>sp</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>delta</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sel_widget</name><operator>-&gt;</operator><name>options</name><index>[<expr><name><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_erase</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>selection_widget_update</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_pvector_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_erase</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSelWidget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name> <operator>=</operator> <name>sel_widget</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>selection</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>prompt_type</name></name> <operator>==</operator> <name>R_LINE_PROMPT_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_SELWIDGET_DIR_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_SELWIDGET_DIR_UP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_line_autocomplete</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>opt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.82</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>run</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>completion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt_type</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>run_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_pvector_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>completion</name><operator>.</operator><name>opt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>complete_common</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_update</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_sub_str_lchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_sub_str_lchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_sub_str_lchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>plen</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_word</name> <init>= <expr><call><name>r_sub_str_rchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><ternary><condition><expr><name>end_word</name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then>
<expr><name>end_word</name></expr></then><else>: <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>largv0</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_t</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>largv0</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>largv0</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len_t</name> <operator>&lt;</operator> <name>plen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len_t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>largv0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>tt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>tt</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>largv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>largv0</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>largv0</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len_t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>largv0</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_common_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_t</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>root</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>root</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>min_common_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_common_len</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>len_t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>min_common_len</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>tt</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>tt</name> <operator>+</operator> <name>len_t</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>min_common_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len_t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>min_common_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>min_common_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>prompt_type</name></name> <operator>!=</operator> <name>R_LINE_PROMPT_DEFAULT</name> <operator>||</operator> <name><name>cons</name><operator>-&gt;</operator><name>show_autocomplete_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_update</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>complete_common</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sep</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>r_cons_win_printf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>+</operator> <name>l</name> <operator>&gt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <operator>(</operator><name>cols</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>cols</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>col</name> <operator>&gt;</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%-*s "</literal></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <name>sep</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>slen</name> <operator>&gt;</operator> <name>col</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name>slen</name> <operator>+</operator> <name>sep</name><operator>)</operator></expr></then><else>: <expr><operator>(</operator><name>col</name> <operator>+</operator> <name>sep</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_readline</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_line_readline_cb</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rotate_kill_ring</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable_yank_pop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>kill_ring</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>kill_ring_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>kill_ring_ptr</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>kill_ring_ptr</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>kill_ring_ptr</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>kill_ring</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>kill_ring</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>kill_ring_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paste</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__delete_next_char</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_utf8_charsize</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__delete_prev_char</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_utf8_charsize_prev</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <call><name>r_str_utf8_charsize_last</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>delete_till_end</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__print_prompt</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chars</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cols</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>columns</name> <operator>-</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_type</name></name> <operator>==</operator> <name>R_LINE_PROMPT_OFFSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_clear_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r%s%s"</literal></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r%s"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"&lt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>cols</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&lt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__move_cursor_right</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>
?</condition><then> <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <call><name>r_str_utf8_charsize</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__move_cursor_left</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>
?</condition><then> <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <call><name>r_str_utf8_charsize_prev</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_b</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_B</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_W</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_w</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_E</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vi_cmd_e</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAJOR_BREAK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__update_prompt_color</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BEGIN</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>END</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>prompt_mode</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONTROL_MODE</name></expr>:</case>
<expr_stmt><expr><name>BEGIN</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>invalid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INSERT_MODE</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>BEGIN</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>prompt</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>BEGIN</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>prompt</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>END</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>prompt</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>BEGIN</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__vi_mode</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>CONTROL_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__update_prompt_color</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gcomp_line</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gcomp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__print_prompt</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>!=</operator> <name>CONTROL_MODE</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>__update_prompt_color</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>rep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <operator>(</operator><name>rep</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <ternary><condition><expr><name>rep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rep</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"^C\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><call><name>delete_till_end</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__delete_next_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>INSERT_MODE</name></expr>;</expr_stmt> 
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward_kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>kill_Word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward_kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><call><name>kill_Word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><call><name>kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><call><name>backward_kill_Word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>backward_kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>__delete_prev_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>__delete_next_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><call><name>delete_till_end</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch> <expr_stmt><expr><call><name>__print_prompt</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>INSERT_MODE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>INSERT_MODE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt> <break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paste</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>INSERT_MODE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__move_cursor_left</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_E</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_e</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_B</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_b</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_W</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<while>while <condition>(<expr><name>rep</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vi_cmd_w</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> <break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><call><name>r_cons_arrow_to_hjkl</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_line_hist_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_line_hist_down</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_left</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_readline_cb</name><parameter_list>(<parameter><decl><type><name>RLineReadCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>columns</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gcomp_line</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gcomp_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>yank_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gcomp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>utflen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>key</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_ed_cmd</name></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_buflen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>||</operator> <operator>(</operator><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_status</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>vi</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__vi_mode</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>contents</name></name></expr></argument>,
<argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>contents</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></then><else>: <expr><name>r_line_nullstr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__print_prompt</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>yank_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cbret</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cbret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<expr_stmt><expr><name>utflen</name> <operator>=</operator> <call><name>r_line_readchar_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utflen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>utflen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_line_readchar_win</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_clear_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>columns</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r%*c\r"</literal></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r\x1b[2K\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 

<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_left</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp_ed_cmd</name> <operator>=</operator> <call><name><name>I</name><operator>.</operator><name>cb_editor</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_ed_cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tmp_ed_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>R_LINE_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>tmp_ed_cmd</name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tmp_ed_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_ed_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"^C\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_end</name>;</goto>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"^D\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__delete_next_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</return>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[2J\x1b[0;0H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gcomp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__move_cursor_left</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_clipboard_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hClipBoard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PTCHAR</name></type> <name>clipText</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OpenClipboard</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNICODE</name></expr></cpp:if>
<expr_stmt><expr><name>hClipBoard</name> <operator>=</operator> <call><name>GetClipboardData</name> <argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>hClipBoard</name> <operator>=</operator> <call><name>GetClipboardData</name> <argument_list>(<argument><expr><name>CF_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>hClipBoard</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clipText</name> <operator>=</operator> <call><name>GlobalLock</name> <argument_list>(<argument><expr><name>hClipBoard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clipText</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>clipText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>txt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>R_LINE_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name> <argument_list>(<argument><expr><name>hClipBoard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<expr_stmt><expr><call><name>unix_word_rubout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<expr_stmt><expr><call><name>paste</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yank_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case> 
<expr_stmt><expr><call><name>rotate_kill_ring</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yank_flag</name> <operator>=</operator> <ternary><condition><expr><name>enable_yank_pop</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case> 
<expr_stmt><expr><call><name>kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> 
<expr_stmt><expr><call><name>backward_kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_down</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gcomp_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_line_hist_down</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_up</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_line_hist_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_cons_readchar_timeout</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">127</literal></expr>:</case> 
<expr_stmt><expr><call><name>backward_kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>enable_vi_mode</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__vi_mode</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_erase</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>kill_word</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>is_word_break_char</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MINOR_BREAK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_cons_readchar_timeout</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x5b</literal></expr>)</condition> <block>{<block_content> 
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> 
<expr_stmt><expr><call><name>__delete_next_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>-=</operator> <operator>(</operator><name>rows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_up</name> <argument_list>(<argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>+=</operator> <operator>(</operator><name>rows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_down</name> <argument_list>(<argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>R_SELWIDGET_MAXH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'9'</literal></expr>:</case> 
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content/>}</block></while>
<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_up</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_line_hist_up</name> <argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_down</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gcomp_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_line_hist_down</name> <argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_right</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> 
<expr_stmt><expr><call><name>__move_cursor_left</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x31</literal></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0x7e</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fkey</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x41</literal></expr>:</case>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x44</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x42</literal></expr>:</case>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x43</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>cb_fkey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>cb_fkey</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x37</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">0x48</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_up</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x34</literal></expr>:</case> 
<case>case <expr><literal type="number">0x38</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">0x46</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_down</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>options_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<case>case <expr><literal type="number">127</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__delete_prev_char</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_down</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>sel_widget</name><operator>-&gt;</operator><name>complete_common</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selection_widget_draw</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_line_autocomplete</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>selection_widget_select</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gcomp</name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gcomp_idx</name> <operator>=</operator> <name>gcomp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_end</name>;</goto>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>utflen</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>size</name> <operator>&gt;=</operator> <name>R_LINE_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>utflen</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>utflen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>utflen</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>utflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>++</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>utflen</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>utflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>utflen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <operator>(</operator><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UTF8</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>utflen</name><operator>)</operator> <operator>&lt;=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>+=</operator> <name>utflen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>prev_buflen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_buflen</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_autocomplete</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gcomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_line</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_line</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>history</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>counter</name> <operator>&gt;</operator> <name>gcomp_idx</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcomp_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r (reverse-i-search (%s)): %s\r"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>gcomp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__print_prompt</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>enable_yank_pop</name> <operator>=</operator> <ternary><condition><expr><name>yank_flag</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>_end</name>:</label>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>mouse_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r%s%s\n"</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>sel_widget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"!history"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_hist_list</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r_line_nullstr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>?</condition><then> <expr><name><name>I</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></then><else>: <expr><name>r_line_nullstr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
