<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\cons\pal.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCOLOR_AT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RColor *) (((ut8 *) &amp;(r_cons_singleton ()-&gt;context-&gt;cpal)) + keys[i].coff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_AT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(char **) (((ut8 *) &amp;(r_cons_singleton ()-&gt;context-&gt;pal)) + keys[i].off)</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>coff</name></decl>;</decl_stmt> 
}</block> <decl><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"comment"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>comment</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"usrcmt"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>usercomment</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>usercomment</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"args"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>args</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fname"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>fname</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"floc"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>floc</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>floc</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fline"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>fline</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>fline</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flag"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>flag</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"label"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>label</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>help</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flow"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>flow</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flow2"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>flow2</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>flow2</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prompt"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>prompt</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>offset</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>input</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"invalid"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>invalid</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>invalid</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"other"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>other</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b0x00"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>b0x00</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>b0x00</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b0x7f"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>b0x7f</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>b0x7f</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b0xff"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>b0xff</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>b0xff</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"math"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>math</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>math</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bin"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>bin</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"btext"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>btext</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>btext</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>push</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pop"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>pop</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crypto"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>crypto</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>crypto</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jmp"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>jmp</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>jmp</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cjmp"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>cjmp</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>cjmp</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>call</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>nop</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>nop</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ret</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"trap"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>trap</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>trap</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucall"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ucall</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ucall</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ujmp"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ujmp</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ujmp</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"swi"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>swi</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>swi</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>cmp</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reg"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>reg</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"creg"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>creg</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>creg</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"num"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>num</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>mov</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"func_var"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>func_var</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>func_var</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"func_var_type"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>func_var_type</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>func_var_type</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"func_var_addr"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>func_var_addr</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>func_var_addr</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"widget_bg"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>widget_bg</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>widget_bg</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"widget_sel"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>widget_sel</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>widget_sel</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ai.read"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ai_read</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ai_read</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ai.write"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ai_write</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ai_write</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ai.exec"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ai_exec</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ai_exec</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ai.seq"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ai_seq</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ai_seq</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ai.ascii"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>ai_ascii</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>ai_ascii</argument>)</argument_list></macro> }</block></expr>,


<expr><block>{ <expr><literal type="string">"graph.box"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_box</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_box</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.box2"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_box2</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_box2</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.box3"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_box3</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_box3</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.box4"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_box4</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_box4</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.true"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_true</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_true</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.false"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_false</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_false</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.trufae"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_trufae</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_trufae</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.current"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_current</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_current</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.traced"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_traced</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_traced</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"graph.diff.unknown"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_diff_unknown</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_diff_unknown</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.diff.new"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_diff_new</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_diff_new</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.diff.match"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_diff_match</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_diff_match</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graph.diff.unmatch"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>graph_diff_unmatch</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>graph_diff_unmatch</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gui.cflow"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>gui_cflow</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>gui_cflow</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gui.dataoffset"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>gui_dataoffset</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>gui_dataoffset</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gui.background"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>gui_background</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>gui_background</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gui.alt_background"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>gui_alt_background</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>gui_alt_background</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gui.border"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>gui_border</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>gui_border</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wordhl"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>wordhl</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>wordhl</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linehl"</literal></expr>, <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>RConsPrintablePalette</name></expr></argument>, <argument><expr><name>linehl</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_offsetof</name> <argument_list>(<argument>RConsPalette</argument>, <argument>linehl</argument>)</argument_list></macro> }</block></expr>,


<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>keys_len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>rcolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bgcode</name></decl>;</decl_stmt>
}</block> <decl><name><name>colors</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"black"</literal></expr>, <expr><name>RColor_BLACK</name></expr>, <expr><name>Color_BLACK</name></expr>, <expr><name>Color_BGBLACK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"red"</literal></expr>, <expr><name>RColor_RED</name></expr>, <expr><name>Color_RED</name></expr>, <expr><name>Color_BGRED</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"white"</literal></expr>, <expr><name>RColor_WHITE</name></expr>, <expr><name>Color_WHITE</name></expr>, <expr><name>Color_BGWHITE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"green"</literal></expr>, <expr><name>RColor_GREEN</name></expr>, <expr><name>Color_GREEN</name></expr>, <expr><name>Color_BGGREEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"magenta"</literal></expr>, <expr><name>RColor_MAGENTA</name></expr>, <expr><name>Color_MAGENTA</name></expr>, <expr><name>Color_BGMAGENTA</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yellow"</literal></expr>, <expr><name>RColor_YELLOW</name></expr>, <expr><name>Color_YELLOW</name></expr>, <expr><name>Color_BGYELLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cyan"</literal></expr>, <expr><name>RColor_CYAN</name></expr>, <expr><name>Color_CYAN</name></expr>, <expr><name>Color_BGCYAN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blue"</literal></expr>, <expr><name>RColor_BLUE</name></expr>, <expr><name>Color_BLUE</name></expr>, <expr><name>Color_BGBLUE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gray"</literal></expr>, <expr><name>RColor_GRAY</name></expr>, <expr><name>Color_GRAY</name></expr>, <expr><name>Color_BGGRAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bblack"</literal></expr>, <expr><name>RColor_BBLACK</name></expr>, <expr><name>Color_BBLACK</name></expr>, <expr><name>Color_BBGBLACK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bred"</literal></expr>, <expr><name>RColor_BRED</name></expr>, <expr><name>Color_BRED</name></expr>, <expr><name>Color_BBGRED</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bwhite"</literal></expr>, <expr><name>RColor_BWHITE</name></expr>, <expr><name>Color_BWHITE</name></expr>, <expr><name>Color_BBGWHITE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bgreen"</literal></expr>, <expr><name>RColor_BGREEN</name></expr>, <expr><name>Color_BGREEN</name></expr>, <expr><name>Color_BBGGREEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bmagenta"</literal></expr>, <expr><name>RColor_BMAGENTA</name></expr>, <expr><name>Color_BMAGENTA</name></expr>, <expr><name>Color_BBGMAGENTA</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"byellow"</literal></expr>, <expr><name>RColor_BYELLOW</name></expr>, <expr><name>Color_BYELLOW</name></expr>, <expr><name>Color_BBGYELLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bcyan"</literal></expr>, <expr><name>RColor_BCYAN</name></expr>, <expr><name>Color_BCYAN</name></expr>, <expr><name>Color_BBGCYAN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bblue"</literal></expr>, <expr><name>RColor_BBLUE</name></expr>, <expr><name>Color_BBLUE</name></expr>, <expr><name>Color_BBGBLUE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>RColor_NULL</name></expr>, <expr><name>Color_RESET</name></expr>, <expr><name>Color_RESET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>RColor_NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>rgbnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_hex_to_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_hex_to_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>r2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__cons_pal_update_event</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name> <init>= <expr><operator>(</operator><name>RColor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coff</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>color</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pal</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <call><name>r_cons_rgb_str_mode</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rgb</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"rgb:%02x%02x%02x"</literal></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_rainbow_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_rainbow_new</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_init</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>b0x00</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>b0x7f</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>b0xff</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>args</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>bin</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>btext</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>call</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BGREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>call</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ucall</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ujmp</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>cjmp</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>cmp</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>usercomment</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>creg</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>fline</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>floc</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>flow</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>flow2</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>fname</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>help</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>input</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>invalid</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>invalid</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>jmp</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>label</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>math</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>mov</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>nop</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>num</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>other</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>pop</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BMAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>pop</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>prompt</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>push</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>crypto</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BGBLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>reg</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>swi</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>trap</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>trap</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ai_read</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ai_write</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ai_exec</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ai_seq</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>ai_ascii</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>gui_cflow</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>gui_dataoffset</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>gui_background</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>gui_alt_background</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>gui_border</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>wordhl</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BGRED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>linehl</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <call><name>RCOLOR</name> <argument_list>(<argument><expr><name>ALPHA_BG</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>linehl</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <call><name>RCOLOR</name> <argument_list>(<argument><expr><name>ALPHA_BG</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>func_var</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>func_var_type</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>func_var_addr</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>widget_bg</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <call><name>RCOLOR</name> <argument_list>(<argument><expr><name>ALPHA_BG</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>widget_sel</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BGRED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_box</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_box2</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_box3</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_box4</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_true</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_false</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_trufae</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_traced</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_current</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_diff_unknown</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_diff_new</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_diff_match</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpal</name><operator>.</operator><name>graph_diff_unmatch</name></name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_cons_pal_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>__cons_pal_update_event</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>color</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pal</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>color</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_rainbow_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_copy</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>cpal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>cpal</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>cpal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>__cons_pal_update_event</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_random</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rcolor</name> <operator>=</operator> <call><name>RCOLOR_AT</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rcolor</name> <operator>=</operator> <call><name>r_cons_color_random</name> <argument_list>(<argument><expr><name>ALPHA_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_pal_update_event</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_pal_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>outcol</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>rcolor</name> <init>= <expr><operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLACK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>id16</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fgcolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bgcolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fgcolor</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fgcolor</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bgcolor</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>fgcolor</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bgcolor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bgcolor</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bgcolor</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>attr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcolor</name> <operator>=</operator> <call><name>r_cons_color_random</name> <argument_list>(<argument><expr><name>ALPHA_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sscanf</name> <argument_list>(<argument><expr><name>fgcolor</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%02hhx%02hhx%02hhx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rcolor</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rcolor</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rcolor</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error while parsing HTML color: %s\n"</literal></expr></argument>, <argument><expr><name>fgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid html color code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>, <argument><expr><literal type="string">"rgb:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fgcolor</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bgcolor</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>bgcolor</name></expr></argument>, <argument><expr><literal type="string">"rgb:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>a</name></name> <operator>|=</operator> <name>ALPHA_BG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>a</name></name> <operator>|=</operator> <name>ALPHA_BG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <call><name>rgbnum</name> <argument_list>(<argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bgcolor</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>id16</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>id16</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bgcolor</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>bgcolor</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>a</name></name> <operator>|=</operator> <name>ALPHA_BG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r2</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g2</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>id16</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rcolor</name><operator>.</operator><name>id16</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bgcode</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>attr</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bold"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>|=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"dim"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>|=</operator> <name>R_CONS_ATTR_DIM</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"italic"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>|=</operator> <name>R_CONS_ATTR_ITALIC</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"underline"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>|=</operator> <name>R_CONS_ATTR_UNDERLINE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"blink"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>|=</operator> <name>R_CONS_ATTR_BLINK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse terminal attributes: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outcol</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>outcol</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>ALPHA_BG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bgcolor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>ALPHA_BG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outcol</name> <operator>=</operator> <name>rcolor</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>outcol</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cons_pal_show_gs</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\nGreyscale:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>rcolor</name> <init>= <expr><name>RColor_BLACK</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x08</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0xee</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">0xa</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x76</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>Color_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>Color_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>bg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s rgb:%02x%02x%02x "</literal><name>Color_RESET</name></expr></argument>,
<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cons_pal_show_256</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RColor</name></type> <name>rc</name> <init>= <expr><name>RColor_BLACK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n\nXTerm colors:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <literal type="number">0x28</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>==</operator> <literal type="number">0x28</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">0x5f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">0x28</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>.</operator><name>b</name></name> <operator>==</operator> <literal type="number">0x28</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">0x5f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>g</name> <operator>+=</operator> <literal type="number">0x28</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>==</operator> <literal type="number">0x28</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">0x5f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>&lt;=</operator> <literal type="number">0x5f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>&lt;=</operator> <literal type="number">0x5f</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>Color_WHITE</name></expr></then><else>: <expr><name>Color_BLACK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>bg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s rgb:%02x%02x%02x "</literal>
<name>Color_RESET</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cons_pal_show_rgb</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>rc</name> <init>= <expr><name>RColor_BLACK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n\nRGB:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0xf</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">0xf</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">0xf</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>k</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><name>Color_WHITE</name></expr></then><else>: <expr><name>Color_BLACK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_rgb_str</name> <argument_list>(<argument><expr><name>bg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s rgb:%02x%02x%02x "</literal>
<name>Color_RESET</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>++</operator><operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_show</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s__"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>,
<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>,
<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bgcode</name></expr></argument>,
<argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<switch>switch <condition>(<expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR_MODE_256</name></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_pal_show_gs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_pal_show_256</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_MODE_16M</name></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_pal_show_gs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_pal_show_rgb</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block></struct></type> <name>RAttrStr</name>;</typedef>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hasnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name> <init>= <expr><call><name>RCOLOR_AT</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>COLOR_AT</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><name>hasnext</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\":[%d,%d,%d]%s"</literal></expr></argument>,
<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>hasnext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hasnext</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".%s%s { color: rgb(%d, %d, %d); }%s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>hasnext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".%s { color:#%02x%02x%02x }\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"ec %s rgb:%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>ALPHA_FGBG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" rgb:%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>r2</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>g2</name></name></expr></argument>, <argument><expr><name><name>rcolor</name><operator>-&gt;</operator><name>b2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>attr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RAttrStr</name></type> <name><name>attrs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>R_CONS_ATTR_BOLD</name></expr>, <expr><literal type="string">"bold"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_CONS_ATTR_DIM</name></expr>, <expr><literal type="string">"dim"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_CONS_ATTR_ITALIC</name></expr>, <expr><literal type="string">"italic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_CONS_ATTR_UNDERLINE</name></expr>, <expr><literal type="string">"underline"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_CONS_ATTR_BLINK</name></expr>, <expr><literal type="string">"blink"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>a</name></name> <operator>!=</operator> <name>ALPHA_FGBG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" ."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rcolor</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s##"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>color</name></expr></argument>,
<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_pal_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcolor</name> <operator>=</operator> <call><name>RCOLOR_AT</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>rcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons_pal_set: Invalid color %s\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_pal_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcolor</name> <operator>=</operator> <call><name>RCOLOR_AT</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>rcolor</name></expr>?</condition><then> <expr><operator>*</operator><name>rcolor</name></expr></then><else>: <expr><operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_pal_get_i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><call><name>RCOLOR_AT</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_cons_pal_get_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name>keys_len</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>keys</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_pal_len</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>keys_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_update_event</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__cons_pal_update_event</name> <argument_list>(<argument><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_rainbow_new</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_rainbow_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rainbow_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name>last</name> <operator>||</operator> <operator>!</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>last</name> <operator>==</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name><operator>)</operator></expr>
?</condition><then> <expr><name>idx</name></expr> </then><else>: <expr><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow_sz</name></name> <operator>*</operator> <name>idx</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>last</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>rainbow</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
