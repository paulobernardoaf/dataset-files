<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\cons\canvas_line.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_write(c,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_gotoxy(c,x,y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>useUtf8</name></cpp:macro> <cpp:value>(r_cons_singleton ()-&gt;use_utf8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>useUtf8Curvy</name></cpp:macro> <cpp:value>(r_cons_singleton ()-&gt;use_utf8_curvy)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTTED_LINE_HORIZ</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTTED_LINE_VERT</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DASHED_LINE_VERT</name></cpp:macro> <cpp:value>"âµ"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DASHED_LINE_HORIZ</name></cpp:macro> <cpp:value>"â´"</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>APEX_DOT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DOT_APEX</name></decl>,
<decl><name>REV_APEX_APEX</name></decl>,
<decl><name>DOT_DOT</name></decl>,
<decl><name>NRM_DOT</name></decl>,
<decl><name>NRM_APEX</name></decl>,
<decl><name>DOT_NRM</name></decl>,
<decl><name>REV_APEX_NRM</name></decl>,
<decl><name>NRM_NRM</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>utf8_line_vert</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>dot_style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>dotted_lines</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>dot_style</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DOT_STYLE_NORMAL</name></expr>:</case> <return>return <expr><name>RUNECODESTR_LINE_VERT</name></expr>;</return>
<case>case <expr><name>DOT_STYLE_CONDITIONAL</name></expr>:</case> <return>return <expr><name>DOTTED_LINE_VERT</name></expr>;</return>
<case>case <expr><name>DOT_STYLE_BACKEDGE</name></expr>:</case> <return>return <expr><name>DASHED_LINE_VERT</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>RUNECODESTR_LINE_VERT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>utf8_line_horiz</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>dot_style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>dotted_lines</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>dot_style</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DOT_STYLE_NORMAL</name></expr>:</case> <return>return <expr><name>RUNECODESTR_LINE_HORIZ</name></expr>;</return>
<case>case <expr><name>DOT_STYLE_CONDITIONAL</name></expr>:</case> <return>return <expr><name>DOTTED_LINE_HORIZ</name></expr>;</return>
<case>case <expr><name>DOT_STYLE_BACKEDGE</name></expr>:</case> <return>return <expr><name>DASHED_LINE_HORIZ</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>RUNECODESTR_LINE_HORIZ</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_line_style</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>,
<parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isvert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LINE_UNCJMP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_trufae</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LINE_TRUE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_true</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LINE_FALSE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_false</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LINE_NONE</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_trufae</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>symbol</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LINE_UNCJMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isvert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LINE_TRUE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LINE_FALSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LINE_NOSYM_VERT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><call><name>utf8_line_vert</name> <argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LINE_NOSYM_HORIZ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LINE_NONE</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_horizontal_line</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dot_style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l_corner</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r_corner</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>APEX_DOT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DOT_APEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>REV_APEX_APEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"`"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DOT_DOT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>r_corner</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>NRM_DOT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>NRM_APEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DOT_NRM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_TL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_TL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>REV_APEX_NRM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8Curvy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CURVE_CORNER_BL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>RUNECODESTR_CORNER_BL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <literal type="string">"`"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_corner</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>NRM_NRM</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>r_corner</name> <operator>=</operator> <call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l_corner</name> <operator>=</operator> <name>r_corner</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>l_corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hline</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><call><name>utf8_line_horiz</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>hline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>r_corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_vertical_line</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dot_style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vline</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><call><name>utf8_line_vert</name> <argument_list>(<argument><expr><name>dot_style</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>y</name> <operator>+</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>vline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_diagonal</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>x2</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>y2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name> <operator>=</operator> <name>DOT_STYLE_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_canvas_line_square</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>apply_line_style</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>y2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>chizzle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>abs</name> <argument_list>(<argument><expr><name>x2</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>abs</name> <argument_list>(<argument><expr><name>y2</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>x2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <name>y2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><name>dx</name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>dy</name></expr>?</condition><then><expr><name>dx</name></expr></then><else>:<expr><operator>-</operator><name>dy</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e2</name></decl>;</decl_stmt>


<label><name>loop</name>:</label>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <operator>-</operator><name>dx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>chizzle</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>+=</operator><name>sx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>dy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>chizzle</name><operator>=</operator><literal type="char">'|'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e2</name> <operator>&lt;</operator> <name>dy</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>e2</name> <operator>&gt;</operator> <operator>-</operator><name>dx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>chizzle</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sx</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="char">'\\'</literal></expr></then><else>:<expr><literal type="char">'/'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>chizzle</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sx</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="char">'/'</literal></expr></then><else>:<expr><literal type="char">'\\'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>y2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>chizzle</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>sy</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useUtf8</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>chizzle</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"â¯"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>chizzle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dx</name> <operator>/</operator> <name>dy</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_square</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_x</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_x</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_y</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_line_style</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>-</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hl</name> <init>= <expr><name>diff_y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl2</name> <init>= <expr><name>diff_y</name> <operator>-</operator> <name>hl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>diff_x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apex_style</name> <init>= <expr><ternary><condition><expr><name>min_x</name> <operator>==</operator> <name>x</name></expr> ?</condition><then> <expr><name>APEX_DOT</name></expr> </then><else>: <expr><name>DOT_APEX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>hl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hl2</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>hl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>apex_style</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>==</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DOT_DOT</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>REV_APEX_APEX</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>diff_y</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_square_defined</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bendpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isvert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>linemode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_canvas_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_x</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_x</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_y</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_y</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_line_style</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>isvert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isvert</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>diff_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y2</name> <operator>-</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>bendpoint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><name>diff_y</name> <operator>-</operator> <name>h1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>diff_x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apex_style</name> <init>= <expr><ternary><condition><expr><name>min_x</name> <operator>==</operator> <name>x</name></expr> ?</condition><then> <expr><name>APEX_DOT</name></expr> </then><else>: <expr><name>DOT_APEX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>bendpoint</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>apex_style</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>==</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DOT_DOT</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>REV_APEX_APEX</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>diff_y</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>==</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff_x</name></expr></argument>, <argument><expr><name>NRM_NRM</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x2</name> <operator>-</operator> <name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>bendpoint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w2</name> <init>= <expr><name>diff_x</name> <operator>-</operator> <name>w1</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>y2</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>NRM_DOT</name></expr> </then><else>: <expr><name>NRM_APEX</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w1</name></expr></argument>, <argument><expr><name>min_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>diff_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>y2</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>DOT_NRM</name></expr> </then><else>: <expr><name>REV_APEX_NRM</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_back_edge</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ybendpoint1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xbendpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ybendpoint2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isvert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>linemode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_canvas_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_x1</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_x2</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_x1</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_x2</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>x2</name> <operator>-</operator> <name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_y</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>ybendpoint1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>ybendpoint2</name><operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><ternary><condition><expr><name>diff_x1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>diff_x1</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w2</name> <init>= <expr><ternary><condition><expr><name>diff_x2</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>diff_x2</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_line_style</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>isvert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isvert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ybendpoint1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x1</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>ybendpoint1</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>REV_APEX_APEX</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>ybendpoint2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>diff_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>min_x2</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>ybendpoint2</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>DOT_DOT</name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>ybendpoint2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ybendpoint2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>miny1</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>miny2</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_y1</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_y2</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>y2</name> <operator>-</operator> <name>xbendpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>ybendpoint1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>xbendpoint</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>NRM_DOT</name></expr> </then><else>: <expr><name>NRM_APEX</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ybendpoint1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>miny1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>diff_y1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>ybendpoint2</name></expr></argument>, <argument><expr><name>xbendpoint</name></expr></argument>, <argument><expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ybendpoint1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x2</name> <operator>-</operator> <name>ybendpoint2</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>xbendpoint</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>REV_APEX_APEX</name></expr> </then><else>: <expr><name>DOT_DOT</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vertical_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>ybendpoint2</name></expr></argument>, <argument><expr><name>miny2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>diff_y2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_horizontal_line</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>ybendpoint2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>ybendpoint2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>xbendpoint</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>DOT_NRM</name></expr> </then><else>: <expr><name>REV_APEX_NRM</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>dot_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
