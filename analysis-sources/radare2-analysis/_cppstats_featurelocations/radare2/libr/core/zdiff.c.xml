<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\zdiff.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>matchBytes</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>matchGraph</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name><operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_zdiff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>c2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Diff %d %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>la</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>a</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>b</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si2</name></decl>;</decl_stmt>


<macro><name>r_list_foreach</name> <argument_list>(<argument>la</argument>, <argument>itr</argument>, <argument>si</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lb</argument>, <argument>itr2</argument>, <argument>si2</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>si2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>matchBytes</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" B %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>matchGraph</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" G %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>




<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
