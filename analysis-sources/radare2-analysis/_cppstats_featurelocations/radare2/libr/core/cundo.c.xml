<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\cundo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

TODO:

- add more methods to "undo according to some conditions"
- undo all comments in current offfset
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>RCoreUndo</name> <modifier>*</modifier></type><name>r_core_undo_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>revert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RCoreUndo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>revert</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>revert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>tstamp</name></name> <operator>=</operator> <call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cu</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_undo_free</name><parameter_list>(<parameter><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>revert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_undo_push</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>undos</name></name></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_undo_pop</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>undo</name> <init>= <expr><call><name>r_list_pop</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>undos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>undo</name><operator>-&gt;</operator><name>revert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_undo_free</name> <argument_list>(<argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_undo_condition</name><parameter_list>(<parameter><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>, <parameter><decl><type><name>RCoreUndoCondition</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cond</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mustPrint</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mustPrint</name> <operator>=</operator> <operator>(</operator><name><name>cu</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>cond</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>minstamp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mustPrint</name> <operator>=</operator> <operator>(</operator><name><name>cu</name><operator>-&gt;</operator><name>tstamp</name></name> <operator>&gt;=</operator> <name><name>cond</name><operator>-&gt;</operator><name>minstamp</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>glob</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mustPrint</name> <operator>=</operator> <call><name>r_str_glob</name> <argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>glob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mustPrint</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_undo_print</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>RCoreUndoCondition</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCoreUndo</name> <modifier>*</modifier></type><name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;undos</argument>, <argument>iter</argument>, <argument>cu</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_core_undo_condition</name> <argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>revert</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;undos</argument>, <argument>iter</argument>, <argument>cu</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %"</literal><name>PFMT64d</name><literal type="string">" %s (revert: %s)\n"</literal></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>tstamp</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>revert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
