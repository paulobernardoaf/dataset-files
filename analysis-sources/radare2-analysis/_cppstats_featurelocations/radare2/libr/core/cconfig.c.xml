<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\cconfig.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODECB</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_config_set_cb (cfg,w,x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEICB</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_config_set_i_cb (cfg,w,x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETDESC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_config_node_desc (x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETOPTIONS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_options (x, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETDESC (r_config_set_i (cfg,x,y), z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETICB</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETDESC (NODEICB (w,x,y), z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETPREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETDESC (r_config_set (cfg,x,y), z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETCB</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETDESC (NODECB (w,x,y), z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETBPREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETDESC (NODECB (x,y,boolify_var_cb), z)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>boolify_var_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>||</operator> <call><name>r_str_is_false</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_options</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isGdbPlugin</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"gdb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_node_options</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;options</argument>, <argument>iter</argument>, <argument>option</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareNameLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>r_anal_function_realsize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>r_anal_function_realsize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareDist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_diff_sort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>_node</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>_core</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareName</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"namelen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareNameLen</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareAddress</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareType</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareSize</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"dist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name> <operator>=</operator> <operator>(</operator><name>RListComparator</name><operator>)</operator><name>compareDist</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"e diff.sort = [name, namelen, addr, type, size, dist]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>has_esil</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;anal-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>esil</name></name></expr>?</condition><then> <expr><literal type="string">"Ae"</literal></expr></then><else>: <expr><literal type="string">"A_"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="string">"__"</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rasm2_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>feat2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>feat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAsmPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pj</name> <operator>=</operator> <call><name>pj_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pj</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>a-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arch</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cpus</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cpus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="string">"_8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="string">"_16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="string">"_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="string">"_64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="string">"_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>feat</name> <operator>=</operator> <literal type="string">"__"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>assemble</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>disassemble</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>feat</name> <operator>=</operator> <literal type="string">"ad"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>assemble</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>disassemble</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>feat</name> <operator>=</operator> <literal type="string">"a_"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>assemble</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>disassemble</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>feat</name> <operator>=</operator> <literal type="string">"_d"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>feat2</name> <operator>=</operator> <call><name>has_esil</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>license</name> <init>= <expr><literal type="string">"GPL"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_i</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_i</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"license"</literal></expr></argument>, <argument><expr><name>license</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"features"</literal></expr></argument>, <argument><expr><name>feat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s %-9s %-11s %-7s %s\n"</literal></expr></argument>,
<argument><expr><name>feat</name></expr></argument>, <argument><expr><name>feat2</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr>?</condition><then><expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__setsegoff</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmarch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asmbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>autoseg</name> <init>= <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>asmarch</name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>asmbits</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"asm.segoff"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name>autoseg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_debug_hitinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>hitinfo</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmpretpoline</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>retpoline</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmptailcall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tailcall</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analarmthumb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>armthumb</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analdepth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analgraphdepth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>graph_depth</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analafterjmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>afterjmp</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_delay</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>delay</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_endsize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>endsize</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analvars</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>vars</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_nonull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>nonull</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analstrings</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.strings"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_ignbithints</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>ignbithints</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analsleep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sleep</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analmaxrefs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>maxreflines</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analnorevisit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>norevisit</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analnopskip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>nopskip</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analhpskip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>hpskip</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_analarch_options</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;anal-&gt;plugins</argument>, <argument>it</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analarch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_analarch_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aa</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aa</name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>aa</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"anal.arch: cannot find '%s'\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.arch"</literal></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analcpu</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_set_cpu</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>r_anal_archinfo</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pcalign"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>v</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>v</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analrecont</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>recont</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analijmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>ijmp</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmvarsubmin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>minval</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmtailsub</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>tailsub</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrlast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>lastEnabled</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_vi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>enable_vi_mode</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_prompt_mode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_mode</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_wideoff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>wide_offsets</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrrainbow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_RAINBOW</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"ecr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_RAINBOW</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"ecoo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_print_set_flags</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmpseudo</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>pseudo</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmsecsub</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_SECSUB</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_SECSUB</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_print_set_flags</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmassembler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_asm_use_assembler</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_cmdpdc_options</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name></name> <operator>&amp;&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e cmd.pdc=?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>optl</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>options</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>optl</argument>, <argument>iter</argument>, <argument>opt</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>optl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_asmcpu_options</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arch</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arch</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;assembler-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cpus</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cpus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>word</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmcpu</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_asmcpu_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rasm2_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_set_cpu</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.cpu"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_asmarch_options</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name>node</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;assembler-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmarch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>asmparser</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>R_SYS_BITS</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>asmos</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.os"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_asmarch_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rasm2_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_egg_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_SYS_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_asm_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"asm.arch: cannot find (%s)\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_cpu</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newAsmCPU</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>cpus</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newAsmCPU</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newAsmCPU</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nac</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>newAsmCPU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>nac</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>asm_cpu</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>asm_cpu</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>nac</name></expr></argument>, <argument><expr><name>asm_cpu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>, <argument><expr><name>nac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>&amp;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">16</literal> <operator>&amp;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">32</literal> <operator>&amp;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>asmparser</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>asmparser</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.pseudo"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.parser"</literal></expr></argument>, <argument><expr><name>asmparser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_debug_set_arch</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.arch"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.arch"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.arch"</literal></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmcpu</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_syscall_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>asmcpu</name></expr></argument>, <argument><expr><name>asmos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>__setsegoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bigbin</name> <init>= <expr><call><name>r_bin_is_big_endian</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bigbin</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>bigbin</name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.bigendian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_asm_set_big_endian</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>bigbin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>bigbin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_cpu</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>asm_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>asm_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>asmcpu</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>asmcpu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_asmcpu_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>asmcpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>r_anal_archinfo</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pcalign"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pcalign"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_anal_type_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_anal_cc_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgbpsize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bpsize</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgbtdepth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>btdepth</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmbits</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"user can't be NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (bits == core-&gt;assembler-&gt;bits &amp;&amp; bits == core-&gt;anal-&gt;bits &amp;&amp; bits == core-&gt;dbg-&gt;bits) {

return true;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_set_bits</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmPlugin</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"e asm.bits: Cannot set value, no plugins defined yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_set_bits</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"asm.arch: Cannot setup '%d' bits analysis engine\n"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_set_arch</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>load_from_debug</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>load_from_debug</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>reg_profile</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>R_SYS_BITS_32</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>R_SYS_BITS_64</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><call><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>reg_profile</name></name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_set_reg_profile</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_anal_cc_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmos</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.os"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmarch</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmcpu</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_syscall_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>asmcpu</name></expr></argument>, <argument><expr><name>asmos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__setsegoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bp_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.bpsize"</literal></expr></argument>, <argument><expr><call><name>r_bp_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>r_anal_archinfo</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pcalign"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>v</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>v</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_asmfeatures_options</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>features</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>features</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>features</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>options</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>feature</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>features</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>feature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_flag_realnames</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name><operator>-&gt;</operator><name>realnames</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmfeatures</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_asmfeatures_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>features</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmlineswidth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>lineswidth</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_emustr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.emu"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_emuskip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Concatenation of meta types encoded as characters:\n"</literal> \
<literal type="string">"'d': data\n'c': code\n's': string\n'f': format\n'm': magic\n"</literal> \
<literal type="string">"'h': hide\n'C': comment\n'r': run\n"</literal> \
<literal type="string">"(default is 'ds' to skip data and strings)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asm_armimm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>immdisp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asm_invhex</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>invhex</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asm_pcalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>align</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>pcalign</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>pcalign</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asmbits</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>asmarch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>R_SYS_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>asmarch</name> <operator>=</operator> <call><name>r_config_node_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>asmarch</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmcpu</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_syscall_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><name><name>asmarch</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>asmcpu</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__setsegoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>asmarch</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>asmbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_set_os</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_anal_cc_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmparser</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_parse_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aliases</name></decl>;</decl_stmt>
}</block></struct></type> <name>namealiases_pair</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binstrenc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" -- if string's 2nd &amp; 4th bytes are 0 then utf16le else "</literal>
<literal type="string">"if 2nd - 4th &amp; 6th bytes are 0 &amp; no char &gt; 0x10ffff then utf32le else "</literal>
<literal type="string">"if utf8 char detected then utf8 else latin1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>namealiases_pair</name></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"guess"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf8"</literal></expr>, <expr><literal type="string">"utf-8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf16le"</literal></expr>, <expr><literal type="string">"utf-16le,utf16-le"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf32le"</literal></expr>, <expr><literal type="string">"utf-32le,utf32-le"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf16be"</literal></expr>, <expr><literal type="string">"utf-16be,utf16-be"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf32be"</literal></expr>, <expr><literal type="string">"utf-32be,utf32-be"</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>namealiases_pair</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_cmp_list</name> <argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown encoding: %s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binfilter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_bdc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>demanglercmd</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_useldr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>use_ldr</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>binat</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_usextr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>use_xtr</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_strpurge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(
<argument><expr><literal type="string">"There can be multiple entries separated by commas. No whitespace before/after entries.\n"</literal>
<literal type="string">"Possible entries:\n"</literal>
<literal type="string">" all : purge all strings\n"</literal>
<literal type="string">" true : use the false_positive() classifier in cbin.c\n"</literal>
<literal type="string">" addr : purge string at addr\n"</literal>
<literal type="string">" addr1-addr2 : purge all strings in the range addr1-addr2 inclusive\n"</literal>
<literal type="string">" !addr : prevent purge of string at addr by prev entries\n"</literal>
<literal type="string">" !addr1-addr2 : prevent purge of strings in range addr1-addr2 inclusive by prev entries\n"</literal>
<literal type="string">"Neither !true nor !false is supported.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Examples:\n"</literal>
<literal type="string">" e bin.str.purge=true,0-0xff,!0x1a\n"</literal>
<literal type="string">" -- purge strings using the false_positive() classifier in cbin.c and also strings \n"</literal>
<literal type="string">" with addresses in the range 0-0xff, but not the string at 0x1a.\n"</literal>
<literal type="string">" e bin.str.purge=all,!0x1000-0x1fff\n"</literal>
<literal type="string">" -- purge all strings except the strings with addresses in the range 0x1000-0x1fff.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>strpurge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>strpurge</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_maxname</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>maxflagnamelen</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_midflags</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_strfilter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Valid values for bin.str.filter:\n"</literal>
<literal type="string">"a only alphanumeric printable\n"</literal>
<literal type="string">"8 only strings with utf8 chars\n"</literal>
<literal type="string">"p file/directory paths\n"</literal>
<literal type="string">"e email-like addresses\n"</literal>
<literal type="string">"u urls\n"</literal>
<literal type="string">"i IPv4 address-like strings\n"</literal>
<literal type="string">"U only uppercase strings\n"</literal>
<literal type="string">"f format-strings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>strfilter</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binforce</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_force_plugin</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_asmsyntax</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>syntax</name> <init>= <expr><call><name>r_asm_syntax_from_string</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>syntax</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_set_syntax</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dirzigns</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_bigendian</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isbig</name> <init>= <expr><call><name>r_asm_set_big_endian</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_set_big_endian</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>isbig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <name>isbig</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfgdatefmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>datefmt</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_timezone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>datezone</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfgcorelog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cfglog</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfgdebug</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name> <operator>=</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbgbackend</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.backend"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>is_debugger</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>dbgbackend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>, <argument><expr><literal type="string">".dr*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>dbgbackend</name></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_select</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><call><name>r_io_fd_get_pid</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_io_fd_get_tid</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>is_debugger</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dirhome</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>R_SYS_HOME</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dirtmp</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>R_SYS_TMP</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dirsrc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>srcdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>srcdir</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfgsanbox</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot disable sandbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&amp;&amp;</operator> <name>ret</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_str_escbslash</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>esc_bslash</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_completion_maxtab</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>completion</name><operator>.</operator><name>args_limit</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfg_fortunes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_fortune_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cfg_fortunes_type</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_fortune_list_types</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_decompiler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_file_path</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"!*%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmdpdc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"pdc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_decompiler</name> <argument_list>(<argument><expr><literal type="string">"r2retdec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCorePlugin</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;rcmd-&gt;plist</argument>, <argument>iter</argument>, <argument>cp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"r2ghidra"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"pdg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>check_decompiler</name> <argument_list>(<argument><expr><literal type="string">"r2ghidra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_decompiler</name> <argument_list>(<argument><expr><literal type="string">"r2jadx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_decompiler</name> <argument_list>(<argument><expr><literal type="string">"r2snow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>r2dec</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"r2dec.asm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2dec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"pdd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmdlog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmdtimes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdtimes</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmdrepeat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdrepeat</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrnull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>null</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_color</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_COLOR</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&gt;</operator> <name>COLOR_MODE_16M</name><operator>)</operator></expr>
?</condition><then> <expr><name>COLOR_MODE_16M</name></expr></then><else>: <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_pal_update_event</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_print_set_flags</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_color_getter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_config_node_value_format_i</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_decoff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_ADDRDEC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_ADDRDEC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_print_set_flags</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgbep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_btalgo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>btalgo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>btalgo</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_libs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>glob_libs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>glob_libs</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_unlibs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>glob_unlibs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>glob_unlibs</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_bpinmaps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>bpinmaps</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_forks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace_forks</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_attach</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_gdb_page_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isGdbPlugin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"page_size %"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_io_system</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_gdb_retries</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isGdbPlugin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"retries %"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_io_system</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_execs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace_execs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_attach</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: dbg.execs is not supported in this platform.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_clone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace_clone</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_attach</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_follow_child</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>follow_child</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_aftersc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace_aftersyscall</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_attach</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_runprofile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>runprofile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>runprofile</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_args</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgstatus</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>,
<argument><expr><literal type="string">".dr*; drd; sr PC;pi 1;s-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>, <argument><expr><literal type="string">".dr*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgbackend</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_plugin_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><literal type="string">"bf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_gotolimit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot change gotolimit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil_goto_limit</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_esilverbose</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_esilstackdepth</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"esil.stack.depth must be greater than 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_fixrows</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>fix_rows</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_fixcolumns</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>fix_columns</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_rows</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>force_rows</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_hexcursor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cfmt</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hexcompact</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_COMPACT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_COMPACT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_pairs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_section</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_SECTION</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_SECTION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_align</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_ALIGN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_ALIGN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_unalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_UNALLOC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_UNALLOC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_unalloc_ch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>io_unalloc_ch</name></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_header</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_bytes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_NONHEX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_NONHEX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_ascii</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_NONASCII</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_NONASCII</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_style</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_STYLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_STYLE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hex_hdroff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_HDROFF</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_HDROFF</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_events</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log_events</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hexcomments</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_COMMENT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_COMMENT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_iopcache</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache.read"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache.write"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_desc_cache_fini_all</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache.read"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache.write"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_iopcacheread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>&amp;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_desc_cache_fini_all</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_iopcachewrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_desc_cache_fini_all</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.pcache"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_esil_cmd</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal><name>PFMT64d</name><literal type="string">" %"</literal> <name>PFMT64d</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_ioer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_ioer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_ioer</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_todo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_todo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_todo</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_intr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_intr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_intr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_mdevrange</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>mdev_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>mdev_range</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_step</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_step</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_step_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_step_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_step_out</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_mdev</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_mdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_mdev</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmd_esil_trap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>r_core_esil_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>cmd_trap</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_fsview</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>R_FS_VIEW_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_FS_VIEW_ALL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"del"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>R_FS_VIEW_DELETED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"spe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>R_FS_VIEW_SPECIAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_fs_view</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_cmddepth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>i_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>max_cmd_depth</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>cmd_depth</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hexcols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>i_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>regcols</name></name> <operator>=</operator> <name>c</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_hexstride</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name><operator>)</operator><operator>-&gt;</operator><name><name>print</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_search_kwidx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>search</name><operator>-&gt;</operator><name>n_kws</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_cache_mode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cachemode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cachemode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_cache_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_cache_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_cache</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cb_io_cache_read</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cb_io_cache_write</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_ioaslr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>aslr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>aslr</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_pava</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>pava</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: You may probably want to disable io.va too\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_iova</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (r_list_length (r_bin_get_sections (core-&gt;bin)) &gt; 0) {
r_core_cmd0 (core, ".ia*");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_ioff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>ff</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_io_oxff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>Oxff</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_filepath</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pikaboo</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pikaboo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pikaboo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.lastpath"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ovalue</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ovalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.lastpath"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_ioautofd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>autofd</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_color_grep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>grep_color</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_color_grep_highlight</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>grep_highlight</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_pager</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: scr.pager must be '..' for internal less, or the path to a program in $PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>pager</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_breaklines</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>break_lines</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_gadgets</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>scr_gadgets</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_fps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>fps</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrbreakword</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_breakword</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_breakword</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrcolumns</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>force_columns</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>regcols</name></name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrfgets</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>user_fgets</name></name> <operator>=</operator> <ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>r_core_fgets</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrhtml</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_html</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_newshell</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>use_tree_sitter_r2cmd</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrhighlight</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_highlight</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>scr_ansicon</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_line_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>ansicon</name> <operator>=</operator> <call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>ansicon</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>streams</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>, <macro><name>GetStdHandle</name> <argument_list>(<argument>STD_ERROR_HANDLE</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mode</name> <operator>|</operator> <name>ENABLE_PROCESSED_OUTPUT</name> <operator>|</operator> <name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_screcho</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>echo</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrlinesleep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>linesleep</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrpagesize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>pagesize</name><operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrflush</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>flush</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrstrconv</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Valid values for scr.strconv:\n"</literal>
<literal type="string">" asciiesc convert to ascii with non-ascii chars escaped\n"</literal>
<literal type="string">" asciidot convert to ascii with non-ascii chars turned into a dot (except control chars stated below)\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Ascii chars are in the range 0x20-0x7e. Always escaped control chars are alert (\\a),\n"</literal>
<literal type="string">"backspace (\\b), formfeed (\\f), newline (\\n), carriage return (\\r), horizontal tab (\\t)\n"</literal>
<literal type="string">"and vertical tab (\\v). Also, double quotes (\\\") are always escaped, but backslashes (\\\\)\n"</literal>
<literal type="string">"are only escaped if str.escbslash = true.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>strconv_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>strconv_mode</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_graphformat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"png\njpg\npdf\nps\nsvg\njson\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_exectrap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>exectrap</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_iotrap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>iotrap</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_bgfill</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_BGFILL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_BGFILL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_print_set_flags</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrint</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>&amp;&amp;</operator> <call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>is_interactive</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrnkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_histblock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>histblock</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrprompt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>scr_prompt</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>echo</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scrrows</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name><operator>)</operator><operator>-&gt;</operator><name><name>cons</name><operator>-&gt;</operator><name>force_rows</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_contiguous</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>search</name><operator>-&gt;</operator><name>contiguous</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_searchalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>search</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>addrmod</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_segoff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_SEGOFF</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>R_PRINT_FLAGS_SEGOFF</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_seggrn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>seggrn</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>seggrn</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>seggrn</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_stopthreads</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>stop_all_threads</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_scr_prompt_popup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>show_autocomplete_widget</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_swstep</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>swstep</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_consbreak</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>consbreak</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_teefile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>teefile</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_trace</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_tracetag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_utf8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_set_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_utf8_curvy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>use_utf8_curvy</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dotted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>dotted_lines</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_zoombyte</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>zoom</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid zoom.byte value. See pz? for help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"pzp\npzf\npzs\npz0\npzF\npze\npzh\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_analverbose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binverbose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_rawstr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>rawstr</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_debase64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>debase64</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binstrings</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>req</name> <init>= <expr><name>R_BIN_REQ_STRINGS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>filter_rules</name></name> <operator>|=</operator> <name>req</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>filter_rules</name></name> <operator>&amp;=</operator> <operator>~</operator><name>req</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_bindbginfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>want_dbginfo</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binprefix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_filter</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binmaxstrbuf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>old_v</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>maxstrbuf</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>maxstrbuf</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name><operator>&gt;</operator><name>old_v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_reset_strings</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binmaxstr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>maxstrlen</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_reset_strings</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_binminstr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_reset_strings</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_searchin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Valid values for search.in (depends on .from/.to and io.va):\n"</literal>
<literal type="string">"raw search in raw io (ignoring bounds)\n"</literal>
<literal type="string">"block search in the current block\n"</literal>
<literal type="string">"io.map search in current map\n"</literal>
<literal type="string">"io.sky.[rwx] search in all skyline segments\n"</literal>
<literal type="string">"io.maps search in all maps\n"</literal>
<literal type="string">"io.maps.[rwx] search in all r-w-x io maps\n"</literal>
<literal type="string">"bin.segment search in current mapped segment\n"</literal>
<literal type="string">"bin.segments search in all mapped segments\n"</literal>
<literal type="string">"bin.segments.[rwx] search in all r-w-x segments\n"</literal>
<literal type="string">"bin.section search in current mapped section\n"</literal>
<literal type="string">"bin.sections search in all mapped sections\n"</literal>
<literal type="string">"bin.sections.[rwx] search in all r-w-x sections\n"</literal>
<literal type="string">"dbg.stack search in the stack\n"</literal>
<literal type="string">"dbg.heap search in the heap\n"</literal>
<literal type="string">"dbg.map search in current memory map\n"</literal>
<literal type="string">"dbg.maps search in all memory maps\n"</literal>
<literal type="string">"dbg.maps.[rwx] search in all executable marked memory maps\n"</literal>
<literal type="string">"anal.fcn search in the current function\n"</literal>
<literal type="string">"anal.bb search in the current basic-block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"anal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>noncode</name></name> <operator>=</operator> <operator>(</operator><call><name>strchr</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__dbg_swstep_getter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>swstep</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dirpfx</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_roregs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>roregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>roregs</name></name> <operator>=</operator> <call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_gp</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>gp</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_from</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.limits"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_set_limits</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>,
<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.from"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.to"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_limits</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_set_limits</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>,
<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.from"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.to"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_unset_limits</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_rnr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>recursive_noreturn</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmptbl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>jmptbl</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_cjmpref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>cjmpref</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmpref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>jmpref</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmpabove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>jmpabove</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_loads</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>loads</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_followdatarefs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>followdatarefs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_jmpmid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>jmpmid</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_searchstringrefs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>searchstringrefs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_pushret</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>pushret</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_brokenrefs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>followbrokenfcnsrefs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_trycatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>trycatch</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_bb_max_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>bb_max_size</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_anal_cpp_abi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node_options</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"itanium"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpp_abi</name></name> <operator>=</operator> <name>R_ANAL_CPP_ABI_ITANIUM</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"msvc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpp_abi</name></name> <operator>=</operator> <name>R_ANAL_CPP_ABI_MSVC</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"anal.cpp.abi: cannot find '%s'\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_linesto</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"lines.from"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_sz</name> <init>= <expr><call><name>r_io_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>from</name> <operator>+</operator> <name>io_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: \"lines.to\" can't exceed addr 0x%08"</literal><name>PFMT64x</name>
<literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" %d\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>io_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>from</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name> <operator>=</operator> <call><name>r_core_lines_initcache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid range 0x%08"</literal><name>PFMT64x</name><literal type="string">" .. 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_linesabs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_abs</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_abs</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"lines.from"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_str</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"lines.to"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>to_str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>to_str</name><operator>)</operator></expr> ?</condition><then> <expr><name>to_str</name></expr> </then><else>: <expr><literal type="string">"$s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name> <operator>=</operator> <call><name>r_core_lines_initcache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: \"lines.from\" and \"lines.to\" must be set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Found %d lines\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>lines_cache_sz</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_malloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"jemalloc"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"glibc"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>malloc</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbgsnap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>r_debug_session_path</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_config_level</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coreptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>nodeptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_log_set_level</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_config_traplevel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coreptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>nodeptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_log_set_traplevel</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_config_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coreptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>nodeptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_log_set_file</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_config_srcinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coreptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>nodeptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_log_set_srcinfo</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_log_set_srcinfo</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_log_config_colors</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coreptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>nodeptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_log_set_colors</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_log_set_colors</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cb_dbg_verbose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_config_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <call><name>r_config_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><call><name>r_sys_getenv</name><argument_list>(<argument><expr><literal type="string">"R2_PREFIX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>invoke_dir</name> <init>= <expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfx</name> <operator>&amp;&amp;</operator> <name>invoke_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>invoke_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>R2_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.prefix"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_dirpfx</name></expr></argument>, <argument><expr><literal type="string">"Default prefix r2 was compiled for"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>
<block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_SYS_HOME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>R_SYS_HOME</name></expr></argument>, <argument><expr><literal type="string">"/data/local/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.times"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmdtimes</name></expr></argument>, <argument><expr><literal type="string">"Run when a command is repeated (number prefix)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"pdb.useragent"</literal></expr></argument>, <argument><expr><literal type="string">"Microsoft-Symbol-Server/6.11.0001.402"</literal></expr></argument>, <argument><expr><literal type="string">"User agent for Microsoft symbol server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"pdb.server"</literal></expr></argument>, <argument><expr><literal type="string">"https://msdl.microsoft.com/download/symbols"</literal></expr></argument>, <argument><expr><literal type="string">"Base URL for Microsoft symbol server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pdb_path</name> <init>= <expr><call><name>r_str_home</name><argument_list>(<argument><expr><name>R2_HOME_PDB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"pdb.symstore"</literal></expr></argument>, <argument><expr><name>pdb_path</name></expr></argument>, <argument><expr><literal type="string">"Path to downstream symbol store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>pdb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"pdb.extract"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Avoid extract of the pdb file, just download"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"pdb.autoload"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"Automatically load the required pdb files for loaded DLLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.fcnprefix"</literal></expr></argument>, <argument><expr><literal type="string">"fcn"</literal></expr></argument>, <argument><expr><literal type="string">"Prefix new function names with this"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.verbose"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analverbose</name></expr></argument>, <argument><expr><literal type="string">"Show RAnal warnings when analyzing code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.a2f"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use the new WIP analysis algorithm (core/p/a2f), anal.depth ignored atm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.roregs"</literal></expr></argument>, <argument><expr><literal type="string">"gp,zero"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_roregs</name></expr></argument>, <argument><expr><literal type="string">"Comma separated list of register names to be readonly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.gp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_gp</name></expr></argument>, <argument><expr><literal type="string">"Set the value of the GP register (MIPS)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.gpfixed"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Set gp register to anal.gp before emulating each instruction in aae"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.limits"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_limits</name></expr></argument>, <argument><expr><literal type="string">"Restrict analysis to address range [anal.from:anal.to]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.rnr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_rnr</name></expr></argument>, <argument><expr><literal type="string">"Recursive no return checks (EXPERIMENTAL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.limits"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_limits</name></expr></argument>, <argument><expr><literal type="string">"Restrict analysis to address range [anal.from:anal.to]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.from"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_from</name></expr></argument>, <argument><expr><literal type="string">"Lower limit on the address range for analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.to"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><operator>&amp;</operator><name>cb_anal_from</name></expr></argument>, <argument><expr><literal type="string">"Upper limit on the address range for analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"anal.in"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_searchin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Specify search boundaries for analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>,
<argument><expr><literal type="string">"bin.segment"</literal></expr></argument>, <argument><expr><literal type="string">"bin.segments"</literal></expr></argument>, <argument><expr><literal type="string">"bin.segments.x"</literal></expr></argument>, <argument><expr><literal type="string">"bin.segments.r"</literal></expr></argument>, <argument><expr><literal type="string">"bin.section"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.r"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rw"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.wx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.x"</literal></expr></argument>,
<argument><expr><literal type="string">"io.map"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.stack"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.heap"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.map"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"anal.fcn"</literal></expr></argument>, <argument><expr><literal type="string">"anal.bb"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"anal.timeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Stop analyzing after a couple of seconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.retpoline"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmpretpoline</name></expr></argument>, <argument><expr><literal type="string">"Analyze retpolines, may be slower if not needed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.tailcall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmptailcall</name></expr></argument>, <argument><expr><literal type="string">"Consume a branch as a call if delta is big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.armthumb"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analarmthumb</name></expr></argument>, <argument><expr><literal type="string">"aae computes arm/thumb changes (lot of false positives ahead)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.after"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analafterjmp</name></expr></argument>, <argument><expr><literal type="string">"Continue analysis after jmp/ujmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.endsize"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_endsize</name></expr></argument>, <argument><expr><literal type="string">"Adjust function size at the end of the analysis (known to be buggy)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.delay"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_delay</name></expr></argument>, <argument><expr><literal type="string">"Enable delay slot analysis if supported by the architecture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.depth"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analdepth</name></expr></argument>, <argument><expr><literal type="string">"Max depth at code analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.graph_depth"</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analgraphdepth</name></expr></argument>, <argument><expr><literal type="string">"Max depth for path search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.sleep"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analsleep</name></expr></argument>, <argument><expr><literal type="string">"Sleep N usecs every so often during analysis. Avoid 100% CPU usage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.ignbithints"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_ignbithints</name></expr></argument>, <argument><expr><literal type="string">"Ignore the ahb hints (only obey asm.bits)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.calls"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Make basic af analysis walk into calls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.autoname"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Speculatively set a name for the functions, may result in some false positives"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.hasnext"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Continue analysis after each function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"anal.nonull"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_nonull</name></expr></argument>, <argument><expr><literal type="string">"Do not analyze regions of N null bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.esil"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use the new ESIL code analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.strings"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analstrings</name></expr></argument>, <argument><expr><literal type="string">"Identify and register strings during analysis (aar only)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.types.spec"</literal></expr></argument>, <argument><expr><literal type="string">"gcc"</literal></expr></argument>, <argument><expr><literal type="string">"Set profile for specifying format chars used in type analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.types.verbose"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Verbose output from type analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.types.constraint"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable constraint types analysis for variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.vars"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analvars</name></expr></argument>, <argument><expr><literal type="string">"Analyze local variables and arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.vinfun"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Search values in functions (aav) (false by default to only find on non-code)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.vinfunrange"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Search values outside function ranges (requires anal.vinfun=false)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.norevisit"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analnorevisit</name></expr></argument>, <argument><expr><literal type="string">"Do not visit function analysis twice (EXPERIMENTAL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.nopskip"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analnopskip</name></expr></argument>, <argument><expr><literal type="string">"Skip nops at the beginning of functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.hpskip"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analhpskip</name></expr></argument>, <argument><expr><literal type="string">"Skip `mov reg, reg` and `lea reg, [reg] at the beginning of functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"anal.arch"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analarch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select the architecture to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_analarch_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.cpu"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analcpu</name></expr></argument>, <argument><expr><literal type="string">"Specify the anal.cpu to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"anal.prelude"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Specify an hexpair to find preludes in code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.recont"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analrecont</name></expr></argument>, <argument><expr><literal type="string">"End block after splitting a basic block instead of error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.indir"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analijmp</name></expr></argument>, <argument><expr><literal type="string">"Follow the indirect jumps in function analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"anal.ptrdepth"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of nested pointers to follow in analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.maxref"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_analmaxrefs</name></expr></argument>, <argument><expr><literal type="string">"Maximum number of reflines to be analyzed and displayed in asm.lines with pd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.tbl"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmptbl</name></expr></argument>, <argument><expr><literal type="string">"Analyze jump tables in switch statements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.cref"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_cjmpref</name></expr></argument>, <argument><expr><literal type="string">"Create references for conditional jumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.ref"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmpref</name></expr></argument>, <argument><expr><literal type="string">"Create references for unconditional jumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.above"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmpabove</name></expr></argument>, <argument><expr><literal type="string">"Jump above function pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.loads"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_loads</name></expr></argument>, <argument><expr><literal type="string">"Define as dword/string/qword when analyzing load instructions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.datarefs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_followdatarefs</name></expr></argument>, <argument><expr><literal type="string">"Follow data references for code coverage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.brokenrefs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_brokenrefs</name></expr></argument>, <argument><expr><literal type="string">"Follow function references as well if function analysis was failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.jmp.mid"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_jmpmid</name></expr></argument>, <argument><expr><literal type="string">"Continue analysis after jump to middle of instruction (x86 only)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.refstr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_searchstringrefs</name></expr></argument>, <argument><expr><literal type="string">"Search string references in data references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.trycatch"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_trycatch</name></expr></argument>, <argument><expr><literal type="string">"Honor try.X.Y.{from,to,catch} flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.bb.maxsize"</literal></expr></argument>, <argument><expr><literal type="string">"512K"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_bb_max_size</name></expr></argument>, <argument><expr><literal type="string">"Maximum basic block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"anal.pushret"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_pushret</name></expr></argument>, <argument><expr><literal type="string">"Analyze push+ret as jmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"anal.cpp.abi"</literal></expr></argument>, <argument><expr><literal type="string">"itanium"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_anal_cpp_abi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select C++ ABI (Compiler)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"itanium"</literal></expr></argument>, <argument><expr><literal type="string">"msvc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <name>__GNU_LIBRARY__</name> <operator>&amp;&amp;</operator> <name>__GLIBC__</name> <operator>&amp;&amp;</operator> <name>__GLIBC_MINOR__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.malloc"</literal></expr></argument>, <argument><expr><literal type="string">"glibc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_malloc</name></expr></argument>, <argument><expr><literal type="string">"Choose malloc structure parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.malloc"</literal></expr></argument>, <argument><expr><literal type="string">"jemalloc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_malloc</name></expr></argument>, <argument><expr><literal type="string">"Choose malloc structure parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GLIBC_MINOR__</name> <operator>&gt;</operator> <literal type="number">25</literal></expr></cpp:if>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Set glib tcache parsing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Set glib tcache parsing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.ma_offset"</literal></expr></argument>, <argument><expr><literal type="number">0x000000</literal></expr></argument>, <argument><expr><literal type="string">"Main_arena offset from his symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.fc_offset"</literal></expr></argument>, <argument><expr><literal type="number">0x00280</literal></expr></argument>, <argument><expr><literal type="string">"First chunk offset from brk_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.ma_offset"</literal></expr></argument>, <argument><expr><literal type="number">0x1bb000</literal></expr></argument>, <argument><expr><literal type="string">"Main_arena offset from his symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.fc_offset"</literal></expr></argument>, <argument><expr><literal type="number">0x148</literal></expr></argument>, <argument><expr><literal type="string">"First chunk offset from brk_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.libc.dbglib"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Set libc debug library file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.prestep"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Step before esil evaluation in `de` commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.fillstack"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Initialize ESIL stack with (random, debrujn, sequence, zeros, ...)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"esil.verbose"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_esilverbose</name></expr></argument>, <argument><expr><literal type="string">"Show ESIL verbose level (0, 1, 2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"esil.gotolimit"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil_goto_limit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_gotolimit</name></expr></argument>, <argument><expr><literal type="string">"Maximum number of gotos per ESIL expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"esil.stack.depth"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_esilstackdepth</name></expr></argument>, <argument><expr><literal type="string">"Number of elements that can be pushed on the esilstack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"esil.stack.size"</literal></expr></argument>, <argument><expr><literal type="number">0xf0000</literal></expr></argument>, <argument><expr><literal type="string">"Set stack size in ESIL VM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"esil.stack.addr"</literal></expr></argument>, <argument><expr><literal type="number">0x100000</literal></expr></argument>, <argument><expr><literal type="string">"Set stack address in ESIL VM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.stack.pattern"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"Specify fill pattern to initialize the stack (0, w, d, i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"esil.addr.size"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"Maximum address size in accessed by the ESIL VM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.breakoninvalid"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Break esil execution when instruction is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"esil.timeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"A timeout (in seconds) for when we should give up emulating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"asm.os"</literal></expr></argument>, <argument><expr><name>R_SYS_OS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select operating system (kernel)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"ios"</literal></expr></argument>, <argument><expr><literal type="string">"dos"</literal></expr></argument>, <argument><expr><literal type="string">"darwin"</literal></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>, <argument><expr><literal type="string">"freebsd"</literal></expr></argument>, <argument><expr><literal type="string">"openbsd"</literal></expr></argument>, <argument><expr><literal type="string">"netbsd"</literal></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="string">"s110"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.xrefs.fold"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of xrefs to be displayed as list (use columns above)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.xrefs.code"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show the code xrefs (generated by jumps instead of calls)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.xrefs.max"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of xrefs to be displayed without folding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.invhex"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asm_invhex</name></expr></argument>, <argument><expr><literal type="string">"Show invalid instructions as hexadecimal numbers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.instr"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Display the disassembled instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.meta"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Display the code/data/format conversions in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Display the bytes of each instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.types"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Display the fcn types in calls (0=no,1=quiet,2=verbose)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.midcursor"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Cursor in visual disasm mode breaks the instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.flgrefs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show comment flags associated to branch reference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.right"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show comments at right of disassembly if they fit in screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.esil"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show ESIL expressions as comments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>, <argument><expr><literal type="number">71</literal></expr></argument>, <argument><expr><literal type="string">"Column to align comments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.pcalign"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asm_pcalign</name></expr></argument>, <argument><expr><literal type="string">"Only recognize as valid instructions aligned to this value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.calls"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show callee function related info as comments in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.comments"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show comments in disassembly view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.usercomments"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show user comments even if asm.comments is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.jmpsub"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Always substitute jump, call and branch targets in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hints"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Disable all asm.hint* if false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.jmp"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show jump hints [numbers] in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.call"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show call hints [numbers] in disarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.lea"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show LEA hints [numbers] in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.emu"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show asm.emu hints [numbers] in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.cdiv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show CDIV hints optimization hint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.hint.pos"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Shortcut hint position (-1, 0, 1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.slow"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Perform slow analysis operations in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.decode"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use code analysis as a disassembler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.imm.arm"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asm_armimm</name></expr></argument>, <argument><expr><literal type="string">"Display #for immediates in ARM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.imm.str"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show immediates values as strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.imm.trim"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Remove all offsets and constants from disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.indent"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Indent disassembly based on reflines depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.indentspace"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"How many spaces to indent the code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.dwarf"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show dwarf comment at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.dwarf.abspath"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show absolute path in asm.dwarf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.dwarf.file"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show filename of asm.dwarf in pd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.esil"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show ESIL instead of mnemonic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.nodup"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Do not show dupped instructions (collapse disasm)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.emu"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Run ESIL emulation analysis on disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.pre"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Run ESIL emulation starting at the closest flag in pd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.refptr"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show refpointer information in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.lazy"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Do not emulate all instructions with aae (optimization)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.stack"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Create a temporary fake stack when emulating in disasm (asm.emu)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"emu.str"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_emustr</name></expr></argument>, <argument><expr><literal type="string">"Show only strings if any in the asm.emu output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.str.lea"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Disable this in ARM64 code to remove some false positives"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.str.off"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Always show offset when printing asm.emu strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.str.inv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Color-invert emu.str strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.str.flag"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Also show flag (if any) for asm.emu string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.write"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Allow asm.emu to modify memory (WARNING)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"emu.ssa"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Perform SSA checks and show the ssa reg names as comments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"emu.skip"</literal></expr></argument>, <argument><expr><literal type="string">"ds"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_emuskip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Skip metadata of given types in asm.emu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.filter"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Replace numeric values by flags (e.g. 0x4003e0 -&gt; sym.imp.printf)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.strip"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"strip all instructions given comma separated types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.optype"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"show opcode type next to the instruction bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.fcn"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show function boundary lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.flags"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.maxname"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_maxname</name></expr></argument>, <argument><expr><literal type="string">"Maximum length of flag name with smart chopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.limit"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of flags to show in a single offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.offset"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show offset in flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.inbytes"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display flags inside the bytes space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.inline"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display flags in line separated by commas instead of newlines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODEICB</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.middle"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_midflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0 = do not show flag"</literal></expr></argument>, <argument><expr><literal type="string">"1 = show without realign"</literal></expr></argument>, <argument><expr><literal type="string">"2 = realign at middle flag"</literal></expr></argument>,
<argument><expr><literal type="string">"3 = realign at middle flag if sym.*"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Realign disassembly if there is a flag in the middle of an instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.flags.real"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_flag_realnames</name></expr></argument>,
<argument><expr><literal type="string">"Show flags' unfiltered realnames instead of names, except realnames from demangling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.bb.line"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show empty line after every basic block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.bb.middle"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Realign disassembly if a basic block starts in the middle of an instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lbytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Align disasm bytes to left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show ASCII-art lines at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.bb"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show flow lines at jumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.call"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable call lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.ret"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show separator lines after ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.out"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show out of block lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.right"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show lines before opcode instead of offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.wide"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Put a space between lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.fcnsig"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show function signature in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.lines.width"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmlineswidth</name></expr></argument>, <argument><expr><literal type="string">"Number of columns for program flow arrows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.var.submin"</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmvarsubmin</name></expr></argument>, <argument><expr><literal type="string">"Minimum value to substitute in instructions (asm.var.sub)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.tailsub"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmtailsub</name></expr></argument>, <argument><expr><literal type="string">"Replace addresses with prefix .. syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.middle"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Allow disassembling jumps in the middle of an instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.noisy"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show comments considered noisy but possibly useful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.offset"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show offsets in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"hex.offset"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show offsets in hex-dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.square"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use square pixels or not"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.vi"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_vi</name></expr></argument>, <argument><expr><literal type="string">"Use vi mode for input prompt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.mode"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_prompt_mode</name></expr></argument>, <argument><expr><literal type="string">"Set prompt color based on vi mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.wideoff"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_wideoff</name></expr></argument>, <argument><expr><literal type="string">"Adjust offsets to match asm.bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.rainbow"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrrainbow</name></expr></argument>, <argument><expr><literal type="string">"Shows rainbow colors depending of address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.last"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrlast</name></expr></argument>, <argument><expr><literal type="string">"Cache last output after flush to make _ command work (disable for performance)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.reloff"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show relative offsets instead of absolute address in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.reloff.flags"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show relative offsets to flags (not only functions)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.section"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show section name before offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.section.perm"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show section permissions in the disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.section.name"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show section name in the disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.section.col"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"Columns width to show asm.section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.section.sub"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmsecsub</name></expr></argument>, <argument><expr><literal type="string">"Show offsets in disasm prefixed with section/map name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.pseudo"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmpseudo</name></expr></argument>, <argument><expr><literal type="string">"Enable pseudo syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.size"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show size of opcodes in disassembly (pd)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.stackptr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show stack pointer at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cyclespace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Indent instructions depending on CPU-cycles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cycles"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show CPU-cycles taken by instruction at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.tabs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Use tabs in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.tabs.once"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Only tabulate the opcode, not the arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.tabs.off"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"tabulate spaces after the offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.trace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show execution traces for each opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.tracespace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Indent disassembly with trace.count information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.ucase"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use uppercase syntax at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.capitalize"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use camelcase at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.var"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show local function variables in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.var.access"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show accesses of local variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.var.sub"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Substitute variables in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.var.summary"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Show variables summary instead of full list in disasm (0, 1, 2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.var.subonly"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Substitute the entire variable expression with the local variable name (e.g. [local10h] instead of [ebp+local10h])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.regsub"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Substitute register names with their associated role name (drp~=)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.relsub"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Substitute pc relative expressions in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.fold"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Fold comments, toggle with Vz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.family"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show family name in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.symbol"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show symbol+delta instead of absolute offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.anal"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Analyze code and refs while disassembling (see anal.strings)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.symbol.col"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"Columns width to show asm.section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.assembler"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmassembler</name></expr></argument>, <argument><expr><literal type="string">"Set the plugin name to use when assembling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.minicols"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Only show the instruction in the column disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>asmcpu</name> <init>= <expr><call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmcpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>asmcpu</name></expr></argument>, <argument><expr><literal type="string">"Set the kind of asm.arch cpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>asmarch</name> <init>= <expr><call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmarch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>asmarch</name></expr></argument>, <argument><expr><literal type="string">"Set the arch to be used by asm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_asmarch_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_asmcpu_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>asmcpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"asm.features"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmfeatures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Specify supported features by the target CPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_asmfeatures_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.parser"</literal></expr></argument>, <argument><expr><literal type="string">"x86.pseudo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmparser</name></expr></argument>, <argument><expr><literal type="string">"Set the asm parser to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.segoff"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_segoff</name></expr></argument>, <argument><expr><literal type="string">"Show segmented address in prompt (x86-16)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"asm.decoff"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_decoff</name></expr></argument>, <argument><expr><literal type="string">"Show segmented address in prompt (x86-16)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.seggrn"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_seggrn</name></expr></argument>, <argument><expr><literal type="string">"Segment granularity in bits (x86-16)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"asm.syntax"</literal></expr></argument>, <argument><expr><literal type="string">"intel"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmsyntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select assembly syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"att"</literal></expr></argument>, <argument><expr><literal type="string">"intel"</literal></expr></argument>, <argument><expr><literal type="string">"masm"</literal></expr></argument>, <argument><expr><literal type="string">"jz"</literal></expr></argument>, <argument><expr><literal type="string">"regnum"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"asm.nbytes"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"Number of bytes for each opcode at disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.bytespace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Separate hexadecimal bytes with a whitespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_SYS_BITS</name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmbits</name></expr></argument>, <argument><expr><literal type="string">"Word size in bits at assembler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_asmbits</name></expr></argument>, <argument><expr><literal type="string">"Word size in bits at assembler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.functions"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show functions in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.xrefs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show xrefs in disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.demangle"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show demangled symbols in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.describe"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show opcode description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.highlight"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Highlight current line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.marks"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show marks before the disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.refs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show flag and comments from refs in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.patch"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show patch comments in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.cmt.off"</literal></expr></argument>, <argument><expr><literal type="string">"nodup"</literal></expr></argument>, <argument><expr><literal type="string">"Show offset comment in disasm (true, false, nodup)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"asm.payloads"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show payload bytes in disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.hashlimit"</literal></expr></argument>, <argument><expr><literal type="string">"10M"</literal></expr></argument>, <argument><expr><literal type="string">"Only compute hash when opening a file if smaller than this size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.usextr"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_usextr</name></expr></argument>, <argument><expr><literal type="string">"Use extract plugins when loading files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.useldr"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_useldr</name></expr></argument>, <argument><expr><literal type="string">"Use loader plugins when loading files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.str.purge"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_strpurge</name></expr></argument>, <argument><expr><literal type="string">"Purge strings (e bin.str.purge=? provides more detail)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.b64str"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Try to debase64 the strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.at"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binat</name></expr></argument>, <argument><expr><literal type="string">"RBin.cur depends on RCore.offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.libs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Try to load libraries after loading main binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"bin.str.filter"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_strfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Filter strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>, <argument><expr><literal type="string">"U"</literal></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.filter"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binfilter</name></expr></argument>, <argument><expr><literal type="string">"Filter symbol names to fix dupped names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.force"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binforce</name></expr></argument>, <argument><expr><literal type="string">"Force that rbin plugin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.lang"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Language for bin.demangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.demangle"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Import demangled symbols from RBin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.demangle.libs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show library name on demangled symbols names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.demanglecmd"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_bdc</name></expr></argument>, <argument><expr><literal type="string">"run xcrun swift-demangle and similar if available (SLOW)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"bin.baddr"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Base address of the binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"bin.laddr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Base address for loading library ('*.so')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.dbginfo"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_bindbginfo</name></expr></argument>, <argument><expr><literal type="string">"Load debug information at startup if available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.relocs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Load relocs information at startup if available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"bin.minstr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binminstr</name></expr></argument>, <argument><expr><literal type="string">"Minimum string length for r_bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"bin.maxstr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binmaxstr</name></expr></argument>, <argument><expr><literal type="string">"Maximum string length for r_bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"bin.maxstrbuf"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name>cb_binmaxstrbuf</name></expr></argument>, <argument><expr><literal type="string">"Maximum size of range to load strings from"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"bin.str.enc"</literal></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binstrenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Default string encoding of binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>, <argument><expr><literal type="string">"utf16le"</literal></expr></argument>, <argument><expr><literal type="string">"utf32le"</literal></expr></argument>, <argument><expr><literal type="string">"utf16be"</literal></expr></argument>, <argument><expr><literal type="string">"utf32be"</literal></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.prefix"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binprefix</name></expr></argument>, <argument><expr><literal type="string">"Prefix all symbols/sections/relocs with a specific string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.rawstr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_rawstr</name></expr></argument>, <argument><expr><literal type="string">"Load strings from raw binaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.strings"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binstrings</name></expr></argument>, <argument><expr><literal type="string">"Load strings from rbin on startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.debase64"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_debase64</name></expr></argument>, <argument><expr><literal type="string">"Try to debase64 all strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"bin.classes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Load classes from rbin on startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"bin.verbose"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_binverbose</name></expr></argument>, <argument><expr><literal type="string">"Show RBin warnings when loading binaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.name"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Name of current project"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.files"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Save the target binary inside the project directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.git"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Every project is a git repo and saving is committing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.zip"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use ZIP format for project files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.gpg"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"TODO: Encrypt project with GnuPGv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"prj.simple"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use simple project saving style (functions, comments, options)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.r2wars"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable some tweaks for the r2wars game"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.plugins"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Load plugins at startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"time.fmt"</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfgdatefmt</name></expr></argument>, <argument><expr><literal type="string">"Date format (%Y-%m-%d %H:%M:%S %z)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"time.zone"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_timezone</name></expr></argument>, <argument><expr><literal type="string">"Time zone, in hours relative to GMT: +2, -1,.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.corelog"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfgcorelog</name></expr></argument>, <argument><expr><literal type="string">"Log changes using the T api needed for realtime syncing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.newtab"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show descriptions in command completion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfgdebug</name></expr></argument>, <argument><expr><literal type="string">"Debugger mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"EDITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"cfg.editor"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr></then><else>: <expr><literal type="string">"notepad"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"cfg.editor"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr></then><else>: <expr><literal type="string">"vi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"cfg.editor"</literal></expr></argument>, <argument><expr><literal type="string">"Select default editor program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.user"</literal></expr></argument>, <argument><expr><call><name>r_sys_whoami</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set current username/pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.fortunes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfg_fortunes</name></expr></argument>, <argument><expr><literal type="string">"If enabled show tips at start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.fortunes.type"</literal></expr></argument>, <argument><expr><literal type="string">"tips,fun"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfg_fortunes_type</name></expr></argument>, <argument><expr><literal type="string">"Type of fortunes to show (tips, fun, nsfw, creepy)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.fortunes.clippy"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use ?E instead of ?e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.fortunes.tts"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Speak out the fortune"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.prefixdump"</literal></expr></argument>, <argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><literal type="string">"Filename prefix for automated dumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.sandbox"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cfgsanbox</name></expr></argument>, <argument><expr><literal type="string">"Sandbox mode disables systems and open on upper directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"cfg.wseek"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Seek after write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.bigendian"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_bigendian</name></expr></argument>, <argument><expr><literal type="string">"Use little (false) or big (true) endianness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_CFG_NEWSHELL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cfg.newshell"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_newshell</name></expr></argument>, <argument><expr><literal type="string">"Use new commands parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"cfg.cpuaffinity"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Run on cpuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_LOGLEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"log.level"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>R_DEFAULT_LOGLVL</name></expr></else></ternary></expr></argument>, <argument><expr><name>cb_log_config_level</name></expr></argument>, <argument><expr><literal type="string">"Target log level/severity"</literal>\
<literal type="string">" (0:SILLY, 1:DEBUG, 2:VERBOSE, 3:INFO, 4:WARN, 5:ERROR, 6:FATAL)"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_LOGTRAPLEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"log.traplevel"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>R_LOGLVL_FATAL</name></expr></else></ternary></expr></argument>, <argument><expr><name>cb_log_config_traplevel</name></expr></argument>, <argument><expr><literal type="string">"Log level for trapping R2 when hit"</literal>\
<literal type="string">" (0:SILLY, 1:VERBOSE, 2:DEBUG, 3:INFO, 4:WARN, 5:ERROR, 6:FATAL)"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_LOGFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"log.file"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cb_log_config_file</name></expr></argument>, <argument><expr><literal type="string">"Logging output filename / path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_LOGSRCINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"log.srcinfo"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cb_log_config_srcinfo</name></expr></argument>, <argument><expr><literal type="string">"Should the log output contain src info (filename:lineno)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_LOGCOLORS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"log.colors"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cb_log_config_colors</name></expr></argument>, <argument><expr><literal type="string">"Should the log output use colors (TODO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"log.events"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_log_events</name></expr></argument>, <argument><expr><literal type="string">"Remote HTTP server to sync events with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.prefix"</literal></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>, <argument><expr><literal type="string">"Default prefix for zignatures matches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zign.maxsz"</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="string">"Maximum zignature length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zign.minsz"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Minimum zignature length for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zign.mincc"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"Minimum cyclomatic complexity for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.graph"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use graph metrics for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use bytes patterns for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.offset"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use original offset for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.refs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use references for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.hash"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use Hash for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.types"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use types for matching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.autoload"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Autoload all zignatures located in "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_ZIGNS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.diff.bthresh"</literal></expr></argument>, <argument><expr><literal type="string">"1.0"</literal></expr></argument>, <argument><expr><literal type="string">"Threshold for diffing zign bytes [0, 1] (see zc?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"zign.diff.gthresh"</literal></expr></argument>, <argument><expr><literal type="string">"1.0"</literal></expr></argument>, <argument><expr><literal type="string">"Threshold for diffing zign graphs [0, 1] (see zc?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"diff.sort"</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_diff_sort</name></expr></argument>, <argument><expr><literal type="string">"Specify function diff sorting column see (e diff.sort=?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"diff.from"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Set source diffing address for px (uses cc command)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"diff.to"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Set destination diffing address for px (uses cc command)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"diff.bare"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Never show function names in diff output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"diff.levenstein"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use faster (and buggy) levenstein algorithm for buffer distance diffing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dir.depth"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"Maximum depth when searching recursively for files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.dbgsnap"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgsnap</name></expr></argument>, <argument><expr><literal type="string">"Path to session dump files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_MAGIC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dir.prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.magic"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"Path to r_magic files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_PLUGINS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dir.prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.plugins"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"Path to plugin files to be loaded at startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.source"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dirsrc</name></expr></argument>, <argument><expr><literal type="string">"Path to find source files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.types"</literal></expr></argument>, <argument><expr><literal type="string">"/usr/include"</literal></expr></argument>, <argument><expr><literal type="string">"Default path to look for cparse type files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.libs"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Specify path to find libraries to load when bin.libs=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_SYS_HOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.home"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr></then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dirhome</name></expr></argument>, <argument><expr><literal type="string">"Path for the home directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_SYS_TMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.tmp"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dirtmp</name></expr></argument>, <argument><expr><literal type="string">"Path of the tmp directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.projects"</literal></expr></argument>, <argument><expr><literal type="string">"/data/data/org.radare.radare2installer/radare2/projects"</literal></expr></argument>, <argument><expr><literal type="string">"Default path for projects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dir.projects"</literal></expr></argument>, <argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_PROJECTS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Default path for projects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dir.zigns"</literal></expr></argument>, <argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_ZIGNS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dirzigns</name></expr></argument>, <argument><expr><literal type="string">"Default path for zignatures (see zo command)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"stack.reg"</literal></expr></argument>, <argument><expr><literal type="string">"SP"</literal></expr></argument>, <argument><expr><literal type="string">"Which register to use as stack pointer in the visual debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"stack.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show bytes instead of words in stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"stack.anotated"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show anotated hexdump in visual debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"stack.size"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"Size in bytes of stack hexdump in visual debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"stack.delta"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Delta for the stack dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.libs"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_libs</name></expr></argument>, <argument><expr><literal type="string">"If set stop when loading matching libname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.skipover"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Make dso perform a dss (same goes for esil and visual/graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"dbg.hwbp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Set HW or SW breakpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.unlibs"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_unlibs</name></expr></argument>, <argument><expr><literal type="string">"If set stop when unloading matching libname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.verbose"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_verbose</name></expr></argument>, <argument><expr><literal type="string">"Verbose debug output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.slow"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show stack and regs in visual mode in a slow but verbose mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.funcarg"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display arguments to function call in visual mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.bpinmaps"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_bpinmaps</name></expr></argument>, <argument><expr><literal type="string">"Activate breakpoints only if they are inside a valid map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.forks"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_forks</name></expr></argument>, <argument><expr><literal type="string">"Stop execution if fork() is done (see dbg.threads)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"dbg.btalgo"</literal></expr></argument>, <argument><expr><literal type="string">"fuzzy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_btalgo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select backtrace algorithm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="string">"fuzzy"</literal></expr></argument>, <argument><expr><literal type="string">"anal"</literal></expr></argument>, <argument><expr><literal type="string">"trace"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.threads"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_stopthreads</name></expr></argument>, <argument><expr><literal type="string">"Stop all threads when debugger breaks (see dbg.forks)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.clone"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_clone</name></expr></argument>, <argument><expr><literal type="string">"Stop execution if new thread is created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.aftersyscall"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_aftersc</name></expr></argument>, <argument><expr><literal type="string">"Stop execution before the syscall is executed (see dcs)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.profile"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_runprofile</name></expr></argument>, <argument><expr><literal type="string">"Path to RRunProfile file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.args"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_args</name></expr></argument>, <argument><expr><literal type="string">"Set the args of the program to debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.follow.child"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_follow_child</name></expr></argument>, <argument><expr><literal type="string">"Continue tracing the child process on fork. By default the parent process is traced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.status"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgstatus</name></expr></argument>, <argument><expr><literal type="string">"Set cmd.prompt to '.dr*' or '.dr*;drd;sr PC;pi 1;s-'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.backend"</literal></expr></argument>, <argument><expr><literal type="string">"native"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbackend</name></expr></argument>, <argument><expr><literal type="string">"Select the debugger backend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.backend"</literal></expr></argument>, <argument><expr><literal type="string">"esil"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbackend</name></expr></argument>, <argument><expr><literal type="string">"Select the debugger backend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"dbg.bep"</literal></expr></argument>, <argument><expr><literal type="string">"loader"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Break on entrypoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"loader"</literal></expr></argument>, <argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><literal type="string">"constructor"</literal></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"dbg.follow"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"dbg.follow"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"dbg.follow"</literal></expr></argument>, <argument><expr><literal type="string">"Follow program counter when pc &gt; core-&gt;offset + dbg.follow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.rebase"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Rebase anal/meta/comments/flags when reopening file in debugger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.swstep"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_swstep</name></expr></argument>, <argument><expr><literal type="string">"Force use of software steps (code analysis+breakpoint)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.trace.inrange"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"While tracing, avoid following calls outside specified range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.trace.libs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Trace library code too"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.exitkills"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Kill process on exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.exe.path"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Path to binary being debugged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.execs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_execs</name></expr></argument>, <argument><expr><literal type="string">"Stop execution if new thread is created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.gdb.page_size"</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_gdb_page_size</name></expr></argument>, <argument><expr><literal type="string">"Page size on gdb target (useful for QEMU)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.gdb.retries"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbg_gdb_retries</name></expr></argument>, <argument><expr><literal type="string">"Number of retries before gdb packet read times out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.consbreak"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_consbreak</name></expr></argument>, <argument><expr><literal type="string">"SIGINT handle for attached processes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_getter</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"dbg.swstep"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><name>__dbg_swstep_getter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__mips__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.bpsize"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbpsize</name></expr></argument>, <argument><expr><literal type="string">"Size of software breakpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.bpsize"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbpsize</name></expr></argument>, <argument><expr><literal type="string">"Size of software breakpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"dbg.bpsysign"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Ignore system breakpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.btdepth"</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dbgbtdepth</name></expr></argument>, <argument><expr><literal type="string">"Depth of backtrace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"dbg.trace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_trace</name></expr></argument>, <argument><expr><literal type="string">"Trace program execution (see asm.trace)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"dbg.trace.tag"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_tracetag</name></expr></argument>, <argument><expr><literal type="string">"Trace tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.xterm"</literal></expr></argument>, <argument><expr><literal type="string">"xterm -bg black -fg gray -e"</literal></expr></argument>, <argument><expr><literal type="string">"xterm command to spawn with V@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"cmd.depth"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmddepth</name></expr></argument>, <argument><expr><literal type="string">"Maximum command depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.bp"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when a breakpoint is hit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.onsyscall"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when a syscall is hit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"cmd.hitinfo"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_debug_hitinfo</name></expr></argument>, <argument><expr><literal type="string">"Show info when a tracepoint/breakpoint is hit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.stack"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Command to display the stack in visual debug mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.cprompt"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Column visual prompt commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.gprompt"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Graph visual prompt commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.hit"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when a search hit is found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.open"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when file is opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.load"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when binary is loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>cmdpdc</name> <init>= <expr><call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmdpdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>cmdpdc</name></expr></argument>, <argument><expr><literal type="string">"Select pseudo-decompiler command to run after pdc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_cmdpdc_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmdpdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.log"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmdlog</name></expr></argument>, <argument><expr><literal type="string">"Every time a new T log is added run this command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Prompt commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.repeat"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmdrepeat</name></expr></argument>, <argument><expr><literal type="string">"Empty command an alias for '..' (repeat last command)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.fcn.new"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when new function is analyzed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.fcn.delete"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when a function is deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.fcn.rename"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Run when a function is renamed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.visual"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Replace current print mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"cmd.vprompt"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Visual prompt commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.step"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_step</name></expr></argument>, <argument><expr><literal type="string">"Command to run before performing a step in the emulator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.stepout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_step_out</name></expr></argument>, <argument><expr><literal type="string">"Command to run after performing a step in the emulator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.mdev"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_mdev</name></expr></argument>, <argument><expr><literal type="string">"Command to run when memory device address is accessed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.intr"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_intr</name></expr></argument>, <argument><expr><literal type="string">"Command to run when an esil interrupt happens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.trap"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_trap</name></expr></argument>, <argument><expr><literal type="string">"Command to run when an esil trap happens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.todo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_todo</name></expr></argument>, <argument><expr><literal type="string">"Command to run when the esil instruction contains TODO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.esil.ioer"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_esil_ioer</name></expr></argument>, <argument><expr><literal type="string">"Command to run when esil fails to IO (invalid read/write)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"fs.view"</literal></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_fsview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Set visibility options for filesystems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="string">"deleted"</literal></expr></argument>, <argument><expr><literal type="string">"special"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.header"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_header</name></expr></argument>, <argument><expr><literal type="string">"Show header in hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_bytes</name></expr></argument>, <argument><expr><literal type="string">"Show bytes column in hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.ascii"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_ascii</name></expr></argument>, <argument><expr><literal type="string">"Show ascii column in hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.hdroff"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_hdroff</name></expr></argument>, <argument><expr><literal type="string">"Show aligned 1 byte in header instead of delta nibble"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.style"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_style</name></expr></argument>, <argument><expr><literal type="string">"Improve the hexdump header style"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.pairs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_pairs</name></expr></argument>, <argument><expr><literal type="string">"Show bytes paired in 'px' hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.align"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_align</name></expr></argument>, <argument><expr><literal type="string">"Align hexdump with flag + flagsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.section"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hex_section</name></expr></argument>, <argument><expr><literal type="string">"Show section name before the offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.unalloc"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_unalloc</name></expr></argument>, <argument><expr><literal type="string">"Check each byte if it's allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.unalloc.ch"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_unalloc_ch</name></expr></argument>, <argument><expr><literal type="string">"Hexdump char if byte is unallocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.compact"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hexcompact</name></expr></argument>, <argument><expr><literal type="string">"Show smallest 16 byte col hexdump (60 columns)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"cmd.hexcursor"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_cmd_hexcursor</name></expr></argument>, <argument><expr><literal type="string">"If set and cursor is enabled display given pf format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"hex.flagsz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"If non zero, overrides the flag size in pxa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"hex.cols"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hexcols</name></expr></argument>, <argument><expr><literal type="string">"Number of columns in hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"hex.depth"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Maximal level of recurrence while telescoping memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"hex.onechar"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Number of columns in hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"hex.stride"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hexstride</name></expr></argument>, <argument><expr><literal type="string">"Line stride in hexdump (default is 0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"hex.comments"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_hexcomments</name></expr></argument>, <argument><expr><literal type="string">"Show comments in 'px' hexdump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.log"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show HTTP requests processed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.sync"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Remote HTTP server to sync events with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.colon"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Only accept the : command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.logfile"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Specify a log file instead of stderr for http requests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.cors"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable CORS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.referer"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"CSFR protection if set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.dirlist"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable directory listing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.allow"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Only accept clients from the comma separated IP list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><literal type="string">"/usr/bin/openURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"/usr/bin/openURL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><literal type="string">"/system/bin/toolbox"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>,
<argument><expr><literal type="string">"LD_LIBRARY_PATH=/system/lib am start -a android.intent.action.VIEW -d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><literal type="string">"/usr/bin/xdg-open"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"xdg-open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><literal type="string">"/usr/bin/open"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"firefox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.browser"</literal></expr></argument>, <argument><expr><literal type="string">"Command to open HTTP URLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"http.maxsize"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Maximum file size for upload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.index"</literal></expr></argument>, <argument><expr><literal type="string">"index.html"</literal></expr></argument>, <argument><expr><literal type="string">"Main html file to check in directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.bind"</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"Server address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.homeroot"</literal></expr></argument>, <argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_WWWROOT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http home root directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.root"</literal></expr></argument>, <argument><expr><literal type="string">"/data/data/org.radare.radare2installer/www"</literal></expr></argument>, <argument><expr><literal type="string">"http root directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.root"</literal></expr></argument>, <argument><expr><name>R2_WWWROOT</name></expr></argument>, <argument><expr><literal type="string">"http root directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.port"</literal></expr></argument>, <argument><expr><literal type="string">"9090"</literal></expr></argument>, <argument><expr><literal type="string">"HTTP server port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.maxport"</literal></expr></argument>, <argument><expr><literal type="string">"9999"</literal></expr></argument>, <argument><expr><literal type="string">"Last HTTP server port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.ui"</literal></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><literal type="string">"Default webui (enyo, m, p, t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.sandbox"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Sandbox the HTTP server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"http.timeout"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Disconnect clients after N seconds of inactivity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"http.dietime"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Kill server after N seconds with no client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.verbose"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Output server logs to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.upget"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"/up/ answers GET requests, in addition to POST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.upload"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable file uploads to /up/&lt;filename&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.uri"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Address of HTTP proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"http.auth"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable/Disable HTTP Authentification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.authtok"</literal></expr></argument>, <argument><expr><literal type="string">"r2admin:r2admin"</literal></expr></argument>, <argument><expr><literal type="string">"HTTP Authentification user:password token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_HTTP_AUTHFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"http.authfile"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"HTTP Authentification user file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpdir</name> <operator>=</operator> <call><name>r_file_tmpdir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.uproot"</literal></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"http.uproot"</literal></expr></argument>, <argument><expr><literal type="string">"Path where files are uploaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"tcp.islocal"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Bind a loopback for tcp command server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.aeab"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show aeab info on each basic block instead of disasm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.trace"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Fold all non-traced basic blocks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.dummy"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Create dummy nodes in the graph for better layout (20% slower)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.few"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show few basic blocks in the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.comments"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show disasm comments in graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.cmtright"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show comments at right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.format"</literal></expr></argument>, <argument><expr><literal type="string">"gif"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_graphformat</name></expr></argument>, <argument><expr><literal type="string">"Graph image extension when using 'w' format (png, jpg, pdf, ps, svg, json)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.refs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Graph references in callgraphs (.agc*;aggi)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.json.usenames"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Use names instead of addresses in Global Call Graph (agCj)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.edges"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"0=no edges, 1=simple edges, 2=avoid collisions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.layout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Graph layout (0=vertical, 1=horizontal)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.linemode"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Graph edges (0=diagonal, 1=square)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.font"</literal></expr></argument>, <argument><expr><literal type="string">"Courier"</literal></expr></argument>, <argument><expr><literal type="string">"Font for dot graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.offset"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show offsets in graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show opcode bytes in graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.web"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display graph in web browser (VV)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.from"</literal></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><literal type="string">"Lower bound address when drawing global graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.to"</literal></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><literal type="string">"Upper bound address when drawing global graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"graph.scroll"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Scroll speed in ascii-art graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.invscroll"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Invert scroll direction in ascii-art graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.title"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Title of the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.body"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show body of the nodes in the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.bubble"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show nodes as bubbles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.ntitles"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Display title of node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.node"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Graphviz node style. (color=gray, style=filled shape=box)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.edge"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Graphviz edge style. (arrowhead=\"vee\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.spline"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Graphviz spline style. (splines=\"ortho\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.graph"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Graphviz global style attributes. (bgcolor=white)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.gv.current"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Highlight the current node in graphviz graph."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.nodejmps"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Enables shortcuts for every node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"graph.hints"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show true (t) and false (f) hints for conditional edges in graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"graph.dotted"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_dotted</name></expr></argument>, <argument><expr><literal type="string">"Dotted lines for conditional jumps in graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"hud.path"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Set a custom path for the HUD file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"esil.exectrap"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_exectrap</name></expr></argument>, <argument><expr><literal type="string">"trap when executing code in non-executable memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"esil.iotrap"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_iotrap</name></expr></argument>, <argument><expr><literal type="string">"invalid read or writes produce a trap exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.romem"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Set memory as read-only for ESIL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.stats"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Statistics from ESIL emulation stored in sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"esil.nonull"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Prevent memory read, memory write at null pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"esil.mdev.range"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_mdevrange</name></expr></argument>, <argument><expr><literal type="string">"Specify a range of memory to be handled by cmd.esil.mdev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__EMSCRIPTEN__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_config_set_cb</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"scr.fgets"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>cb_scrfgets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>r_config_set_cb</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"scr.fgets"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>cb_scrfgets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"scr.fgets"</literal></expr></argument>, <argument><expr><literal type="string">"Use fgets() instead of dietline for prompt input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.echo"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_screcho</name></expr></argument>, <argument><expr><literal type="string">"Show rcons output in realtime to stderr and buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.linesleep"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrlinesleep</name></expr></argument>, <argument><expr><literal type="string">"Flush sleeping some ms in every line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.maxtab"</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_completion_maxtab</name></expr></argument>, <argument><expr><literal type="string">"Change max number of auto completion suggestions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.pagesize"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrpagesize</name></expr></argument>, <argument><expr><literal type="string">"Flush in pages when scr.linesleep is != 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.flush"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrflush</name></expr></argument>, <argument><expr><literal type="string">"Force flush to console in realtime (breaks scripting)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.slow"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Do slow stuff on visual mode like RFlag.get_at(true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.popup"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_prompt_popup</name></expr></argument>, <argument><expr><literal type="string">"Show widget dropdown for autocomplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.ansicon"</literal></expr></argument>, <argument><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>ansicon</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>scr_ansicon</name></expr></argument>, <argument><expr><literal type="string">"Use ANSICON mode or not on Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.responsive"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Auto-adjust Visual depending on screen (e.g. unset asm.bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"scr.wheel.speed"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Mouse wheel speed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.responsive"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Auto-adjust Visual depending on screen (e.g. unset asm.bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"scr.wheel.speed"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Mouse wheel speed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.wheel.nkey"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use sn/sp and scr.nkey on wheel instead of scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.wheel"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Mouse wheel in Visual; temporaryly disable/reenable by right click/Enter)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.layout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Name of the selected layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.breakword"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrbreakword</name></expr></argument>, <argument><expr><literal type="string">"Emulate console break (^C) when a word is printed (useful for pD)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.breaklines"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_breaklines</name></expr></argument>, <argument><expr><literal type="string">"Break lines in Visual instead of truncating them"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.gadgets"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_gadgets</name></expr></argument>, <argument><expr><literal type="string">"Run pg in prompt, visual and panels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.panelborder"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Specify panels border active area (0 by default)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.columns"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrcolumns</name></expr></argument>, <argument><expr><literal type="string">"Force console column count (width)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.dumpcols"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Prefer pC commands before p ones"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrrows</name></expr></argument>, <argument><expr><literal type="string">"Force console row count (height) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.rows"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_rows</name></expr></argument>, <argument><expr><literal type="string">"Force console row count (height) (duplicate?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.fps"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_fps</name></expr></argument>, <argument><expr><literal type="string">"Show FPS in Visual"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.fix.rows"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_fixrows</name></expr></argument>, <argument><expr><literal type="string">"Workaround for Linux TTY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.fix.columns"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_fixcolumns</name></expr></argument>, <argument><expr><literal type="string">"Workaround for Prompt iOS SSH client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.highlight"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrhighlight</name></expr></argument>, <argument><expr><literal type="string">"Highlight that word at RCons level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrint</name></expr></argument>, <argument><expr><literal type="string">"Start in interactive mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.bgfill"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_bgfill</name></expr></argument>, <argument><expr><literal type="string">"Fill background for ascii art when possible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"scr.feedback"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Set visual feedback level (1=arrow on jump, 2=every key (useful for videos))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.html"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrhtml</name></expr></argument>, <argument><expr><literal type="string">"Disassembly uses HTML syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"scr.nkey"</literal></expr></argument>, <argument><expr><literal type="string">"flag"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrnkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Select visual seek mode (affects n/N visual commands)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"fun"</literal></expr></argument>, <argument><expr><literal type="string">"hit"</literal></expr></argument>, <argument><expr><literal type="string">"flag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.pager"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_pager</name></expr></argument>, <argument><expr><literal type="string">"System program (or '..') to use when output exceeds screen boundaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"scr.scrollbar"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Show flagzone (fz) scrollbar in visual mode (0=no,1=right,2=top,3=bottom)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.randpal"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Random color palete or just get the next one from 'eco'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.highlight.grep"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_color_grep_highlight</name></expr></argument>, <argument><expr><literal type="string">"Highlight (INVERT) the grepped words"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.file"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show user prompt file (used by r2 -q)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.flag"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show flag name in the prompt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt.sect"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Show section name in the prompt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.tts"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use tts if available by a command (see ic)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.hist.block"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_histblock</name></expr></argument>, <argument><expr><literal type="string">"Use blocks for histogram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.prompt"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrprompt</name></expr></argument>, <argument><expr><literal type="string">"Show user prompt (used by r2 -q)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.tee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_teefile</name></expr></argument>, <argument><expr><literal type="string">"Pipe output to file of this name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.seek"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Seek to the specified address on startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>R_PRINT_FLAGS_COLOR</name><operator>)</operator></expr>?</condition><then><expr><name>COLOR_MODE_16</name></expr></then><else>:<expr><name>COLOR_MODE_DISABLED</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_color</name></expr></argument>, <argument><expr><literal type="string">"Enable colors (0: none, 1: ansi, 2: 256 colors, 3: truecolor)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_getter</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><operator>(</operator><name>RConfigCallback</name><operator>)</operator><name>cb_color_getter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.color.grep"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scr_color_grep</name></expr></argument>, <argument><expr><literal type="string">"Enable colors when using ~grep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.color.pipe"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Enable colors when using pipes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.color.ops"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Colorize numbers and registers in opcodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.color.args"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Colorize arguments and variables of functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.color.bytes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Colorize bytes that represent the opcodes of the instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.null"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrnull</name></expr></argument>, <argument><expr><literal type="string">"Show no output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><call><name>r_cons_is_utf8</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_utf8</name></expr></argument>, <argument><expr><literal type="string">"Show UTF-8 characters instead of ANSI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"scr.utf8.curvy"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_utf8_curvy</name></expr></argument>, <argument><expr><literal type="string">"Show curved UTF-8 corners (requires scr.utf8)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.demo"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Use demoscene effects if available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.histsave"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Always save history on exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"scr.strconv"</literal></expr></argument>, <argument><expr><literal type="string">"asciiesc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_scrstrconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Convert string before display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"asciiesc"</literal></expr></argument>, <argument><expr><literal type="string">"asciidot"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"scr.confirmquit"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Confirm on quit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"str.escbslash"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_str_escbslash</name></expr></argument>, <argument><expr><literal type="string">"Escape the backslash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"search.contiguous"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_contiguous</name></expr></argument>, <argument><expr><literal type="string">"Accept contiguous/adjacent search hits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"search.align"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_searchalign</name></expr></argument>, <argument><expr><literal type="string">"Only catch aligned search hits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.chunk"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Chunk size for /+ (default size is asm.bits/8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.esilcombo"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Stop search after N consecutive hits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.distance"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Search string distance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"search.flags"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"All search results are flagged, otherwise only printed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"search.overlap"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Look for overlapped search hits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.maxhits"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of hits (0: no limit)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.from"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Search start address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"search.in"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_searchin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Specify search boundaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>,
<argument><expr><literal type="string">"bin.section"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.r"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rw"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.wx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.x"</literal></expr></argument>,
<argument><expr><literal type="string">"io.map"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.stack"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.heap"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.map"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"anal.fcn"</literal></expr></argument>, <argument><expr><literal type="string">"anal.bb"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"search.kwidx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_search_kwidx</name></expr></argument>, <argument><expr><literal type="string">"Store last search index count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"search.prefix"</literal></expr></argument>, <argument><expr><literal type="string">"hit"</literal></expr></argument>, <argument><expr><literal type="string">"Prefix name in search hits label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"search.show"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Show search results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"search.to"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Search end address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"rop.len"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Maximum ROP gadget length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rop.sdb"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Cache results in sdb (experimental)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rop.db"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Categorize rop gadgets in sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rop.subchains"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display every length gadget from rop.len=X to 2 in /Rl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rop.conditional"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Include conditional jump, calls and returns in ropsearch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rop.comments"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"Display comments in rop search output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_cache</name></expr></argument>, <argument><expr><literal type="string">"Change both of io.cache.{read,write}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.cache.auto"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_cache_mode</name></expr></argument>, <argument><expr><literal type="string">"Automatic cache all reads in the IO backend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.cache.read"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_cache_read</name></expr></argument>, <argument><expr><literal type="string">"Enable read cache for vaddr (or paddr when io.va=0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.cache.write"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_cache_write</name></expr></argument>, <argument><expr><literal type="string">"Enable write cache for vaddr (or paddr when io.va=0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.pcache"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_iopcache</name></expr></argument>, <argument><expr><literal type="string">"io.cache for p-level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.pcache.write"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_iopcachewrite</name></expr></argument>, <argument><expr><literal type="string">"Enable write-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.pcache.read"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_iopcacheread</name></expr></argument>, <argument><expr><literal type="string">"Enable read-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.ff"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_ioff</name></expr></argument>, <argument><expr><literal type="string">"Fill invalid buffers with 0xff instead of returning error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"io.exec"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"See !!r2 -h~-x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETICB</name> <argument_list>(<argument><expr><literal type="string">"io.0xff"</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_oxff</name></expr></argument>, <argument><expr><literal type="string">"Use this value instead of 0xff to fill unallocated areas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.aslr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_ioaslr</name></expr></argument>, <argument><expr><literal type="string">"Disable ASLR for spawn and such"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.va"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_iova</name></expr></argument>, <argument><expr><literal type="string">"Use virtual address layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.pava"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_io_pava</name></expr></argument>, <argument><expr><literal type="string">"Use EXPERIMENTAL paddr -&gt; vaddr address mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"io.autofd"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_ioautofd</name></expr></argument>, <argument><expr><literal type="string">"Change fd when opening a new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.desc"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"User defined file description (used by projects)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.md5"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"MD5 sum of current file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"file.info"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"RBin info loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.offset"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Offset where the file will be mapped at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"file.path"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_filepath</name></expr></argument>, <argument><expr><literal type="string">"Path of current file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.lastpath"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Path of current file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.type"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Type of current file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"file.loadalign"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"Alignment of load addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"file.openmany"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of files opened at once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"file.location"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Is the file 'local', 'remote', or 'memory'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"magic.depth"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"Recursivity depth in magic description strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETBPREF</name> <argument_list>(<argument><expr><literal type="string">"rap.loop"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"Run rap as a forever-listening daemon (=:9090)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"key.s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"override step into action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETPREF</name> <argument_list>(<argument><expr><literal type="string">"key.S"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"override step over action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"key.f%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><literal type="string">"Run this when F%d key is pressed in visual mode"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<default>default:</default> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_desc</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"zoom.byte"</literal></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_zoombyte</name></expr></argument>, <argument><expr><literal type="string">"Zoom callback to calculate each byte (See pz? for help)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zoom.from"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Zoom start address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zoom.maxsz"</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="string">"Zoom max size of block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"zoom.to"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Zoom end address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODECB</name> <argument_list>(<argument><expr><literal type="string">"zoom.in"</literal></expr></argument>, <argument><expr><literal type="string">"io.map"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_searchin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETDESC</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"Specify boundaries for zoom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETOPTIONS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>,
<argument><expr><literal type="string">"bin.section"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.r"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rw"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.rx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.wx"</literal></expr></argument>, <argument><expr><literal type="string">"bin.sections.x"</literal></expr></argument>,
<argument><expr><literal type="string">"io.map"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"io.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.stack"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.heap"</literal></expr></argument>,
<argument><expr><literal type="string">"dbg.map"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rwx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.r"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rw"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.rx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.wx"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.maps.x"</literal></expr></argument>,
<argument><expr><literal type="string">"anal.fcn"</literal></expr></argument>, <argument><expr><literal type="string">"anal.bb"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETI</name> <argument_list>(<argument><expr><literal type="string">"lines.from"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Start address for line seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"lines.to"</literal></expr></argument>, <argument><expr><literal type="string">"$s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_linesto</name></expr></argument>, <argument><expr><literal type="string">"End address for line seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCB</name> <argument_list>(<argument><expr><literal type="string">"lines.abs"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_linesabs</name></expr></argument>, <argument><expr><literal type="string">"Enable absolute line numbers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_lock</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_parse_radare2rc</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>has_debug</name> <init>= <expr><call><name>r_sys_getenv_asbool</name> <argument_list>(<argument><expr><literal type="string">"R_DEBUG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homerc</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><literal type="string">".radare2rc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>homerc</name> <operator>&amp;&amp;</operator> <call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"USER CONFIG loaded from %s\n"</literal></expr></argument>, <argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd_file</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>homerc</name> <operator>=</operator> <call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_RC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>homerc</name> <operator>&amp;&amp;</operator> <call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"USER CONFIG loaded from %s\n"</literal></expr></argument>, <argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd_file</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>homerc</name> <operator>=</operator> <call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_RC_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>homerc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>homerc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"USER CONFIG loaded from %s\n"</literal></expr></argument>, <argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd_file</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homerc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_config_update</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>cmdpdc</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_cmdpdc_options</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmdpdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
