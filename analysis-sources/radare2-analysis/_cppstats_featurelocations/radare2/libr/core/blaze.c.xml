<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\blaze.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>bb_type</name> <block>{
<decl><name>TRAP</name></decl>,
<decl><name>NORMAL</name></decl>,
<decl><name>JUMP</name></decl>,
<decl><name>FAIL</name></decl>,
<decl><name>CALL</name></decl>,
<decl><name>END</name></decl>,
}</block></enum></type> <name>bb_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bb</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>jump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>fail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>called</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_type_t</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>bb_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fcn</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ends</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcn_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__is_data_block_cb</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>block_exists</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>block_exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__isdata</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>block_exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_blocks_foreach_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>__is_data_block_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_exists</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_meta_find_list_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>meta</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_FORMAT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>meta</name><operator>-&gt;</operator><name>from</name></name><operator>)</operator></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block>
<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fcnAddBB</name> <parameter_list>(<parameter><decl><type><name>fcn_t</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>bb_t</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No function given to add a basic block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>score</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>ends</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Block list not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fcn_t</name><modifier>*</modifier></type> <name>fcnNew</name> <parameter_list>(<parameter><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>fcn_t</name><modifier>*</modifier></type> <name>fcn</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>fcn_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory for function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fcnAddBB</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to add block to function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fcn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fcnFree</name> <parameter_list>(<parameter><decl><type><name>fcn_t</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bbCMP</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initBB</name> <parameter_list>(<parameter><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>bb_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reached</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>called</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>fail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>reached</name></name> <operator>=</operator> <name>reached</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>called</name></name> <operator>=</operator> <name>called</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addBB</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>block_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>bb_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>bb_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to calloc mem for new basic block!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>initBB</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&lt;</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>jump_bb</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>bb_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jump_bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory for jump block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>initBB</name> <argument_list>(<argument><expr><name>jump_bb</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>CALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>initBB</name> <argument_list>(<argument><expr><name>jump_bb</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>JUMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>jump_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&lt;</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>fail_bb</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>bb_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail_bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory for fail block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>initBB</name> <argument_list>(<argument><expr><name>fail_bb</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>fail_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_block</name><parameter_list>(<parameter><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"s: 0x%"</literal><name>PFMT64x</name><literal type="string">" e: 0x%"</literal><name>PFMT64x</name><literal type="string">" j: 0x%"</literal><name>PFMT64x</name><literal type="string">" f: 0x%"</literal><name>PFMT64x</name><literal type="string">" t: %d\n"</literal></expr></argument>
, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_blocks</name> <parameter_list>(<parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkFunction</name><parameter_list>(<parameter><decl><type><name>fcn_t</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fcn</name> <operator>&amp;&amp;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>ends</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printFunctionCommands</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>fcn_t</name><modifier>*</modifier></type> <name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No function given to print\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>fcn_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.fcnprefix"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <literal type="string">"fcn"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_name</name> <init>= <expr><ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"af+ 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>fcn_iter</argument>, <argument>cur</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"afb+ 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" %llu 0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>
, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createFunction</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>fcn_t</name><modifier>*</modifier></type> <name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No function given to create\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>fcn_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.fcnprefix"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <literal type="string">"fcn"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_anal_function_new</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to create new function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><call><name>r_anal_cc_default</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_FCN_TYPE_FCN</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>fcn_iter</argument>, <argument>cur</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__isdata</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_fcn_add_bb</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_add_function</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_function_free</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fhandled</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt("handled.%"PFMT64x"", x)</cpp:value></cpp:define>
<function><type><name>R_API</name> <name>bool</name></type> <name>core_anal_bbs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No valid offset given to analyze\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>b_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>block_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid_instruction_barrier</name> <init>= <expr><operator>-</operator><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debug</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nopskip</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.nopskip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block_list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to create block_list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Analyzing [0x%08"</literal><name>PFMT64x</name><literal type="string">"-0x%08"</literal><name>PFMT64x</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Creating basic blocks\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>&gt;=</operator> <name>base</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_score</name> <operator>&lt;</operator> <name>invalid_instruction_barrier</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>cur</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dsize</name> <init>= <expr><call><name>__isdata</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>dsize</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>r_core_anal_op</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name> <operator>||</operator> <operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"? Bad op at: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot analyze opcode at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_NOP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nopskip</name> <operator>&amp;&amp;</operator> <name>b_start</name> <operator>==</operator> <name>start</name> <operator>+</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_noreturn_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>CALL</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>b_start</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>:</case>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Found %d basic blocks\n"</literal></expr></argument>, <argument><expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to create resulting list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to initialize sdb db\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>bbCMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sorting all blocks done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Creating the complete graph\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>r_list_pop</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get next block from list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>next_block</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator> <call><name>r_list_iter_get_data</name> <argument_list>(<argument><expr><name><name>block_list</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No next block to compare with!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>reached</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next_block</name> <operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>jump</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>fail</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Trying to create functions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>result</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>called</name></name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fcn_t</name><modifier>*</modifier></type> <name>current_function</name> <init>= <expr><call><name>fcnNew</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>r_stack_new</name> <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>jump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>fail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push initial block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator> <call><name>r_stack_pop</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>score</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fcnFree</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_function</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fcnAddBB</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get jump block at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>jump</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push jump block to stack\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get fail block at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>fail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push jump block to stack\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>current_function</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>checkFunction</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printFunctionCommands</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>createFunction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fcnFree</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>core_anal_bbs_range</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No valid offset given to analyze\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>b_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>block_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid_instruction_barrier</name> <init>= <expr><operator>-</operator><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debug</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name><name>lista</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block_list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to create block_list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Analyzing [0x%08"</literal><name>PFMT64x</name><literal type="string">"-0x%08"</literal><name>PFMT64x</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Creating basic blocks\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lista</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>b_start</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lista</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name><name>lista</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lista</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_score</name> <operator>&lt;</operator> <name>invalid_instruction_barrier</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>block_list</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>END</name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b_start</name> <operator>+</operator> <name>cur</name> <operator>==</operator> <name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>bFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bFound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>r_core_anal_op</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name> <operator>||</operator> <operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"? Bad op at: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>b_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot analyze opcode at %"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>END</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>

<expr_stmt><expr><call><name>addBB</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>block_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_start</name> <operator>=</operator> <name>b_start</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lista</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>block_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>:</case>
<expr_stmt><expr><name>block_score</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Found %d basic blocks\n"</literal></expr></argument>, <argument><expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to create resulting list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to initialize sdb db\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>bbCMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sorting all blocks done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Creating the complete graph\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>r_list_pop</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get next block from list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block_list</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>next_block</name> <init>= <expr><operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator><call><name>r_list_iter_get_data</name> <argument_list>(<argument><expr><name><name>block_list</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No next block to compare with!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>reached</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next_block</name> <operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>jump</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>fail</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>next_block</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_block</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_block</name><operator>-&gt;</operator><name>reached</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Trying to create functions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>result</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>reached</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fcn_t</name><modifier>*</modifier></type> <name>current_function</name> <init>= <expr><call><name>fcnNew</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>r_stack_new</name> <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>jump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>fail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bb_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push initial block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>bb_t</name><operator>*</operator><operator>)</operator><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>score</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fcnFree</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_function</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fcnAddBB</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get jump block at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>jump</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push jump block to stack\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name> <operator>&lt;</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>Fhandled</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"bb.0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get fail block at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>fail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to push jump block to stack\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>current_function</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_function</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_function</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkFunction</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printFunctionCommands</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>createFunction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>current_function</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fcnFree</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fcnFree</name> <argument_list>(<argument><expr><name>current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
