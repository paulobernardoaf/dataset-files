<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\corelog.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_log_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>id</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrpool</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name>id</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s[%d,\"%s\"]"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>printed</name></expr>?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"T %s\"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d %s\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>printed</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nth</name> <operator>&amp;&amp;</operator> <name>printed</name> <operator>&gt;=</operator> <name>nth</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_strpool_next</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_strpool_get_index</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCoreLog</name> <modifier>*</modifier></type><name>r_core_log_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCoreLog</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCoreLog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_log_init</name> <argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>log</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_log_init</name><parameter_list>(<parameter><decl><type><name>RCoreLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <call><name>r_strpool_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_log_free</name><parameter_list>(<parameter><decl><type><name>RCoreLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_strpool_free</name> <argument_list>(<argument><expr><name><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_log_run</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_buf</name></decl></parameter>, <parameter><decl><type><name>RCoreLogCallback</name></type> <name>runLine</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>runLine</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_core_log_get</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"http.sync"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>host</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><ternary><condition><expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/cmd/T%%20%d"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/cmd/T"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_socket_http_get</name> <argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>res</name></expr>?</condition><then> <expr><name>res</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_log_add</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>inProcess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strpool_append</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inProcess</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inProcess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inProcess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_log_del</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strpool_empty</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name> <operator>+=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_strpool_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strpool_empty</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strpool_slice</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strpool_empty</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
