<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\cmd_help.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cons.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>vernum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dash</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_percent</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage:"</literal></expr>, <expr><literal type="string">"%[name[=value]]"</literal></expr>, <expr><literal type="string">"Set each NAME to VALUE in the environment"</literal></expr>,
<expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"list all environment variables"</literal></expr>,
<expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">"SHELL"</literal></expr>, <expr><literal type="string">"prints SHELL value"</literal></expr>,
<expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">"TMPDIR=/tmp"</literal></expr>, <expr><literal type="string">"sets TMPDIR value to \"/tmp\""</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_env</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"\nEnvironment:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"R2_FILE"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"file name"</literal></expr>,
<expr><literal type="string">"R2_OFFSET"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"10base offset 64bit value"</literal></expr>,
<expr><literal type="string">"R2_BYTES"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"TODO: variable with bytes in curblock"</literal></expr>,
<expr><literal type="string">"R2_XOFFSET"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"same as above, but in 16 base"</literal></expr>,
<expr><literal type="string">"R2_BSIZE"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"block size"</literal></expr>,
<expr><literal type="string">"R2_ENDIAN"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"'big' or 'little'"</literal></expr>,
<expr><literal type="string">"R2_IOVA"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"is io.va true? virtual addressing (1,0)"</literal></expr>,
<expr><literal type="string">"R2_DEBUG"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"debug mode enabled? (1,0)"</literal></expr>,
<expr><literal type="string">"R2_BLOCK"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"TODO: dump current block to tmp file"</literal></expr>,
<expr><literal type="string">"R2_SIZE"</literal></expr>, <expr><literal type="string">""</literal></expr>,<expr><literal type="string">"file size"</literal></expr>,
<expr><literal type="string">"R2_ARCH"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"value of asm.arch"</literal></expr>,
<expr><literal type="string">"R2_BITS"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"arch reg size (8, 16, 32, 64)"</literal></expr>,
<expr><literal type="string">"RABIN2_LANG"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"assume this lang to demangle"</literal></expr>,
<expr><literal type="string">"RABIN2_DEMANGLE"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"demangle or not"</literal></expr>,
<expr><literal type="string">"RABIN2_PDBSERVER"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"e pdb.server"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_exclamation</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage:"</literal></expr>, <expr><literal type="string">"!&lt;cmd&gt;"</literal></expr>, <expr><literal type="string">" Run given command as in system(3)"</literal></expr>,
<expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"list all historic commands"</literal></expr>,
<expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"execute 'ls' in shell"</literal></expr>,
<expr><literal type="string">"!*"</literal></expr>, <expr><literal type="string">"r2p x"</literal></expr>, <expr><literal type="string">"run r2 command via r2pipe in current session"</literal></expr>,
<expr><literal type="string">"!!"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"save command history to hist file"</literal></expr>,
<expr><literal type="string">"!!"</literal></expr>, <expr><literal type="string">"ls~txt"</literal></expr>, <expr><literal type="string">"print output of 'ls' and grep for 'txt'"</literal></expr>,
<expr><literal type="string">"!!!"</literal></expr>, <expr><literal type="string">"cmd [args|$type]"</literal></expr>, <expr><literal type="string">"adds the autocomplete value"</literal></expr>,
<expr><literal type="string">"!!!-"</literal></expr>, <expr><literal type="string">"cmd [args]"</literal></expr>, <expr><literal type="string">"removes the autocomplete value"</literal></expr>,
<expr><literal type="string">".!"</literal></expr>, <expr><literal type="string">"rabin2 -rpsei ${FILE}"</literal></expr>, <expr><literal type="string">"run each output line as a r2 cmd"</literal></expr>,
<expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"echo $R2_SIZE"</literal></expr>, <expr><literal type="string">"display file size"</literal></expr>,
<expr><literal type="string">"!-"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"clear history in current session"</literal></expr>,
<expr><literal type="string">"!-*"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"clear and save empty history log"</literal></expr>,
<expr><literal type="string">"!=!"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"enable remotecmd mode"</literal></expr>,
<expr><literal type="string">"=!="</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"disable remotecmd mode"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_root</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"%var"</literal></expr>, <expr><literal type="string">"=value"</literal></expr>, <expr><literal type="string">"alias for 'env' command"</literal></expr>,
<expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"[?] off[=[0x]value]"</literal></expr>, <expr><literal type="string">"pointer read/write data/values (see ?v, wx, wv)"</literal></expr>,
<expr><literal type="string">"(macro arg0 arg1)"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"manage scripting macros"</literal></expr>,
<expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"[?] [-|(m)|f|!sh|cmd]"</literal></expr>, <expr><literal type="string">"Define macro or load r2, cparse or rlang file"</literal></expr>,
<expr><literal type="string">"_"</literal></expr>, <expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"Print last output"</literal></expr>,
<expr><literal type="string">"="</literal></expr>,<expr><literal type="string">"[?] [cmd]"</literal></expr>, <expr><literal type="string">"send/listen for remote commands (rap://, raps://, udp://, http://, &lt;fd&gt;)"</literal></expr>,
<expr><literal type="string">"&lt;"</literal></expr>,<expr><literal type="string">"[...]"</literal></expr>, <expr><literal type="string">"push escaped string into the RCons.readChar buffer"</literal></expr>,
<expr><literal type="string">"/"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"search for bytes, regexps, patterns, .."</literal></expr>,
<expr><literal type="string">"!"</literal></expr>,<expr><literal type="string">"[?] [cmd]"</literal></expr>, <expr><literal type="string">"run given command as in system(3)"</literal></expr>,
<expr><literal type="string">"#"</literal></expr>,<expr><literal type="string">"[?] !lang [..]"</literal></expr>, <expr><literal type="string">"Hashbang to run an rlang script"</literal></expr>,
<expr><literal type="string">"a"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"analysis commands"</literal></expr>,
<expr><literal type="string">"b"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"display or change the block size"</literal></expr>,
<expr><literal type="string">"c"</literal></expr>,<expr><literal type="string">"[?] [arg]"</literal></expr>, <expr><literal type="string">"compare block with given data"</literal></expr>,
<expr><literal type="string">"C"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"code metadata (comments, format, hints, ..)"</literal></expr>,
<expr><literal type="string">"d"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"debugger commands"</literal></expr>,
<expr><literal type="string">"e"</literal></expr>,<expr><literal type="string">"[?] [a[=b]]"</literal></expr>, <expr><literal type="string">"list/get/set config evaluable vars"</literal></expr>,
<expr><literal type="string">"f"</literal></expr>,<expr><literal type="string">"[?] [name][sz][at]"</literal></expr>, <expr><literal type="string">"add flag at current address"</literal></expr>,
<expr><literal type="string">"g"</literal></expr>,<expr><literal type="string">"[?] [arg]"</literal></expr>, <expr><literal type="string">"generate shellcodes with r_egg"</literal></expr>,
<expr><literal type="string">"i"</literal></expr>,<expr><literal type="string">"[?] [file]"</literal></expr>, <expr><literal type="string">"get info about opened file from r_bin"</literal></expr>,
<expr><literal type="string">"k"</literal></expr>,<expr><literal type="string">"[?] [sdb-query]"</literal></expr>, <expr><literal type="string">"run sdb-query. see k? for help, 'k *', 'k **' ..."</literal></expr>,
<expr><literal type="string">"l"</literal></expr>,<expr><literal type="string">" [filepattern]"</literal></expr>, <expr><literal type="string">"list files and directories"</literal></expr>,
<expr><literal type="string">"L"</literal></expr>,<expr><literal type="string">"[?] [-] [plugin]"</literal></expr>, <expr><literal type="string">"list, unload load r2 plugins"</literal></expr>,
<expr><literal type="string">"m"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"mountpoints commands"</literal></expr>,
<expr><literal type="string">"o"</literal></expr>,<expr><literal type="string">"[?] [file] ([offset])"</literal></expr>, <expr><literal type="string">"open file at optional address"</literal></expr>,
<expr><literal type="string">"p"</literal></expr>,<expr><literal type="string">"[?] [len]"</literal></expr>, <expr><literal type="string">"print current block with format and length"</literal></expr>,
<expr><literal type="string">"P"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"project management utilities"</literal></expr>,
<expr><literal type="string">"q"</literal></expr>,<expr><literal type="string">"[?] [ret]"</literal></expr>, <expr><literal type="string">"quit program with a return value"</literal></expr>,
<expr><literal type="string">"r"</literal></expr>,<expr><literal type="string">"[?] [len]"</literal></expr>, <expr><literal type="string">"resize file"</literal></expr>,
<expr><literal type="string">"s"</literal></expr>,<expr><literal type="string">"[?] [addr]"</literal></expr>, <expr><literal type="string">"seek to address (also for '0x', '0x1' == 's 0x1')"</literal></expr>,
<expr><literal type="string">"t"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"types, noreturn, signatures, C parser and more"</literal></expr>,
<expr><literal type="string">"T"</literal></expr>,<expr><literal type="string">"[?] [-] [num|msg]"</literal></expr>, <expr><literal type="string">"Text log utility (used to chat, sync, log, ...)"</literal></expr>,
<expr><literal type="string">"u"</literal></expr>,<expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"uname/undo seek/write"</literal></expr>,
<expr><literal type="string">"v"</literal></expr>,<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"visual mode (v! = panels, vv = fcnview, vV = fcngraph, vVV = callgraph)"</literal></expr>,
<expr><literal type="string">"w"</literal></expr>,<expr><literal type="string">"[?] [str]"</literal></expr>, <expr><literal type="string">"multiple write operations"</literal></expr>,
<expr><literal type="string">"x"</literal></expr>,<expr><literal type="string">"[?] [len]"</literal></expr>, <expr><literal type="string">"alias for 'px' (print hexadecimal)"</literal></expr>,
<expr><literal type="string">"y"</literal></expr>,<expr><literal type="string">"[?] [len] [[[@]addr"</literal></expr>, <expr><literal type="string">"Yank/paste bytes from/to memory"</literal></expr>,
<expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"zignatures management"</literal></expr>,
<expr><literal type="string">"?[??]"</literal></expr>,<expr><literal type="string">"[expr]"</literal></expr>, <expr><literal type="string">"Help or evaluate math expression"</literal></expr>,
<expr><literal type="string">"?$?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show available '$' variables and aliases"</literal></expr>,
<expr><literal type="string">"?@?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"misc help for '@' (seek), '~' (grep) (see ~?""</literal><operator>?</operator></expr>)<literal type="string">",
"</literal><operator>?</operator><operator>&gt;</operator><operator>?</operator><literal type="string">", ""</literal>, <literal type="string">"output redirection"</literal>,
<literal type="string">"?|?"</literal>, <literal type="string">""</literal>, <literal type="string">"help for '|' (pipe)"</literal>,
<name>NULL</name>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_question</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage: ?[?[?]] expression"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">" eip-0x804800"</literal></expr>, <expr><literal type="string">"show all representation result for this math expr"</literal></expr>,
<expr><literal type="string">"?:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"list core cmd plugins"</literal></expr>,
<expr><literal type="string">"[cmd]?*"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"recursive help for the given cmd"</literal></expr>,
<expr><literal type="string">"?!"</literal></expr>, <expr><literal type="string">" [cmd]"</literal></expr>, <expr><literal type="string">"run cmd if $? == 0"</literal></expr>,
<expr><literal type="string">"?$"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show value all the variables ($)"</literal></expr>,
<expr><literal type="string">"?+"</literal></expr>, <expr><literal type="string">" [cmd]"</literal></expr>, <expr><literal type="string">"run cmd if $? &gt; 0"</literal></expr>,
<expr><literal type="string">"?-"</literal></expr>, <expr><literal type="string">" [cmd]"</literal></expr>, <expr><literal type="string">"run cmd if $? &lt; 0"</literal></expr>,
<expr><literal type="string">"?="</literal></expr>, <expr><literal type="string">" eip-0x804800"</literal></expr>, <expr><literal type="string">"hex and dec result for this math expr"</literal></expr>,
<expr><literal type="string">"??"</literal></expr>, <expr><literal type="string">" [cmd]"</literal></expr>, <expr><literal type="string">"run cmd if $? != 0"</literal></expr>,
<expr><literal type="string">"??"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show value of operation"</literal></expr>,
<expr><literal type="string">"?_"</literal></expr>, <expr><literal type="string">" hudfile"</literal></expr>, <expr><literal type="string">"load hud menu with given file"</literal></expr>,
<expr><literal type="string">"?a"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show ascii table"</literal></expr>,
<expr><literal type="string">"?b"</literal></expr>, <expr><literal type="string">" [num]"</literal></expr>, <expr><literal type="string">"show binary value of number"</literal></expr>,
<expr><literal type="string">"?b64[-]"</literal></expr>, <expr><literal type="string">" [str]"</literal></expr>, <expr><literal type="string">"encode/decode in base64"</literal></expr>,
<expr><literal type="string">"?btw"</literal></expr>, <expr><literal type="string">" num|expr num|expr num|expr"</literal></expr>, <expr><literal type="string">"returns boolean value of a &lt;= b &lt;= c"</literal></expr>,
<expr><literal type="string">"?B"</literal></expr>, <expr><literal type="string">" [elem]"</literal></expr>, <expr><literal type="string">"show range boundaries like 'e?search.in"</literal></expr>,
<expr><literal type="string">"?e[nbgc]"</literal></expr>, <expr><literal type="string">" string"</literal></expr>, <expr><literal type="string">"echo string (nonl, gotoxy, column, bars)"</literal></expr>,
<expr><literal type="string">"?f"</literal></expr>, <expr><literal type="string">" [num] [str]"</literal></expr>, <expr><literal type="string">"map each bit of the number as flag string index"</literal></expr>,
<expr><literal type="string">"?F"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"flush cons output"</literal></expr>,
<expr><literal type="string">"?h"</literal></expr>, <expr><literal type="string">" [str]"</literal></expr>, <expr><literal type="string">"calculate hash for given string"</literal></expr>,
<expr><literal type="string">"?i"</literal></expr>, <expr><literal type="string">"[ynmkp] arg"</literal></expr>, <expr><literal type="string">"prompt for number or Yes,No,Msg,Key,Path and store in $$?"</literal></expr>,
<expr><literal type="string">"?ik"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"press any key input dialog"</literal></expr>,
<expr><literal type="string">"?im"</literal></expr>, <expr><literal type="string">" message"</literal></expr>, <expr><literal type="string">"show message centered in screen"</literal></expr>,
<expr><literal type="string">"?in"</literal></expr>, <expr><literal type="string">" prompt"</literal></expr>, <expr><literal type="string">"noyes input prompt"</literal></expr>,
<expr><literal type="string">"?iy"</literal></expr>, <expr><literal type="string">" prompt"</literal></expr>, <expr><literal type="string">"yesno input prompt"</literal></expr>,
<expr><literal type="string">"?j"</literal></expr>, <expr><literal type="string">" arg"</literal></expr>, <expr><literal type="string">"same as '? num' but in JSON"</literal></expr>,
<expr><literal type="string">"?l"</literal></expr>, <expr><literal type="string">"[q] str"</literal></expr>, <expr><literal type="string">"returns the length of string ('q' for quiet, just set $?)"</literal></expr>,
<expr><literal type="string">"?o"</literal></expr>, <expr><literal type="string">" num"</literal></expr>, <expr><literal type="string">"get octal value"</literal></expr>,
<expr><literal type="string">"?p"</literal></expr>, <expr><literal type="string">" vaddr"</literal></expr>, <expr><literal type="string">"get physical address for given virtual address"</literal></expr>,
<expr><literal type="string">"?P"</literal></expr>, <expr><literal type="string">" paddr"</literal></expr>, <expr><literal type="string">"get virtual address for given physical one"</literal></expr>,
<expr><literal type="string">"?q"</literal></expr>, <expr><literal type="string">" eip-0x804800"</literal></expr>, <expr><literal type="string">"compute expression like ? or ?v but in quiet mode"</literal></expr>,
<expr><literal type="string">"?r"</literal></expr>, <expr><literal type="string">" [from] [to]"</literal></expr>, <expr><literal type="string">"generate random number between from-to"</literal></expr>,
<expr><literal type="string">"?s"</literal></expr>, <expr><literal type="string">" from to step"</literal></expr>, <expr><literal type="string">"sequence of numbers from to by steps"</literal></expr>,
<expr><literal type="string">"?t"</literal></expr>, <expr><literal type="string">" cmd"</literal></expr>, <expr><literal type="string">"returns the time to run a command"</literal></expr>,
<expr><literal type="string">"?T"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show loading times"</literal></expr>,
<expr><literal type="string">"?u"</literal></expr>, <expr><literal type="string">" num"</literal></expr>, <expr><literal type="string">"get value in human units (KB, MB, GB, TB)"</literal></expr>,
<expr><literal type="string">"?v"</literal></expr>, <expr><literal type="string">" eip-0x804800"</literal></expr>, <expr><literal type="string">"show hex value of math expr"</literal></expr>,
<expr><literal type="string">"?vi"</literal></expr>, <expr><literal type="string">" rsp-rbp"</literal></expr>, <expr><literal type="string">"show decimal value of math expr"</literal></expr>,
<expr><literal type="string">"?V"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show library version of r_core"</literal></expr>,
<expr><literal type="string">"?w"</literal></expr>, <expr><literal type="string">" addr"</literal></expr>, <expr><literal type="string">"show what's in this address (like pxr/pxq does)"</literal></expr>,
<expr><literal type="string">"?x"</literal></expr>, <expr><literal type="string">" str"</literal></expr>, <expr><literal type="string">"returns the hexpair of number or string"</literal></expr>,
<expr><literal type="string">"?x"</literal></expr>, <expr><literal type="string">"+num"</literal></expr>, <expr><literal type="string">"like ?v, but in hexpairs honoring cfg.bigendian"</literal></expr>,
<expr><literal type="string">"?x"</literal></expr>, <expr><literal type="string">"-hexst"</literal></expr>, <expr><literal type="string">"convert hexpair into raw string with newline"</literal></expr>,
<expr><literal type="string">"?X"</literal></expr>, <expr><literal type="string">" num|expr"</literal></expr>, <expr><literal type="string">"returns the hexadecimal value numeric expr"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_question_v</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage: ?v [$.]"</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"flag"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"offset of flag"</literal></expr>,
<expr><literal type="string">"$$"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"here (current virtual seek)"</literal></expr>,
<expr><literal type="string">"$$$"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"current non-temporary virtual seek"</literal></expr>,
<expr><literal type="string">"$?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"last comparison value"</literal></expr>,
<expr><literal type="string">"$alias"</literal></expr>, <expr><literal type="string">"=value"</literal></expr>, <expr><literal type="string">"alias commands (simple macros)"</literal></expr>,
<expr><literal type="string">"$b"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"block size"</literal></expr>,
<expr><literal type="string">"$B"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"base address (aligned lowest map address)"</literal></expr>,
<expr><literal type="string">"$f"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"jump fail address (e.g. jz 0x10 =&gt; next instruction)"</literal></expr>,
<expr><literal type="string">"$fl"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"flag length (size) at current address (fla; pD $l @ entry0)"</literal></expr>,
<expr><literal type="string">"$F"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Same as $FB"</literal></expr>,
<expr><literal type="string">"$Fb"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"begin of basic block"</literal></expr>,
<expr><literal type="string">"$FB"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"begin of function"</literal></expr>,
<expr><literal type="string">"$Fe"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"end of basic block"</literal></expr>,
<expr><literal type="string">"$FE"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"end of function"</literal></expr>,
<expr><literal type="string">"$Ff"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"function false destination"</literal></expr>,
<expr><literal type="string">"$Fj"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"function jump destination"</literal></expr>,
<expr><literal type="string">"$Fs"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"size of the current basic block"</literal></expr>,
<expr><literal type="string">"$FS"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"function size (linear length)"</literal></expr>,
<expr><literal type="string">"$FSS"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"function size (sum bb sizes)"</literal></expr>,
<expr><literal type="string">"$Fi"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"basic block instructions"</literal></expr>,
<expr><literal type="string">"$FI"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"function instructions"</literal></expr>,
<expr><literal type="string">"$c,$r"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get width and height of terminal"</literal></expr>,
<expr><literal type="string">"$Cn"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get nth call of function"</literal></expr>,
<expr><literal type="string">"$Dn"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get nth data reference in function"</literal></expr>,
<expr><literal type="string">"$D"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"current debug map base address ?v $D @ rsp"</literal></expr>,
<expr><literal type="string">"$DB"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"same as dbg.baddr, progam base address"</literal></expr>,
<expr><literal type="string">"$DD"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"current debug map size"</literal></expr>,
<expr><literal type="string">"$e"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"1 if end of block, else 0"</literal></expr>,
<expr><literal type="string">"$j"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"jump address (e.g. jmp 0x10, jz 0x10 =&gt; 0x10)"</literal></expr>,
<expr><literal type="string">"$Ja"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get nth jump of function"</literal></expr>,
<expr><literal type="string">"$Xn"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get nth xref of function"</literal></expr>,
<expr><literal type="string">"$l"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"opcode length"</literal></expr>,
<expr><literal type="string">"$m"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"opcode memory reference (e.g. mov eax,[0x10] =&gt; 0x10)"</literal></expr>,
<expr><literal type="string">"$M"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"map address (lowest map address)"</literal></expr>,
<expr><literal type="string">"$MM"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"map size (lowest map address)"</literal></expr>,
<expr><literal type="string">"$o"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"here (current disk io offset)"</literal></expr>,
<expr><literal type="string">"$O"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"cursor here (current offset pointed by the cursor)"</literal></expr>,
<expr><literal type="string">"$p"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"getpid()"</literal></expr>,
<expr><literal type="string">"$P"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"pid of children (only in debug)"</literal></expr>,
<expr><literal type="string">"$s"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"file size"</literal></expr>,
<expr><literal type="string">"$S"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"section offset"</literal></expr>,
<expr><literal type="string">"$SS"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"section size"</literal></expr>,
<expr><literal type="string">"$v"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"opcode immediate value (e.g. lui a0,0x8010 =&gt; 0x8010)"</literal></expr>,
<expr><literal type="string">"$w"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get word size, 4 if asm.bits=32, 8 if 64, ..."</literal></expr>,
<expr><literal type="string">"${ev}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get value of eval config variable"</literal></expr>,
<expr><literal type="string">"$r"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get console height"</literal></expr>,
<expr><literal type="string">"$r{reg}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get value of named register"</literal></expr>,
<expr><literal type="string">"$k{kv}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get value of an sdb query value"</literal></expr>,
<expr><literal type="string">"$s{flag}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"get size of flag"</literal></expr>,
<expr><literal type="string">"$e{flag}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"end of flag (flag-&gt;offset + flag-&gt;size)"</literal></expr>,
<expr><literal type="string">"RNum"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"$variables usable in math expressions"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_question_V</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage: ?V[jq]"</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"?V"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show version information"</literal></expr>,
<expr><literal type="string">"?V0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show major version"</literal></expr>,
<expr><literal type="string">"?V1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show minor version"</literal></expr>,
<expr><literal type="string">"?V2"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show patch version"</literal></expr>,
<expr><literal type="string">"?Vn"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show numeric version (2)"</literal></expr>,
<expr><literal type="string">"?Vc"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show numeric version"</literal></expr>,
<expr><literal type="string">"?Vj"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"same as above but in JSON"</literal></expr>,
<expr><literal type="string">"?Vq"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"quiet mode, just show the version number"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_greater_sign</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage:"</literal></expr>, <expr><literal type="string">"[cmd]&gt;[file]"</literal></expr>, <expr><literal type="string">"redirects console from 'cmd' output to 'file'"</literal></expr>,
<expr><literal type="string">"[cmd] &gt; [file]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"redirect STDOUT of 'cmd' to 'file'"</literal></expr>,
<expr><literal type="string">"[cmd] &gt; $alias"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"save the output of the command as an alias (see $?)"</literal></expr>,
<expr><literal type="string">"[cmd] H&gt; [file]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"redirect html output of 'cmd' to 'file'"</literal></expr>,
<expr><literal type="string">"[cmd] 2&gt; [file]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"redirect STDERR of 'cmd' to 'file'"</literal></expr>,
<expr><literal type="string">"[cmd] 2&gt; /dev/null"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"omit the STDERR output of 'cmd'"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_intro</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage: [.][times][cmd][~grep][@[@iter]addr!size][|&gt;pipe] ; ..."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Append '?' to any char command to get detailed help"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Prefix with number to repeat command N times (f.ex: 3x)"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_help_exclamation</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_exclamation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_help_percent</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_help_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DEFINE_CMD_DESCRIPTOR_SPECIAL</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>?</operator></expr></argument>, <argument><expr><name>question</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_CMD_DESCRIPTOR_SPECIAL</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>?</operator><name>v</name></expr></argument>, <argument><expr><name>question_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_CMD_DESCRIPTOR_SPECIAL</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>?</operator><name>V</name></expr></argument>, <argument><expr><name>question_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>findBreakChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_name_validate_char</name> <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>filterFlags</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dollar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>dollar</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dollar</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_appendlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>dollar</name><operator>-</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dollar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>dollar</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>r_str_newlen</name> <argument_list>(<argument><expr><name>dollar</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>dollar</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>dollar</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>findBreakChar</name> <argument_list>(<argument><expr><name>dollar</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>dollar</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>dollar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>r_str_newlen</name> <argument_list>(<argument><expr><name>dollar</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>dollar</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <name>word</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>num</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>avatar_orangg</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">" _______\n"</literal>
<literal type="string">" / \\ .-%s-.\n"</literal>
<literal type="string">" _| ( o) (o)\\_ | %s |\n"</literal>
<literal type="string">" / _ .\\. | \\ &lt;| %s |\n"</literal>
<literal type="string">" \\| \\ ____ / 7` | %s |\n"</literal>
<literal type="string">" '|\\| `---'/ `-%s-'\n"</literal>
<literal type="string">" | /----. \\\n"</literal>
<literal type="string">" | \\___/ |___\n"</literal>
<literal type="string">" `-----'`-----'\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>avatar_clippy</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">" .--. .-%s-.\n"</literal>
<literal type="string">" | _| | %s |\n"</literal>
<literal type="string">" | O O &lt; %s |\n"</literal>
<literal type="string">" | | | | %s |\n"</literal>
<literal type="string">" || | / `-%s-'\n"</literal>
<literal type="string">" |`-'|\n"</literal>
<literal type="string">" `---'\n"</literal></expr>,
<expr><literal type="string">" .--. .-%s-.\n"</literal>
<literal type="string">" | \\ | %s |\n"</literal>
<literal type="string">" | O o &lt; %s |\n"</literal>
<literal type="string">" | | / | %s |\n"</literal>
<literal type="string">" | ( / `-%s-'\n"</literal>
<literal type="string">" | / \n"</literal>
<literal type="string">" `--'\n"</literal></expr>,
<expr><literal type="string">" .--. .-%s-.\n"</literal>
<literal type="string">" | _|_ | %s |\n"</literal>
<literal type="string">" | O O &lt; %s |\n"</literal>
<literal type="string">" | || | %s |\n"</literal>
<literal type="string">" | _:| `-%s-'\n"</literal>
<literal type="string">" | |\n"</literal>
<literal type="string">" `---'\n"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>avatar_clippy_utf8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">" â­âââ® â­â%sââ®\n"</literal>
<literal type="string">" â _â â %s â\n"</literal>
<literal type="string">" â O O &lt; %s â\n"</literal>
<literal type="string">" â ââ­ â %s â\n"</literal>
<literal type="string">" ââ ââ â°â%sââ¯\n"</literal>
<literal type="string">" âââââ\n"</literal>
<literal type="string">" â°ââââ¯\n"</literal></expr>,
<expr><literal type="string">" â­âââ® â­â%sââ®\n"</literal>
<literal type="string">" â â¶ââ¶ â %s â\n"</literal>
<literal type="string">" â O o &lt; %s â\n"</literal>
<literal type="string">" â â â± â %s â\n"</literal>
<literal type="string">" â â­â â± â°â%sââ¯\n"</literal>
<literal type="string">" â â° â±\n"</literal>
<literal type="string">" â°ââ'\n"</literal></expr>,
<expr><literal type="string">" â­âââ® â­â%sââ®\n"</literal>
<literal type="string">" â _â_ â %s â\n"</literal>
<literal type="string">" â O O &lt; %s â\n"</literal>
<literal type="string">" â ââ· â %s â\n"</literal>
<literal type="string">" â ââ â°â%sââ¯\n"</literal>
<literal type="string">" â ââ¯â\n"</literal>
<literal type="string">" â°ââââ¯\n"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>avatar_cybcat</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">" /\\.---./\\ .-%s-.\n"</literal>
<literal type="string">" '-- --' | %s |\n"</literal>
<literal type="string">"---- ^ ^ ---- &lt; %s |\n"</literal>
<literal type="string">" _.- Y -._ | %s |\n"</literal>
<literal type="string">" `-%s-'\n"</literal></expr>,
<expr><literal type="string">" /\\.---./\\ .-%s-.\n"</literal>
<literal type="string">" '-- @ @ --' | %s |\n"</literal>
<literal type="string">"---- Y ---- &lt; %s |\n"</literal>
<literal type="string">" _.- O -._ | %s |\n"</literal>
<literal type="string">" `-%s-'\n"</literal></expr>,
<expr><literal type="string">" /\\.---./\\ .-%s-.\n"</literal>
<literal type="string">" '-- = = --' | %s |\n"</literal>
<literal type="string">"---- Y ---- &lt; %s |\n"</literal>
<literal type="string">" _.- U -._ | %s |\n"</literal>
<literal type="string">" `-%s-'\n"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>R_AVATAR_ORANGG</name></decl>,
<decl><name>R_AVATAR_CYBCAT</name></decl>,
<decl><name>R_AVATAR_CLIPPY</name></decl>,
}</block>;</enum>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_clippy</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>R_AVATAR_CLIPPY</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>msg</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>msg</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>space</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>msg</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>?</condition><then> <expr><name>R_AVATAR_ORANGG</name></expr></then><else>: <expr><name>R_AVATAR_CYBCAT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>space</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msglen</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_AVATAR_ORANGG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>avatar_orangg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_AVATAR_CYBCAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>avatar_cybcat</name><index>[<expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>avatar_cybcat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_repeat</name> <argument_list>(<argument><expr><literal type="string">"â"</literal></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>avatar_clippy_utf8</name><index>[<expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>avatar_clippy_utf8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>avatar_clippy</name><index>[<expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>avatar_clippy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_help</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>out</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> 
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>curtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>curtab</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>curtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>curtab</name></name> <operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> 
<block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>r</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>UT32_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>b</name> <operator>+</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>ret_ascii_table</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'6'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'4'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buflen</name> <init>= <expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>buflen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_base64_decode</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_base64_encode</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>input</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ?btw num|(expr) num|(expr) num|(expr)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_to_bits</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sb\n"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> 
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>r_core_get_boundaries_prot</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>tmp</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">" 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_str_hash</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ?h [string-to-hash]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot strdup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_bits</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: \"?b value bitstring\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Whitespace expected after '?f'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0%"</literal><name>PFMT64o</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"plug.init = %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal>
<literal type="string">"plug.load = %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal>
<literal type="string">"file.load = %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>loadlibs_init_time</name></name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>loadlibs_time</name></name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>file_open_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>unit</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<case>case <expr><literal type="char">' '</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asnum</name></decl>, <decl><type ref="prev"/><name><name>unit</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>inputs</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_num_str_split_list</name> <argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>list_len</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pj</name> <operator>=</operator> <call><name>pj_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_list_pop_head</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>dbz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RNum ERROR: Division by Zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>asnum</name> <operator>=</operator> <call><name>r_num_as_string</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0x0fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT32_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"octal"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0%"</literal><name>PFMT64o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"unit"</literal></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"segment"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%04x:%04x"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"int64 %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"uint64 %"</literal><name>PFMT64u</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"int32 %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"uint32 %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"hex 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"octal 0%"</literal><name>PFMT64o</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"unit %s\n"</literal></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"segment %04x:%04x\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>asnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"string \"%s\"\n"</literal></expr></argument>, <argument><expr><name>asnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>asnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_str_bits64</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>fvalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>signbit</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>signbit</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"fvalue"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%.1lf"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>fvalue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%ff"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0b%s"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_to_trits</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"trits"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0t%s"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"fvalue: %.1lf\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>fvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"float: %ff\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"double: %lf\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"binary 0b%s\n"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_num_to_trits</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"trits 0t%s\n"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>dbz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RNum ERROR: Division by Zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"|Usage: ?q [num] #Update $? without printing anything\n"</literal>
<literal type="string">"|?q 123; ?? x #hexdump if 123 != 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>space</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"$?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>space</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"$?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>dbz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RNum ERROR: Division by Zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"|Usage: ?v[id][ num] #Show value\n"</literal>
<literal type="string">"|?vx number -&gt; show 8 digit padding in hex\n"</literal>
<literal type="string">"|?vi1 200 -&gt; 1 byte size value (char)\n"</literal>
<literal type="string">"|?vi2 0xffff -&gt; 2 byte size value (short)\n"</literal>
<literal type="string">"|?vi4 0xffff -&gt; 4 byte size value (int)\n"</literal>
<literal type="string">"|?vi8 0xffff -&gt; 8 byte size value (st64)\n"</literal>
<literal type="string">"| No argument shows $? value\n"</literal>
<literal type="string">"|?vi will show in decimal instead of hex\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st8</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT8_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st16</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT16_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT32_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'8'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT64_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmd_help_exclamation</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'@'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_at_at_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_at_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> 
<expr_stmt><expr><call><name>helpCmdTasks</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmd_help_percent</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_question_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>vars</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$$"</literal></expr>, <expr><literal type="string">"$$$"</literal></expr>, <expr><literal type="string">"$?"</literal></expr>, <expr><literal type="string">"$b"</literal></expr>, <expr><literal type="string">"$B"</literal></expr>, <expr><literal type="string">"$F"</literal></expr>, <expr><literal type="string">"$Fj"</literal></expr>, <expr><literal type="string">"$Ff"</literal></expr>, <expr><literal type="string">"$FB"</literal></expr>, <expr><literal type="string">"$Fb"</literal></expr>, <expr><literal type="string">"$Fs"</literal></expr>, <expr><literal type="string">"$FE"</literal></expr>, <expr><literal type="string">"$FS"</literal></expr>,
<expr><literal type="string">"$FI"</literal></expr>, <expr><literal type="string">"$c"</literal></expr>, <expr><literal type="string">"$r"</literal></expr>, <expr><literal type="string">"$D"</literal></expr>, <expr><literal type="string">"$DD"</literal></expr>, <expr><literal type="string">"$e"</literal></expr>, <expr><literal type="string">"$f"</literal></expr>, <expr><literal type="string">"$j"</literal></expr>, <expr><literal type="string">"$Ja"</literal></expr>, <expr><literal type="string">"$l"</literal></expr>, <expr><literal type="string">"$m"</literal></expr>, <expr><literal type="string">"$M"</literal></expr>, <expr><literal type="string">"$MM"</literal></expr>, <expr><literal type="string">"$o"</literal></expr>,
<expr><literal type="string">"$p"</literal></expr>, <expr><literal type="string">"$P"</literal></expr>, <expr><literal type="string">"$s"</literal></expr>, <expr><literal type="string">"$S"</literal></expr>, <expr><literal type="string">"$SS"</literal></expr>, <expr><literal type="string">"$v"</literal></expr>, <expr><literal type="string">"$w"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wideOffsets</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.wideoff"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wideOffsets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s %s 0x%016"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s %s 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'V'</literal></expr>:</case> 
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_question_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R2_VERSION_COMMIT</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s release\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>R2_VERSION</name></expr></argument>, <argument><expr><name>R2_GITTAP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION</name></expr></argument>, <argument><expr><name>R2_VERSION_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s aka %s commit %d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION</name></expr></argument>, <argument><expr><name>R2_GITTAP</name></expr></argument>, <argument><expr><name>R2_VERSION_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>vernum</name> <argument_list>(<argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"os"</literal></expr></argument>, <argument><expr><name>R_SYS_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><name>R_SYS_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>, <argument><expr><name>R2_VERSION_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"tap"</literal></expr></argument>, <argument><expr><name>R2_GITTAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"major"</literal></expr></argument>, <argument><expr><name>R2_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"minor"</literal></expr></argument>, <argument><expr><name>R2_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"patch"</literal></expr></argument>, <argument><expr><name>R2_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>, <argument><expr><name>R2_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"nversion"</literal></expr></argument>, <argument><expr><call><name>vernum</name> <argument_list>(<argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>input</name><operator>+=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case> 
<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error parsing the hexpair string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>r_num_to_bits</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_core_clippy</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> 
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>pc</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_print_progressbar</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>portions</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>portions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_print_portionbar</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>portions</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>r_sys_tts</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_column</name> <argument_list>(<argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><name>arg</name></expr>?</condition><then> <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newmsg</name> <init>= <expr><call><name>filterFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_unescape</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_clear00</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>r_str_donut</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_clear_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Downloading the Gibson...\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"?e=%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_clear_line</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_clear00</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\nPayload installed. Thanks for your patience.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>r_str_donut</name> <argument_list>(<argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>cons</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>flag</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>flag</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>nums</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>word</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_print_pie</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newmsg</name> <init>= <expr><call><name>filterFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_unescape</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ?e[...]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" e msg echo message\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" e= N... progressbar N percent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" ed N... display a donut\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" ep N... echo pie chart\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" eb N... echo portions bar\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" en msg echo without newline\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" eg x y gotoxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" es msg use text-to-speech technology\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>input</name><operator>==</operator><literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>from</name> <operator>+=</operator> <name>step</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'P'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>o</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>?</condition><then>
<expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get_paddr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"no map at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>o</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>?</condition><then>
<expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"no map at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'_'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_core_yank_hud_file</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_set_raw</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not running in interactive mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> 
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>!</operator><call><name>r_num_conditional</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_core_yank_hud_path</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_cons_any_key</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'y'</literal></expr>:</case> 
<for>for <control>(<init><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>input</name><operator>==</operator><literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s? (Y/n)"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<for>for <control>(<init><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>input</name><operator>==</operator><literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s? (y/N)"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>foo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>input</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_fgets</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>foo</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_yank_set_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R_CORE_FOREIGN_ADDR</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rstr</name> <init>= <expr><call><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>hasrefs</name></name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot get refs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name><name>struct</name> <name>r_prof_t</name></name></type> <name>prof</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_prof_start</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_prof_end</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prof</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%lf\n"</literal></expr></argument>, <argument><expr><name><name>prof</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>r_core_clippy</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"What are you doing?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_question</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>dbz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RNum ERROR: Division by Zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 
<default>default:</default>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_intro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
