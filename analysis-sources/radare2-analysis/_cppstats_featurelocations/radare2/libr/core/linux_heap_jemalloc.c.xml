<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\linux_heap_jemalloc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_HEAP_JEMALLOC_STD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_HEAP_JEMALLOC_STD_C</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAP32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_heap_jemalloc.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEAP32</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GHT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GHT_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PFMTx</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HEAP32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT</name></cpp:macro> <cpp:value>ut32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT_MAX</name></cpp:macro> <cpp:value>UT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTx</name></cpp:macro> <cpp:value>PFMT32x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT_MAX</name></cpp:macro> <cpp:value>UT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTx</name></cpp:macro> <cpp:value>PFMT64x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>


<function><type><specifier>static</specifier> <name>GHT</name> <name>GH</name></type>(<name>je_get_va_symbol</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><call><name>r_core_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>syms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHT</name></type> <name>vaddr</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>GHT_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinOptions</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_options_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_open</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>syms</name> <operator>=</operator> <call><name>r_bin_get_symbols</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syms</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>GHT_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>syms</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vaddr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_core_free</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vaddr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>je_matched</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name> <name>GH</name></type>(<name>r_resolve_jemalloc</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>symname</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jemalloc_ver_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>jemalloc_addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition><block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"libjemalloc."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jemalloc_addr</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>jemalloc_ver_end</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jemalloc_ver_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Is jemalloc mapped in memory? (see dm command)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>is_debug_file</name> <init>= <expr><call><call><name>GH</name><argument_list>(<argument><expr><name>je_matched</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>jemalloc_ver_end</name></expr></argument>, <argument><expr><literal type="string">"/usr/local/lib"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_debug_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Is libjemalloc.so.2 in /usr/local/lib path?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>jemalloc_ver_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><call><call><name>GH</name><argument_list>(<argument><expr><name>je_get_va_symbol</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>jemalloc_addr</name> <operator>!=</operator> <name>GHT_MAX</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>symbol</name> <operator>=</operator> <name>jemalloc_addr</name> <operator>+</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[*] Resolving %s from libjemalloc.2... "</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>va</name> <init>= <expr><call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dmi libjemalloc.2 %s$~[1]"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>symbol</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"NOT FOUND\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>jemalloc_get_chunks</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>cnksz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"je_chunksize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnksz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Fail at read symbol je_chunksize\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>cnksz</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cnksz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"need an arena_t to associate chunks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>GHT</name></type> <name>arena</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arena</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>achunks</name><operator>.</operator><name>qlh_first</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>head</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" Chunk - start: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", end: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>+</operator> <name>cnksz</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>cnksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>ql_link</name><operator>.</operator><name>qre_next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>!=</operator> <name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" Chunk - start: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", end: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>+</operator> <name>cnksz</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>cnksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>ql_link</name><operator>.</operator><name>qre_next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHT</name></type> <name>arenas</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>arena</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <operator>!</operator><name>head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error calling calloc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"je_arenas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arenas</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arenas</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arena</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"arenas[%d]: @ 0x%"</literal><name>PFMTx</name><literal type="string">" { \n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>achunks</name><operator>.</operator><name>qlh_first</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>head</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" Chunk - start: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", end: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>+</operator> <name>cnksz</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>cnksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>head</name><operator>-&gt;</operator><name>ql_link</name><operator>.</operator><name>qre_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name>head</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>!=</operator> <name><name>head</name><operator>-&gt;</operator><name>en_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" Chunk - start: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", end: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>en_addr</name></name> <operator>+</operator> <name>cnksz</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">", size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>cnksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>ql_link</name><operator>.</operator><name>qre_next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>extent_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>jemalloc_print_narenas</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>symaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>arenas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHT</name></type> <name>arena</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ar</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_stats_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHT</name></type> <name>narenas</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"narenas_total"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>symaddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>symaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>narenas</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"narenas : %d\n"</literal></expr></argument>, <argument><expr><name>narenas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>narenas</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No arenas allocated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>narenas</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find narenas_total\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"je_arenas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arenas</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arenas</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arenas</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"arenas[%d] @ 0x%"</literal><name>PFMTx</name><literal type="string">" {\n"</literal></expr></argument>, <argument><expr><name>narenas</name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name>arenas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>narenas</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name>arenas</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arena</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" arenas[%d]: (empty)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" arenas[%d]: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"@ 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name>arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"struct arena_s {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arena + r_offsetof (arena_t, x)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" ind = 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" nthreads: application allocation = 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>nthreads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" nthreads: internal metadata allocation = 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>nthreads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" lock = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" stats = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" tcache_ql = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>tcache_ql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" prof_accumbytes = 0x%"</literal><name>PFMT64x</name><literal type="string">"x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>prof_accumbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" offset_state = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>offset_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" dss_prec_t = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>dss_prec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" achunks = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>achunks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" extent_sn_next = 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>extent_sn_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" spare = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" lg_dirty_mult = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>lg_dirty_mult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" purging = %s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>purging</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" nactive = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>nactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" ndirty = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>ndirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" runs_dirty = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>runs_dirty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_cache = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" huge = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>huge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" huge_mtx = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>huge_mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_szsnad_cached = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_szsnad_cached</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_ad_cached = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_ad_cached</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_szsnad_retained = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_szsnad_retained</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_ad_cached = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_ad_retained</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_mtx = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunks_mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" node_cache = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>node_cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" node_cache_mtx = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>node_cache_mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" chunks_hooks = 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>chunk_hooks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" bins = %d 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>JM_NBINS</name></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" runs_avail = %d 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>NPSIZES</name></expr></argument>, <argument><expr><call><name>OO</name><argument_list>(<argument><expr><name>runs_avail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>jemalloc_get_bins</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bin_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>arenas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHT</name></type> <name>arena</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ar</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>arena_bin_info_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"je_arena_bin_info"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error resolving je_arena_bin_info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_jemalloc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"je_arenas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arenas</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arenas</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arenas</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"arenas @ 0x%"</literal><name>PFMTx</name><literal type="string">" {\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name>arenas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arenas</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arena</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" arenas[%d]: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"@ 0x%"</literal><name>PFMTx</name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arena_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>JM_NBINS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><operator>(</operator><name>bin_info</name> <operator>+</operator> <name>j</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arena_bin_info_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arena_bin_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" regsize : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>reg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" redzone size "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>redzone_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" reg_interval : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>reg_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" run_size : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>run_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" nregs : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>nregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" bitmap_info : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bitmap_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" reg0_offset : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMTx</name><literal type="string">"\n\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>reg0_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" bins[%d]-&gt;lock "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"= 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" bins[%d]-&gt;runcur "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"@ 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>runcur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" bins[%d]-&gt;runs "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"@ 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" bins[%d]-&gt;stats "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"= 0x%"</literal><name>PFMTx</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void GH(jemalloc_get_runs)(RCore *core, const char *input) {
switch (input[0]) {
case ' ':
{
int pageind;
ut64 npages, chunksize_mask, map_bias, map_misc_offset, chunk, mapbits;;
arena_chunk_t *c = R_NEW0 (arena_chunk_t);

if (!c) {
eprintf ("Error calling calloc\n");
return;
}

input += 1;
chunk = r_num_math (core-&gt;num, input);

if (!GH(r_resolve_jemalloc)(core, "je_chunk_npages", &amp;npages)) {
eprintf ("Error resolving je_chunk_npages\n");
return;
}
if (!GH(r_resolve_jemalloc)(core, "je_chunksize_mask", &amp;chunksize_mask)) {
eprintf ("Error resolving je_chunksize_mask\n");
return;
}
if (!GH(r_resolve_jemalloc)(core, "je_map_bias", &amp;map_bias)) {
eprintf ("Error resolving je_map_bias");
return;
}
if (!GH(r_resolve_jemalloc)(core, "je_map_misc_offset", &amp;map_misc_offset)) {
eprintf ("Error resolving je_map_misc_offset");
return;
}

r_io_read_at (core-&gt;io, npages, (ut8*)&amp;npages, sizeof (GHT));
r_io_read_at (core-&gt;io, chunksize_mask, (ut8*)&amp;chunksize_mask, sizeof (GHT));
r_io_read_at (core-&gt;io, map_bias, (ut8*)&amp;map_bias, sizeof (GHT));
r_io_read_at (core-&gt;io, map_misc_offset, (ut8*)&amp;map_misc_offset, sizeof (GHT));

eprintf ("map_misc_offset 0x%08"PFMT64x"\n", (ut64)map_misc_offset);

r_io_read_at (core-&gt;io, chunk, (ut8 *)c, sizeof (arena_chunk_t));
mapbits = *(GHT *)&amp;c-&gt;map_bits;
eprintf ("map_bits: 0x%08"PFMT64x"\n", (ut64)mapbits);

uint32_t offset = r_offsetof (arena_chunk_t, map_bits);

arena_chunk_map_bits_t *dwords = (void *)calloc (sizeof (arena_chunk_map_bits_t), npages);
r_io_read_at (core-&gt;io, chunk + offset, (ut8*)dwords, sizeof (arena_chunk_map_bits_t) * npages);
eprintf ("map_bits @ 0x%08"PFMT64x"\n", (ut64)(chunk + offset));

arena_run_t *r = R_NEW0 (arena_run_t);
if (!r) {
eprintf ("Error calling calloc\n");
return;
}
for (pageind = map_bias; pageind &lt; npages; pageind++) {
arena_chunk_map_bits_t mapelm = dwords[pageind-map_bias];
if (mapelm.bits &amp; CHUNK_MAP_ALLOCATED) {

ut64 elm = chunk + map_misc_offset + pageind-map_bias;
eprintf ("\nelm: 0x%"PFMT64x"\n", elm);
arena_chunk_map_misc_t *m = R_NEW0 (arena_chunk_map_misc_t);
if (m) {
ut64 run = elm + r_offsetof (arena_chunk_map_misc_t, run);
r_io_read_at (core-&gt;io, elm, (ut8*)m, sizeof (arena_chunk_map_misc_t));
eprintf ("Small run @ 0x%08"PFMT64x"\n", (ut64)elm);
r_io_read_at (core-&gt;io, run, (ut8*)r, sizeof (arena_run_t));
eprintf ("binind: 0x%08"PFMT64x"\n", (ut64)r-&gt;binind);
eprintf ("nfree: 0x%08"PFMT64x"\n", (ut64)r-&gt;nfree);
eprintf ("bitmap: 0x%08"PFMT64x"\n\n", (ut64)*(GHT*)r-&gt;bitmap);
free (m);
}
} else if (mapelm.bits &amp; CHUNK_MAP_LARGE) {
ut64 run = (ut64) (size_t) chunk + (pageind &lt;&lt; LG_PAGE);
eprintf ("Large run @ 0x%08"PFMT64x"\n", run);
r_io_read_at (core-&gt;io, run, (ut8*)r, sizeof (arena_run_t));
eprintf ("binind: 0x%08"PFMT64x"\n", (ut64)r-&gt;binind);
eprintf ("nfree: 0x%08"PFMT64x"\n", (ut64)r-&gt;nfree);
eprintf ("bitmap: 0x%08"PFMT64x"\n\n", (ut64)*(GHT*)r-&gt;bitmap);
}
}
free (c);
free (r);
}
break;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>cmd_dbg_map_jemalloc</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Usage:"</literal></expr>, <expr><literal type="string">"dmh"</literal></expr>, <expr><literal type="string">" #Memory map heap"</literal></expr>,
<expr><literal type="string">"dmha"</literal></expr>, <expr><literal type="string">"[arena_t]"</literal></expr>, <expr><literal type="string">"show all arenas created, or print arena_t structure for given arena"</literal></expr>,
<expr><literal type="string">"dmhb"</literal></expr>, <expr><literal type="string">"[arena_t]"</literal></expr>, <expr><literal type="string">"show all bins created for given arena"</literal></expr>,
<expr><literal type="string">"dmhc"</literal></expr>, <expr><literal type="string">"*|[arena_t]"</literal></expr>, <expr><literal type="string">"show all chunks created in all arenas, or show all chunks created for a given arena_t instance"</literal></expr>,

<expr><literal type="string">"dmh?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show map heap help"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> 
<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>jemalloc_print_narenas</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>jemalloc_get_bins</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>jemalloc_get_chunks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>





</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
