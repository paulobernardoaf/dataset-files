<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\disasm.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASRETRY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LOCALS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NARGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_PREFIX</name></cpp:macro> <cpp:value>";-- "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR</name><parameter_list>(<parameter><type><name>ds</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ds)-&gt;show_color ? (ds)-&gt;field : "")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_ARG</name><parameter_list>(<parameter><type><name>ds</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ds)-&gt;show_color &amp;&amp; (ds)-&gt;show_color_args ? (ds)-&gt;field : "")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_CONST</name><parameter_list>(<parameter><type><name>ds</name></type></parameter>, <parameter><type><name>color</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ds)-&gt;show_color ? Color_ ##color : "")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_RESET</name><parameter_list>(<parameter><type><name>ds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COLOR_CONST(ds, RESET)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>emustack_min</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>emustack_max</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>r_vline_a</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"|"</literal></expr>, 
<expr><literal type="string">"|-"</literal></expr>, 
<expr><literal type="string">"-"</literal></expr>, 
<expr><literal type="string">":"</literal></expr>, 
<expr><literal type="string">","</literal></expr>, 
<expr><literal type="string">"\\"</literal></expr>, 
<expr><literal type="string">"/"</literal></expr>, 
<expr><literal type="string">"`"</literal></expr>, 
<expr><literal type="string">"-&gt;"</literal></expr>, 
<expr><literal type="string">"=&lt;"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>r_vline_u</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 


<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"&gt;"</literal></expr>, 
<expr><literal type="string">"&lt;"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>r_vline_uc</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 
<expr><literal type="string">"â"</literal></expr>, 

<expr><literal type="string">"â"</literal></expr>, 


<expr><literal type="string">"â¯"</literal></expr>, 
<expr><literal type="string">"â°"</literal></expr>, 
<expr><literal type="string">"â­"</literal></expr>, 
<expr><literal type="string">"â®"</literal></expr>, 
<expr><literal type="string">"&gt;"</literal></expr>, 
<expr><literal type="string">"&lt;"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_PRE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_PRE_EMPTY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_PRE_FCN_HEAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_PRE_FCN_MIDDLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_PRE_FCN_TAIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <name><name>strsub</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>immtrim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>immstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_esil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_color_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_color_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>capitalize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_flgoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasMidflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasMidbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atabs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atabsonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atabsoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>jmpsub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>varsub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_lines_bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_lines_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_lines_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_lines_fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>linesright</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tracespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cyclespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmtfold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_dwarf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_describe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adistrick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_xrefs_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asm_demangle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_offdec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>show_bbline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pre_emu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_stroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_strinv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_strflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_optype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_strlea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_emu_ssa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_section_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flags_inline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_section_perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_section_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_symbols_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_offseg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bblined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_reloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_reloff_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_comments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_usercomments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hint_jmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hint_cdiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hint_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hint_lea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_hint_emu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asm_hint_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>emuptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_slow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>ssa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmtcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_cmtflgrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_cmtesil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_cycles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_refptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_stackptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stackFd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_xrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_cmtrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_cmtoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_asciidot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrEnc</name></type> <name>strenc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_comment_right_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>flagspace_ports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_flag_in_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_comment_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ocomment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastfail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ocols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lcols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>, <name>nbytes</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_varaccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_fcnsig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hinted_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_varsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>midflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>midbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>midcursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_noisy_comments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>asm_highlight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pal_comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_usrcmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_floc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_fline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_flow2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_nop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_math</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_btext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_jmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_cjmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_swi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_trap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_push</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_pop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_mov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_gui_cflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_gui_dataoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_gui_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_gui_alt_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_gui_border</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_linehl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_func_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_func_var_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_func_var_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>lastflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>esil_old_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>esil_regstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esil_regstate_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>esil_likely</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>middle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_col</name></decl>, <modifier>*</modifier><name>prev_line_col</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refline</name></decl>, <modifier>*</modifier><name>refline2</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>osl</name></decl>, <modifier>*</modifier><name>sl</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stackptr</name></decl>, <name>ostackptr</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>, <name>vat</name>, <name>addr</name>, <name>dest</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tries</name></decl>, <name>cbytes</name>, <name>idx</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>chref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>asmop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>analop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>pdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>foldxrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev_ins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prev_ins_eq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_ins_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_nodup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_tabsbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_tabsoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dwarfFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dwarfAbspath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>showpayloads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>showrelocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmtcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>printed_str_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>printed_flag_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>min_ref_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buf_line_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asm_types</name></decl>;</decl_stmt>
}</block></struct></type> <name>RDisasmState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_setup_print_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>middle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_setup_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>middle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fcnline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_pre_line</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_line</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_newline</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_cont</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_esil_anal</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_reflines_init</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_align_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RDisasmState</name> <modifier>*</modifier></type> <name>ds_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_build_op_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_show_bytes</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_pre_xrefs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_fcnlines</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_xrefs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_atabs_option</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_functions</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_control_flow_comments</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_adistrick_comments</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_comments_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_comments_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_flags</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_update_ref_lines</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ds_disassemble</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_lines_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_lines_left</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_cycles</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_family</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_stackptr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_offset</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_op_size</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_trace</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_opstr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_color_reset</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ds_print_middle</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_labels</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_sysregs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_fcn_name</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_as_string</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_core_vmode</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_dwarf</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_asmop_payload</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ds_esc_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix_out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_comment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_ptr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_demangled</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>refaddr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ds_sub_jumps</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_start_line_highlight</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ds_end_line_highlight</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>line_highlighted</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ds_print_shortcut</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_core_pava</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>pava</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get_paddr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>fcnIn</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <call><name>r_anal_function_contains</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_utf8_char</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>ARROW_LEFT</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>ARROW_RIGHT</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">':'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_UP</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'|'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_VERT</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_HORIZ</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_HORIZ</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">','</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_TL</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'.'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_TR</name></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="char">'`'</literal></expr>:</case> <return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_BL</name></expr>]</index></name></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">" "</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_ref_lines</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line_col</name></decl></parameter>, <parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>&amp;</operator> <name>R_ANAL_REFLINE_TYPE_UTF8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line_col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_flow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_utf8_char</name> <argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_flow2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_utf8_char</name> <argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_utf8_char</name> <argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line_col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_flow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_flow2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_bits_comment</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmt_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>&amp;&amp;</operator> <name>cmt</name> <operator>&amp;&amp;</operator> <name>cmt_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asm_arch</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>asm_arch</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>asm_arch</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>asm_arch</name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">" (thumb)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">" (arm)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">" (aarch64)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><name>cmt_size</name></expr></argument>, <argument><expr><literal type="string">" (%d bits)"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_core_get_section_name</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>section</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>oaddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>oaddr</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>section</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>bo</name></expr>?</condition><then> <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><name>bo</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%10s "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>section</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mn</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mn</name></expr>?</condition><then> <expr><name>mn</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>oaddr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<return>return <expr><name>section</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>_ds_comment_align_</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sn</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section</name></name></expr> ?</condition><then> <expr><call><name>r_core_get_section_name</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>nl</name></expr>?</condition><then> <expr><literal type="string">"\n"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s %s"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name>up</name></expr>?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">".-"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALIGN</name></cpp:macro> <cpp:value>_ds_comment_align_ (ds, true, false)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_comment_lineup</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_ALIGN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_comment_</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>&amp;&amp;</operator> <name>align</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf_list</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>&amp;&amp;</operator> <name>nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment_</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DS_COMMENT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>align</name></type></parameter>, <parameter><type><name>nl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ds_comment_##name(RDisasmState *ds, const char *format, ...) { va_list ap; va_start (ap, format); ds_comment_ (ds, align, nl, format, ap); va_end (ap); }</cpp:value></cpp:define>







<macro><name>DS_COMMENT_FUNC</name> <argument_list>(<argument>start</argument>, <argument>true</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>DS_COMMENT_FUNC</name> <argument_list>(<argument>middle</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>DS_COMMENT_FUNC</name> <argument_list>(<argument>end</argument>, <argument>false</argument>, <argument>true</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_comment_esil</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <name>up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr> ?</condition><then> <expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ds_comment_lineup</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf_list</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_esil_anal_fini</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>last_disasm_reg</name></name> <operator>=</operator> <call><name>r_reg_arena_peek</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name> <init>= <expr><call><name>r_reg_regset_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate_size</name></name> <operator>==</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_arena_poke</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDisasmState</name> <modifier>*</modifier></type> <name>ds_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDisasmState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strip</name></name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.strip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>comment</name></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(core-&gt;cons &amp;&amp; core-&gt;cons-&gt;context-&gt;pal.x)? core-&gt;cons-&gt;context-&gt;pal.x</cpp:value></cpp:define>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_comment</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_usrcmt</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>usercomment</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_fname</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_floc</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>floc</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_fline</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>fline</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_flow</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>flow</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_flow2</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>flow2</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_flag</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_label</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_other</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_nop</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>nop</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_bin</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_math</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>math</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_btext</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>btext</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_jmp</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>jmp</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_cjmp</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>cjmp</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_call</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BGREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_cmp</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_swi</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>swi</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_MAGENTA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_trap</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>trap</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_ret</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_push</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>push</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_pop</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>pop</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BYELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_reg</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_num</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_mov</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>mov</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_invalid</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>invalid</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_gui_cflow</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>gui_cflow</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_gui_dataoffset</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>gui_dataoffset</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_YELLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_gui_background</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>gui_background</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_gui_alt_background</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>gui_alt_background</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_GRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_gui_border</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>gui_border</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BGGRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_linehl</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>linehl</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BGBLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_func_var</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>func_var</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_func_var_type</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>func_var_type</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_BLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>color_func_var_addr</name></name> <operator>=</operator> <call><name>P</name><argument_list>(<argument><expr><name>func_var_addr</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Color_CYAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>immstr</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.imm.str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>immtrim</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.imm.trim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>use_esil</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.esil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre_emu</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.pre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_flgoff</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_nodup</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.nodup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ah</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.highlight"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_highlight</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ah</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ah</name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>ah</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_anal</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.anal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color_bytes</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color.bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color_args</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color.args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>colorop</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color.ops"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_utf8</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>acase</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.ucase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>capitalize</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.capitalize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>atabs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.tabs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>atabsonce</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.tabs.once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.tabs.off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>midbb</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bb.middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>midcursor</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.midcursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>pseudo</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pseudo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>atabs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>interactive</name></name> <operator>=</operator> <call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>jmpsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.jmpsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>varsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var.sub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.relsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>regsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.regsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>localvar_only</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var.subonly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>retleave_asm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_fcnsig</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.fcnsig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_vars</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var.summary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_varaccess</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var.access"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>maxrefs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.xrefs.max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>maxflags</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>flags_inline</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.inline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_types</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>foldxrefs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.xrefs.fold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines</name></name></expr> ?</condition><then> <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.bb"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesright</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_indent</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.indent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>indent_space</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.indentspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>tracespace</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.tracespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cyclespace</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cyclespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_dwarf</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.dwarf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>dwarfFile</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.dwarf.file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>dwarfAbspath</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.dwarf.abspath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_call</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines</name></name></expr> ?</condition><then> <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.call"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_ret</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines</name></name></expr> ?</condition><then> <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.ret"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_size</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_trace</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesout</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>adistrick</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.demangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_describe</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.describe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offdec</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.decoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_bbline</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bb.line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_col</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.section.col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_perm</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.section.perm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_name</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.section.name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_symbols</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_symbols_col</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.symbol.col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_instr</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.instr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.emu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_str</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stroff</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str.off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strinv</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str.inv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strflag</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str.flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strlea</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str.lea"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_write</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_ssa</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.ssa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stack</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stack</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><literal type="string">"malloc://32K"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"32K"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"SP"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>size</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>emustack_min</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emustack_max</name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name> <operator>=</operator> <call><name>r_io_fd_open</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_fd_close</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create map for tha stack, fd %d got closed again\n"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_io_map_set_name</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"fake.stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offseg</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.segoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_flags</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_bytes</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_optype</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.optype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_meta</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_xrefs_code</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.xrefs.code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_reloff</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.reloff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_reloff_flags</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.reloff.flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_fcn</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines</name></name></expr> ?</condition><then> <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.fcn"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.comments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.usercomments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_jmp</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.jmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_call</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_lea</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.lea"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_emu</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.emu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_cdiv</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.cdiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.pos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hints</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_slow</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.slow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_refptr</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.refptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_calls</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.calls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_family</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcol</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtesil</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.esil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtflgrefs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.flgrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cycles</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cycles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_stackptr</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.stackptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_xrefs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.xrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtrefs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cmtfold</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.fold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtoff</name></name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_cmtoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtoff</name></name> <operator>=</operator> <literal type="string">"nodup"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_functions</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.nbytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>strconv_mode</name></name></expr></argument>, <argument><expr><literal type="string">"asciidot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strenc_str</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.str.enc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strenc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_GUESS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_LATIN1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_UTF8</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"utf16le"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_UTF16LE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"utf32le"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_UTF32LE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"utf16be"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_UTF16BE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>strenc_str</name></expr></argument>, <argument><expr><literal type="string">"utf32be"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_UTF32BE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>=</operator> <name>R_STRING_ENC_GUESS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>bytespace</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bytespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>flagspace_ports</name></name> <operator>=</operator> <call><name>r_flag_space_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="string">"ports"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lbytes</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lbytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right_default</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right_default</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_flag_in_bytes</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.inbytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_marks</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.marks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_noisy_comments</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.noisy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocomment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastfail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_likely</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>showpayloads</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.payloads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>showrelocs</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.relocs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>min_ref_addr</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.var.submin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flag_in_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_flags</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.wide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|=</operator> <name>R_ANAL_REFLINE_TYPE_WIDE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_utf8</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|=</operator> <name>R_ANAL_REFLINE_TYPE_UTF8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lcols</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_trace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_stackptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>nbytes</name></name></expr>?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>tries</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.lines.wide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|=</operator> <name>R_ANAL_REFLINE_TYPE_WIDE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_utf8</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|=</operator> <name>R_ANAL_REFLINE_TYPE_UTF8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ds</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>lastaddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_reflines_fini</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_reflines_init</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lastaddr</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_reflines_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name> <operator>=</operator> <call><name>r_anal_reflines_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>linesout</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_call</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_free</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Free fake stack\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_fd_close</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>stackFd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_esil_anal_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_reflines_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_esil_anal_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ssa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>colorize_asm_string</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hlstr</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_HIGHLIGHT</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>partial_reset</name> <init>= <expr><ternary><condition><expr><call><name>line_highlighted</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>hlstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>hlstr</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color_args</name></name></expr> ?</condition><then> <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>colorop</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>print_color</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><call><name>r_print_color_op_type</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spacer</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"||"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>spacer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scol1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>spacer</name> <operator>-</operator> <name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scol2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>spacer</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scol1</name> <operator>=</operator> <call><name>r_print_colorize_opcode</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_reg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_num</name></name></expr></argument>, <argument><expr><name>partial_reset</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scol2</name> <operator>=</operator> <call><name>r_print_colorize_opcode</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_reg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_num</name></name></expr></argument>, <argument><expr><name>partial_reset</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scol1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scol1</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scol2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scol2</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s||%s"</literal></expr></argument>, <argument><expr><name>scol1</name></expr></argument>, <argument><expr><name>scol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>scol1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>scol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>source</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_print_colorize_opcode</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_reg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_num</name></name></expr></argument>, <argument><expr><name>partial_reset</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_must_strip</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>strip</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ds</name><operator>-&gt;</operator><name>strip</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>optype</name> <init>= <expr><call><name>r_anal_optype_to_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>optype</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>optype</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>strip</name></name></expr></argument>, <argument><expr><name>optype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_highlight_word</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_reset</name> <init>= <expr><ternary><condition><expr><call><name>line_highlighted</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>color_linehl</name></name></expr> </then><else>: <expr><name>Color_RESET_BG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_str</name> <init>= <expr><call><name>r_str_highlight</name> <argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>color_reset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <ternary><condition><expr><name>asm_str</name></expr>?</condition><then> <expr><name>asm_str</name></expr></then><else>: <expr><name>source</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__replaceImports</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>imports</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;core-&gt;anal-&gt;imports</argument>, <argument>iter</argument>, <argument>imp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name>imp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>imports</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;fcn-&gt;imports</argument>, <argument>iter</argument>, <argument>imp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name>imp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_op_ireg</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>r_core_anal_op</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>ireg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_ptr_at</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_access</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"var.0x%"</literal><name>PFMT64x</name> <literal type="string">".%d.%d.access"</literal></expr></argument>,
<argument><expr><name><name>var</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vars</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>, <argument><expr><name>var_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name> <init>= <expr><name>addr</name> <operator>-</operator> <name><name>var</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vars</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>vars</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>sdb_anext</name> <argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INT_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_build_op_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>use_esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>decode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>r_anal_op_to_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.relsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>regsub</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.regsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_MOV</name>
<operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CMP</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>varsub</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>varlist</name></name> <operator>=</operator> <name>r_anal_var_list_dynamic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>get_op_ireg</name></name> <operator>=</operator> <name>get_op_ireg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>get_ptr_at</name></name> <operator>=</operator> <name>get_ptr_at</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_varsub</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>strsub</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>strsub</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ds</name><operator>-&gt;</operator><name>strsub</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>strsub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_anal_refs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_DATA</name>
<operator>||</operator> <name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_STRING</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opstr</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr> </then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_parse_parse</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>opstr</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>ds_sub_jumps</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>immtrim</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_parse_immtrim</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>ofs</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>flagspace_ports</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>refptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>killme</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>be</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>big_endian</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_read_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killme</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>refptr</name></name></expr></argument>, <argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>=</operator> <name>killme</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_str</name> <init>= <expr><call><name>colorize_asm_string</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>print_color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_parse_filter</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><name>asm_str</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>asm_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>varsub</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ox</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ox</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ox</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>min_ref_addr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ox</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>ox</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_str</name> <init>= <expr><call><name>colorize_asm_string</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>print_color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <name>asm_str</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__replaceImports</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bgcolor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wcdata</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_HIGHLIGHT</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>wc_array</name> <init>= <expr><call><name>r_str_argv</name> <argument_list>(<argument><expr><name>wcdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bgcolor</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>wc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\x1b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>r_str_newlen</name> <argument_list>(<argument><expr><name><name>wc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bgcolor</name> <operator>-</operator> <name><name>wc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_highlight_word</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalHint</name> <modifier>*</modifier></type><name>r_core_hint_begin</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RAnalHint</name><modifier>*</modifier></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hint_syntax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hint_syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.syntax"</literal></expr></argument>, <argument><expr><name>hint_syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hint_syntax</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>syntax</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint_syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hint_syntax</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.syntax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.syntax"</literal></expr></argument>, <argument><expr><name><name>hint</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>new_bits</name></name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>hint</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_pre_line</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_setup_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_col</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name> <operator>=</operator> <name>tmp_col</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_line</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reflines</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;core-&gt;anal-&gt;reflines</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"arrow"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>buf_line_begin</name></name> <operator>=</operator> <call><name>r_cons_get_buffer_len</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ds_print_core_vmode</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_newline</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_cont</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_setup_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>linesright</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalRefStr</name> <modifier>*</modifier></type><name>refstr</name> <init>= <expr><call><name>r_anal_reflines_str</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|</operator> <name>R_ANAL_REFLINE_TYPE_MIDDLE_AFTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name><name>refstr</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>refstr</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_reflines_str_free</name> <argument_list>(<argument><expr><name>refstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_ALIGN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_refs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_cmtrefs</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_anal_xrefs_get_from</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmt</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>fls</name> <init>= <expr><call><name>r_flag_get_list</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fis</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fls</argument>, <argument>iter2</argument>, <argument>fis</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; (%s)"</literal></expr></argument>, <argument><expr><name><name>fis</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; (%s)"</literal></expr></argument>, <argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_REF_TYPE_CALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>aop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aop</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type> <name>fcn</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; 0x%"</literal> <name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_xrefs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>refi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>realname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_xrefs</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>xrefs</name> <init>= <expr><call><name>r_anal_xrefs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xrefs</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fcnlines</name> <init>= <expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>maxrefs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s; XREFS(%d)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>foldxrefs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cols</name> <operator>-=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>/=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>&gt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><name>cols</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s; XREFS: "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>iter</argument>, <argument>refi</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%08"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>,
<argument><expr><call><name>r_anal_xrefs_type_tostring</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s; XREFS: "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>addrs</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fun</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_fun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_f</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>iter</argument>, <argument>refi</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_xrefs_code</name></name> <operator>&amp;&amp;</operator> <name><name>refi</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_CODE</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>refi</name><operator>-&gt;</operator><name>at</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>realname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fun</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fun</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>!=</operator> <name><name>xrefs</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>next_addr</name> <init>= <expr><operator>(</operator><operator>(</operator><name>RAnalRef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>next_fun</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>next_addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_fun</name> <operator>&amp;&amp;</operator> <name><name>next_fun</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>fun</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><call><name>r_num_dup</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>fun</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>demangled</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>realname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fun</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><call><name>r_num_dup</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>!=</operator> <name><name>xrefs</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>next_addr</name> <init>= <expr><operator>(</operator><operator>(</operator><name>RAnalRef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>next_f</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>next_addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>next_f</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><call><name>r_num_dup</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f_sym</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>f_sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sym."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f_sym</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
<argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_sym</name> <operator>&amp;&amp;</operator> <name><name>f_sym</name><operator>-&gt;</operator><name>demangled</name></name> <operator>&amp;&amp;</operator> <name><name>f_sym</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>f_sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>realname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><call><name>r_num_dup</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plural</name> <init>= <expr><ternary><condition><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"S"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plus</name> <init>= <expr><ternary><condition><expr><name>fun</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s; %s XREF%s from %s @ "</literal></expr></argument>,
<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>pal_comment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_anal_xrefs_type_tostring</name> <argument_list>(<argument><expr><name><name>refi</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plural</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>realname</name></expr> ?</condition><then> <expr><name>realname</name></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>addrptr</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>addrs</argument>, <argument>it</argument>, <argument>addrptr</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addrptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>addrptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s%s0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><ternary><condition><expr><name>it</name> <operator>==</operator> <name><name>addrs</name><operator>-&gt;</operator><name>head</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>plus</name></expr></argument>, <argument><expr><operator>*</operator><name>addrptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>realname</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>fun</name> <operator>||</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">" %s; %s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Corrupted database?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_atabs_option</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>comma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>brackets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>atabs</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufasm_len</name> <init>= <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>bufasm_len</name> <operator>*</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>atabs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name>bufasm_len</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>b</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>brackets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>brackets</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>comma</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>brackets</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>brackets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>atabs</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>atabsonce</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handleMidFlags</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hasMidflag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midcursor</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <name>from</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cur</name> <operator>-</operator> <name>from</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name> <operator>&amp;&amp;</operator> <name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>fi</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>fi</name><operator>-&gt;</operator><name>realname</name></name> <operator>&amp;&amp;</operator> <name><name>fi</name><operator>-&gt;</operator><name>realname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"hit."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"str."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>=</operator> <name>R_MIDFLAGS_REALIGN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"reloc."</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>print</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>==</operator> <name>R_MIDFLAGS_SYMALIGN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sym."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hasMidflag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handleMidBB</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hasMidbb</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><call><name>r_anal_fcn_bbget_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bb</name> <operator>&amp;&amp;</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hasMidbb</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_flag_in_middle</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>midflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>midflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RDisasmState</name></type> <name>ds</name> <init>= <expr><block>{
<expr><operator>.</operator><name>at</name> <operator>=</operator> <name>at</name></expr>,
<expr><operator>.</operator><name>oplen</name> <operator>=</operator> <name>oplen</name></expr>,
<expr><operator>.</operator><name>midflags</name> <operator>=</operator> <operator>*</operator><name>midflags</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>midflags</name> <operator>=</operator> <name><name>ds</name><operator>.</operator><name>midflags</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_bb_starts_in_middle</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name></type> <name>ds</name> <init>= <expr><block>{
<expr><operator>.</operator><name>at</name> <operator>=</operator> <name>at</name></expr>,
<expr><operator>.</operator><name>oplen</name> <operator>=</operator> <name>oplen</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_show_cursor</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>res</name><index>[]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_marks</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>&amp;&amp;</operator>
<name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator>
<name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_bp_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midbb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hasMidflag</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>hasMidbb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>diff</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>diff</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_pre_xrefs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_fcnlines</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_setup_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>!=</operator> <name>DS_PRE_NONE</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>!=</operator> <name>DS_PRE_EMPTY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <ternary><condition><expr><name>no_fcnlines</name></expr> ?</condition><then> <expr><name>DS_PRE_EMPTY</name></expr> </then><else>: <expr><name>DS_PRE_FCN_MIDDLE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><operator>!</operator><name>no_fcnlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_col</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_marks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_show_cursor</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name> <operator>=</operator> <name>tmp_col</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>tmp_get_realsize</name> <parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><call><name>r_anal_function_realsize</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_functions_argvar</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_var</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sign</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><ternary><condition><expr><name>is_var</name></expr> ?</condition><then> <expr><literal type="string">"var"</literal></expr> </then><else>: <expr><literal type="string">"arg"</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>constr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>constr_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cond</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constr_buf</name> <operator>=</operator> <call><name>var_get_constraint</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>constr_buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constr</name> <operator>=</operator> <call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>constr_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>constr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cond</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s %s%s%s%s %s%s%s%s@ %s%c0x%x"</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pfx</name></expr></argument>,
<argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_addr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>cond</name></expr>?</condition><then> <expr><literal type="string">" { "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>cond</name></expr>?</condition><then> <expr><name>constr</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>cond</name></expr>?</condition><then> <expr><literal type="string">"} "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">".afvd %s"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" = %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>constr_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printVarSummary</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numColor</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bp_vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp_vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rg_vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bp_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rg_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bp_vars_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp_vars_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rg_vars_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bp_args_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp_args_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rg_args_color</name> <init>= <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>isarg</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>bp_args</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>sp_args</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>rg_args</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>bp_vars</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>sp_vars</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>rg_vars</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>bp_vars</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>bp_vars_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp_vars</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>sp_vars_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rg_vars</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>rg_vars_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp_args</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>bp_args_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp_args</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>sp_args_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rg_args</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>rg_args_color</name> <operator>=</operator> <name>numColor</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"vars: %s%d%s %s%d%s %s%d%s"</literal></expr></argument>,
<argument><expr><name>bp_vars_color</name></expr></argument>, <argument><expr><name>bp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sp_vars_color</name></expr></argument>, <argument><expr><name>sp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rg_vars_color</name></expr></argument>, <argument><expr><name>rg_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"args: %s%d%s %s%d%s %s%d%s"</literal></expr></argument>,
<argument><expr><name>bp_args_color</name></expr></argument>, <argument><expr><name>bp_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sp_args_color</name></expr></argument>, <argument><expr><name>sp_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rg_args_color</name></expr></argument>, <argument><expr><name>rg_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"bp: %s%d%s (vars %s%d%s, args %s%d%s)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>bp_args</name> <operator>||</operator> <name>bp_vars</name></expr> ?</condition><then> <expr><name>numColor</name></expr> </then><else>: <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>bp_args</name> <operator>+</operator> <name>bp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>bp_vars_color</name></expr></argument>, <argument><expr><name>bp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>bp_args_color</name></expr></argument>, <argument><expr><name>bp_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"sp: %s%d%s (vars %s%d%s, args %s%d%s)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>sp_args</name> <operator>||</operator> <name>sp_vars</name></expr> ?</condition><then> <expr><name>numColor</name></expr> </then><else>: <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>sp_args</name><operator>+</operator><name>sp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sp_vars_color</name></expr></argument>, <argument><expr><name>sp_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sp_args_color</name></expr></argument>, <argument><expr><name>sp_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"rg: %s%d%s (vars %s%d%s, args %s%d%s)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>rg_args</name> <operator>||</operator> <name>rg_vars</name></expr> ?</condition><then> <expr><name>numColor</name></expr> </then><else>: <expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>rg_args</name><operator>+</operator><name>rg_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rg_vars_color</name></expr></argument>, <argument><expr><name>rg_vars</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rg_args_color</name></expr></argument>, <argument><expr><name>rg_args</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>empty_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"void "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_functions</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fcn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fcn_name_alloc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_functions</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>demangle</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_lib</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle.libs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>showSig</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_fcnsig</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_calls</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>call</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.calls"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><ternary><condition><expr><name>demangle</name></expr> ?</condition><then> <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>demangle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcn_name</name> <operator>=</operator> <call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>keep_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcn_name_alloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fcn_name</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fcn_name</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sign</name> <init>= <expr><call><name>r_anal_function_get_signature</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>empty_signature</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_FCN_TYPE_LOC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s "</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fline</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_CROSS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showSig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s %"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_floc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fcn_name</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcntype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmt</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_bits_comment</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_FCN_TYPE_FCN</name></expr>:</case>
<case>case <expr><name>R_ANAL_FCN_TYPE_SYM</name></expr>:</case>
<expr_stmt><expr><name>fcntype</name> <operator>=</operator> <literal type="string">"fcn"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_FCN_TYPE_IMP</name></expr>:</case>
<expr_stmt><expr><name>fcntype</name> <operator>=</operator> <literal type="string">"imp"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>fcntype</name> <operator>=</operator> <literal type="string">"loc"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_HEAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flgoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showSig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s(%s) %s%s%s %d"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fname</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fcntype</name></expr></argument>, <argument><expr><name>fcn_name</name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tmp_get_realsize</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showSig</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"// %s"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_MIDDLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalFcnVarsCache</name></type> <name>vars_cache</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_fcn_vars_cache_init</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars_cache</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>o_varsum</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>interactive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>o_varsum</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numvars</name> <init>= <expr><name><name>vars_cache</name><operator>.</operator><name>bvars</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>vars_cache</name><operator>.</operator><name>rvars</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>vars_cache</name><operator>.</operator><name>svars</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>padding</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numvars</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>call</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showSig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d: "</literal></expr></argument>, <argument><expr><call><name>r_anal_function_realsize</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><call><name>r_anal_fcn_format_sig</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>fcn_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars_cache</name></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_vars</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>all_vars</name> <init>= <expr><name><name>vars_cache</name><operator>.</operator><name>bvars</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>all_vars</name></expr></argument>, <argument><expr><name><name>vars_cache</name><operator>.</operator><name>svars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>all_vars</name></expr></argument>, <argument><expr><name><name>vars_cache</name><operator>.</operator><name>rvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printVarSummary</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>all_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>spaces</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>all_vars</name> <init>= <expr><name><name>vars_cache</name><operator>.</operator><name>bvars</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>all_vars</name></expr></argument>, <argument><expr><name><name>vars_cache</name><operator>.</operator><name>svars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>all_vars</name></expr></argument>, <argument><expr><name><name>vars_cache</name><operator>.</operator><name>rvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>all_vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">12</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>spaces</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flgoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s; "</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_VAR_KIND_BPV</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_var</name> <init>= <expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>isarg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_show_functions_argvar</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>var</name></expr></argument>,
<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>, <argument><expr><name>is_var</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_ANAL_VAR_KIND_REG</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>r_reg_index_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Register not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sarg %s%s%s%s %s@ %s"</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">".afvd %s"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_ANAL_VAR_KIND_SPV</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_var</name> <init>= <expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>isarg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_delta</name> <init>= <expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>maxstack</name></name> <operator>+</operator> <name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_show_functions_argvar</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>var</name></expr></argument>,
<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>,
<argument><expr><name>is_var</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>saved_delta</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_meta_get_var_comment</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s; %s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_comment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_varsum</name></name> <operator>=</operator> <name>o_varsum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_fcn_vars_cache_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vars_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn_name_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fcn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>imports</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;fcn-&gt;imports</argument>, <argument>iter</argument>, <argument>imp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".import %s"</literal></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;core-&gt;anal-&gt;imports</argument>, <argument>iter</argument>, <argument>imp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".globalimport %s"</literal></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_setup_print_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>middle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_setup_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_setup_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>middle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_functions</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_lines_fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_NONE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_EMPTY</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name> <operator>==</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>middle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_TAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_MIDDLE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_anal_function_max_addr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <call><name>r_anal_function_min_addr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_TAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_anal_function_contains</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_MIDDLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>==</operator> <name>DS_PRE_FCN_TAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_EMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>==</operator> <name>DS_PRE_FCN_MIDDLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_TAIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_pre</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fcnline</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcnline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <name>DS_PRE_EMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>pre</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DS_PRE_FCN_HEAD</name></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_TL</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DS_PRE_FCN_MIDDLE</name></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>LINE_VERT</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DS_PRE_FCN_TAIL</name></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_BL</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DS_PRE_EMPTY</name></expr>:</case>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DS_PRE_NONE</name></expr>:</case>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s "</literal></expr></argument>,
<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_comments_describe</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_describe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>locase</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locase</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_asm_describe</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>locase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_comments_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>linelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scr</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vartype</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_VARTYPE</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comment</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vartype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s; %s"</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vartype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vartype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>comment</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ocomment</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vartype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s; %s %s%s; %s"</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_func_var_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_usrcmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vartype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s; %s"</literal></expr></argument>, <argument><expr><call><name>COLOR_ARG</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_usrcmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right_default</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>ocols</name></name> <operator>+</operator> <name>linelen</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mycols</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>lcols</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mycols</name> <operator>+</operator> <name>linelen</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mycols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mycols</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cmtfold</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" ; [z] unfold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_usrcmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>comment</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ocomment</name></name> <operator>!=</operator> <name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat_justify</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name>mycols</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>=</operator> <name>scr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flagCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>fa</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fa</name><operator>-&gt;</operator><name>realname</name></name> <operator>&amp;&amp;</operator> <name><name>fb</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fa</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fa</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__preline_flag</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hasColor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flag</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hasColor</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasColor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printPre</name></cpp:macro> <cpp:value>(outline || !*comma)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_show_flags</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_flags</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>switch_addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>case_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>case_current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>flaglist</name> <init>= <expr><call><name>r_flag_get_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>uniqlist</name> <init>= <expr><ternary><condition><expr><name>flaglist</name></expr>?</condition><then> <expr><call><name>r_list_uniq</name> <argument_list>(<argument><expr><name>flaglist</name></expr></argument>, <argument><expr><name>flagCmp</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>outline</name> <init>= <expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>flags_inline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_lib</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle.libs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>docolon</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>uniqlist</argument>, <argument>iter</argument>, <argument>flag</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>flag</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_fcn_lines</name> <init>= <expr><operator>(</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>flag</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>maxflags</name></name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>maxflags</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>printPre</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>no_fcn_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"case."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%63[^.].%d"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>case_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>saddr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>case_start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>switch_addr</name> <operator>=</operator> <name>saddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_prev</name> <operator>=</operator> <name>case_current</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_start</name> <operator>=</operator> <name>case_current</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>!=</operator> <name><name>uniqlist</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>case_current</name> <operator>==</operator> <name>case_prev</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>switch_addr</name> <operator>==</operator> <name>saddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>case_prev</name> <operator>=</operator> <name>case_current</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>printPre</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fake_flag_marks</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_marks</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>printPre</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flgoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_pre_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fake_flag_marks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>no_fcn_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hasColor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flag</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hasColor</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasColor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name> <operator>&amp;&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"switch."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>FLAG_PREFIX</name><literal type="string">"switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"case."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__preline_flag</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>FLAG_PREFIX</name> <literal type="string">"default:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"default."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>case_prev</name> <operator>!=</operator> <name>case_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>FLAG_PREFIX</name> <literal type="string">"case %d...%d:"</literal></expr></argument>, <argument><expr><name>case_start</name></expr></argument>, <argument><expr><name>case_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>!=</operator> <name><name>uniqlist</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>case_start</name> <operator>=</operator> <name>case_current</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>FLAG_PREFIX</name> <literal type="string">"case %d:"</literal></expr></argument>, <argument><expr><name>case_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>case_start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>case_prev</name> <operator>=</operator> <name>case_current</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s; from %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>docolon</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>keep_lib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><ternary><condition><expr><name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr>?</condition><then> <expr><name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr></then><else>: <expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>flags_inline</name></name> <operator>||</operator> <name>nth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>FLAG_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nth</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outline</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>comma</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>docolon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>uniqlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_update_ref_lines</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalRefStr</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>r_anal_reflines_str</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>r_anal_reflines_str</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>linesopts</name></name> <operator>|</operator> <name>R_ANAL_REFLINE_TYPE_MIDDLE_BEFORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>indent_level</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>indent_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ds_disassemble</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_meta</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>mt_sz</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"meta.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition><expr><operator>*</operator><name>info</name></expr>;</condition> <incr><expr><name>info</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>info</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_FORMAT</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_MAGIC</name></expr>:</case>
<case>case <expr><name>R_META_TYPE_HIDE</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"meta.%c.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mt_sz</name> <operator>=</operator> <call><name>sdb_array_get_num</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>ignbithints</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_meta</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>r_meta_find_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_ANY</name></expr></argument>, <argument><expr><name>R_META_WHERE_HERE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>&amp;&amp;</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".data: %s\n"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_FORMAT</name></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".format : %s\n"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_MAGIC</name></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">".magic : %s\n"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_RUN</name></expr>:</case>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name><name>meta</name><operator>-&gt;</operator><name>from</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_hexbuf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">".string \"%s\""</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_hex</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">".hex %s"</literal></expr></argument>, <argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt> 
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>meta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_nodup</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"invalid"</literal></expr></then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins</name></name></expr></argument>, <argument><expr><name>opname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_eq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_eq</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">31337</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_eq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"dup (%d)\n"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins_eq</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_ins</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HASRETRY</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>cbytes</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>tries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>tries</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastfail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastfail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>
?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>
</then><else>: <expr><call><name>r_asm_op_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_parse_parse</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>
?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>
</then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>acase</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>capitalize</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ba</name> <operator>=</operator> <call><name>toupper</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name>mt_sz</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>mt_sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_control_flow_comments</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_cmtflgrefs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_anal</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"af @ 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; ref to %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_lines_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>linesright</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printCol</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outsz</name> <init>= <expr><name>cols</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>outsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>outsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>outsz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sect_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_len</name> <operator>&gt;</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><index>[<expr><name>cols</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sect</name><index>[<expr><name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sect</name><index>[<expr><name>cols</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outsz</name><operator>-</operator><name>pre</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>outsz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sect</name></expr></argument>, <argument><expr><name>outsz</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_lines_left</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>linesright</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_section</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_perm</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>map</name></expr>?</condition><then> <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="string">"---"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>r_core_get_section_name</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sect</name> <init>= <expr><ternary><condition><expr><name>str</name></expr>?</condition><then> <expr><name>str</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printCol</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>sect</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_section_col</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_symbols</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>RFlagItem</name></type> <name>sfi</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <operator>&amp;</operator><name>sfi</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>fi</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <operator>&amp;</operator><name>sfi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s + %-4d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printCol</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_symbols_col</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_family</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_family</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>familystr</name> <init>= <expr><call><name>r_anal_op_family_to_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%5s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>familystr</name></expr>?</condition><then> <expr><name>familystr</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_cycles</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_cycles</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>failcycles</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%3d "</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>cycles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%3d %3d "</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>cycles</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>failcycles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cyclespace</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>spaces</name> <index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>times</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>cycles</name></name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spaces</name><index>[<expr><name>times</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disasm_stackptr.inc"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_offset</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasCustomColor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>color</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>color</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>r_cons_pal_parse</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasCustomColor</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_print_set_screenbounds</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>RFlagItem</name></type> <name>sfi</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_trace</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seggrn</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.seggrn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_reloff</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>at</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <operator>&amp;</operator><name>sfi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_reloff_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name> <operator>=</operator> <name>fi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>at</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>at</name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>at</name> <operator>-</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>lastflag</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>lastflag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_trace</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugTracepoint</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>r_debug_trace_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>show_trace</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>tp</name></expr>?</condition><then> <expr><operator>!</operator><operator>!</operator><name><name>tp</name><operator>-&gt;</operator><name>count</name></name></expr></then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>show_trace</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hasCustomColor</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>of</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_print_offset_sg</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><operator>(</operator><name>at</name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>dest</name></name><operator>)</operator> <operator>||</operator> <name>show_trace</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offseg</name></name></expr></argument>, <argument><expr><name>seggrn</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offdec</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>of</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_print_offset_sg</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><operator>(</operator><name>at</name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>dest</name></name><operator>)</operator> <operator>||</operator> <name>show_trace</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offseg</name></name></expr></argument>, <argument><expr><name>seggrn</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_offdec</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_offset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsoff</name></name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsbuf</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsoff</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>atabsoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>_tabsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_op_size</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_trace</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugTracepoint</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_trace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>r_debug_trace_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x:%04x "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tp</name></expr>?</condition><then><expr><name><name>tp</name><operator>-&gt;</operator><name>times</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>tp</name></expr>?</condition><then><expr><name><name>tp</name><operator>-&gt;</operator><name>count</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>tracespace</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>spaces</name> <index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>times</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>r_debug_trace_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>times</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>times</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spaces</name><index>[<expr><name>times</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_adistrick_comments</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>adistrick</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>middle</name></name> <operator>=</operator> <call><name>r_anal_reflines_middle</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reflines</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_data_type</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>isSigned</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ib</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>ib</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>ib</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>isSigned</name></expr>?</condition><then> <expr><literal type="string">".char"</literal></expr></then><else>: <expr><literal type="string">".byte"</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>isSigned</name></expr>?</condition><then> <expr><literal type="string">".int16"</literal></expr></then><else>: <expr><literal type="string">".word"</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"htons"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>isSigned</name></expr>?</condition><then> <expr><literal type="string">".int32"</literal></expr></then><else>: <expr><literal type="string">".dword"</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>isSigned</name></expr>?</condition><then> <expr><literal type="string">".int64"</literal></expr></then><else>: <expr><literal type="string">".qword"</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.marks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>&amp;&amp;</operator>
<name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator>
<name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"* "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_mov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ib</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>r_str_bits</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %sb"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>ntohs</name> <argument_list>(<argument><expr><name>n</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %oo"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%02x"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%04x"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%08x"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%016"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>bits</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>min_ref_addr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>r_flag_get_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>flags</argument>, <argument>iter</argument>, <argument>fi</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; %s"</literal></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_meta_infos</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mi_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>mi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fmi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_meta</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
UNUSED
char key[100];
Sdb *s = core-&gt;anal-&gt;sdb_meta;
snprintf (key, sizeof (key), "meta.0x%" PFMT64x, ds-&gt;at);
const char *infos = sdb_const_get (s, key, 0);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_meta_find_list_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_ANY</name></expr></argument>, <argument><expr><name>R_META_WHERE_HERE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>once</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fmi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>mi</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_lea</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>once</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<expr_stmt><expr><name>fmi</name> <operator>=</operator> <name>mi</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>mi</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hexlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fmi</name> <operator>&amp;&amp;</operator> <name>mi</name> <operator>!=</operator> <name>fmi</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mi_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mi_type</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>esc_bslash</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>esc_bslash</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_STRING_ENC_UTF8</name></expr>:</case>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_escape_utf8</name> <argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>esc_bslash</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_escape_latin1</name> <argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" .string %s\"%s\"%s ; len=%"</literal><name>PFMT64d</name></expr></argument>,
<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_btext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name><name>mi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>R_META_TYPE_HIDE</name></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%"</literal><name>PFMT64d</name><literal type="string">" bytes hidden)"</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_RUN</name></expr>:</case>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"%s @ 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>
<expr_stmt><expr><name>hexlen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name><name>mi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>hexlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hexlen</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_HEADER</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ds_print_data_type</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr>?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>immbase</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"hex length=%"</literal> <name>PFMT64d</name> <literal type="string">" delta=%d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument> , <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>idx</name></expr></argument>, <argument><expr><name>hexlen</name><operator>-</operator><name>delta</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_PRINT_FLAGS_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_META_TYPE_FORMAT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"pf %s #size=%d\n"</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_before</name> <init>= <expr><call><name>r_cons_get_buffer_len</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_print_format</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>idx</name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>R_PRINT_MUSTSEE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_after</name> <init>= <expr><call><name>r_cons_get_buffer_len</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cons_buf</name> <init>= <expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len_after</name> <operator>&gt;</operator> <name>len_before</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>cons_buf</name><index>[<expr><name>len_after</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_drop</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>revert_cdiv_magic</name><parameter_list>(<parameter><decl><type><name>st64</name></type> <name>magic</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>amagic</name> <init>= <expr><call><name>llabs</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>st64</name></type> <name>N</name> <init>= <expr><name>ST64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>E</name></decl>, <decl><type ref="prev"/><name>candidate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>amagic</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0xFFFFFF</literal> <operator>||</operator> <name>amagic</name></expr></argument> &gt;</argument_list></name> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>magic</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>magic</name> <operator>+=</operator> <literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>E</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>candidate</name> <operator>=</operator> <operator>(</operator><name>E</name> <operator>+</operator> <name>magic</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>magic</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name>N</name> <operator>*</operator> <name>magic</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>N</name> <operator>/</operator> <name>candidate</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<return>return <expr><name>candidate</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_cdiv_optimization</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>esil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>comma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>divisor</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_hints</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_cdiv</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>:</case>
<expr_stmt><expr><name>esil</name> <operator>=</operator> <call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>esil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <name>comma</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>divisor</name> <operator>=</operator> <call><name>revert_cdiv_magic</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>divisor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; CDIV: %lld * 2^n"</literal></expr></argument>, <argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>esil</name> <operator>=</operator> <name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_show_bytes</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>pad</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flagstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldFlags</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>extra</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_bytes</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_color_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flag_in_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagstr</name> <operator>=</operator> <call><name>r_flag_get_liststr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>flagstr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_flag_in_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>k</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>k</name></expr></argument> &gt;</argument_list></name> <sizeof>sizeof <argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>nb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_ansi_chrn</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nstr</name> <operator>=</operator> <call><name>r_print_hexpair</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>bytespace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>+</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>nstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>nb</name></name> <operator>-</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>nstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pad</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lbytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>nstr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s %s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>oldFlags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_indent</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_indent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>indent</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>indent_level</name></name> <operator>*</operator> <name><name>ds</name><operator>-&gt;</operator><name>indent_space</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indent</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_optype</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_optype</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optype</name> <init>= <expr><call><name>r_anal_optype_to_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>optype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[%s]%s"</literal></expr></argument>, <argument><expr><name>optype</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_opstr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_indent</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_instr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_color_reset</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ds_print_middle</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>middle</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name><name>ds</name><operator>-&gt;</operator><name>middle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; *middle* %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_labels</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>r_anal_fcn_label_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>label</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_pre_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" .%s:\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" .%s:\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void ds_print_import_name(RDisasmState *ds) {
RListIter *iter = NULL;
RBinReloc *rel = NULL;
RCore * core = ds-&gt;core;

switch (ds-&gt;analop.type) {
case R_ANAL_OP_TYPE_JMP:
case R_ANAL_OP_TYPE_CJMP:
case R_ANAL_OP_TYPE_CALL:
if (core-&gt;bin-&gt;cur-&gt;o-&gt;imports &amp;&amp; core-&gt;bin-&gt;cur-&gt;o-&gt;relocs) {
r_list_foreach (core-&gt;bin-&gt;cur-&gt;o-&gt;relocs, iter, rel) {
if ((rel-&gt;vaddr == ds-&gt;analop.jump) &amp;&amp;
(rel-&gt;import != NULL)) {
if (ds-&gt;show_color) {
r_cons_strcat (ds-&gt;color_fname);
}

ds_align_comment (ds);
r_cons_printf (" ; (imp.%s)", rel-&gt;import-&gt;name);
ds_print_color_reset (ds);
}
}
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_sysregs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_IO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSyscall</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ioname</name> <init>= <expr><call><name>r_syscall_get_io</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ioname</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ioname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_ALIGN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; IO %s"</literal></expr></argument>, <argument><expr><name>ioname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><call><name>r_syscall_sysreg</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><literal type="string">"reg"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_ALIGN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; REG %s - %s"</literal></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_fcn_name</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_JMP</name>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_CJMP</name>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>jmpsub</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>filter</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>,
<argument><expr><name>R_FLAGS_FS_CLASSES</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sym."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"method."</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>arch</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"dalvik"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag_sym</name> <init>= <expr><name>flag</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sym."</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>flag_sym</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>,
<argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>flag_sym</name><operator>-&gt;</operator><name>demangled</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>delta</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>r_anal_fcn_label_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>label</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s.%s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>f2</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s+0x%x"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s-0x%x"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>jmpsub</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>filter</name></name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag_sym</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flag_sym</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>,
<argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>flag_sym</name><operator>-&gt;</operator><name>demangled</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ds_print_shortcut</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shortcut</name> <init>= <expr><call><name>r_core_add_asmqjmp</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><ternary><condition><expr><name>shortcut</name></expr>?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pos</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">";"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shortcut</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>is_asmqjmps_letter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s[o%s]"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s[%s]"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s[?]"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>resetbg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET_NOBG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slen</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>slen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_core_vmode_jump_hit</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>hint</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getPtr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n64</name> <init>= <expr><call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>n64</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>n32</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ds_print_core_vmode</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gotShortcut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_hints</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_emu</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hinted_line</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_lea</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>mi</name> <init>= <expr><call><name>r_meta_find</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_ANY</name></expr></argument>, <argument><expr><name>R_META_WHERE_HERE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mi</name> <operator>&amp;&amp;</operator> <name><name>mi</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>obits</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getPtr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>obits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_IND</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_IND</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_COND</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_IND</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_REG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_lea</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getPtr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_lea</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT32_MAX</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_REG</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_IND</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_IND</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (ds-&gt;analop.jump == 0 &amp;&amp; ds-&gt;analop.ptr) {
ut8 buf[sizeof(ut64)] = {0};
r_io_read_at (core-&gt;io, ds-&gt;analop.ptr, buf, sizeof (buf));
ut32 n32 = r_read_ble32 (buf, 0);


ds_print_shortcut (ds, n32, pos);
} else {

ds_print_shortcut (ds, ds-&gt;analop.ptr, pos);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_call</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_jmp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_COND</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_call</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ds_print_shortcut</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>ds_print_core_vmode_jump_hit</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gotShortcut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<label><name>beach</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>begin</name> <init>= <expr><ternary><condition><expr><name>gotShortcut</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>begin</name> <operator>-</operator> <name>slen</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>gotShortcut</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hinted_line</name></name> <operator>=</operator> <name>gotShortcut</name></expr>;</expr_stmt>
<return>return <expr><name>gotShortcut</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_begin_nl_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_cont</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_align_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right_default</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmtcol</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ll</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ll</name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>buf_line_begin</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><call><name>r_str_len_utf8_ansi</name> <argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>interactive</name></name></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>columns</name></name></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>&lt;</operator> <name>cmtcol</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>cmtcol</name> <operator>-</operator> <name>cells</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><name>cols</name> <operator>&amp;&amp;</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_memset</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_dwarf</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_dwarf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr>?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">30</literal> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dwarfFile</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>dwarfFile</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>dwarfAbspath</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name> <operator>=</operator> <call><name>r_bin_addr2text</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>dwarfFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name> <operator>||</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\x1b'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="char">'\x00'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s; %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>osl</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>sl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>sl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_asmop_payload</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_varaccess</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>stackop</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_STACK_GET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; local.get %d"</literal></expr></argument>, <argument><expr><operator>-</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; arg.get %d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_STACK_SET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; local.set %d"</literal></expr></argument>, <argument><expr><operator>-</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" ; arg.set %d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n; .. payload of %d byte(s)"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>showpayloads</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>%</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>dataalign</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n 0x%02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mod</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n 0x%02x ; alignment"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ds_esc_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix_out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_comment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>esc_bslash</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>esc_bslash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrEnc</name></type> <name>strenc</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strenc</name> <operator>==</operator> <name>R_STRING_ENC_GUESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strenc</name> <operator>=</operator> <call><name>r_utf_bom_encoding</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>strenc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_STRING_ENC_LATIN1</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_latin1</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>, <argument><expr><name>is_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_STRING_ENC_UTF8</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_STRING_ENC_UTF16LE</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf16le</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"u"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_STRING_ENC_UTF32LE</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf32le</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"U"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_STRING_ENC_UTF16BE</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf16be</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"ub"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_STRING_ENC_UTF32BE</name></expr>:</case>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf32be</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"Ub"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>str_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>str_len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\xff\xfe"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf16le</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"u"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RStrEnc</name></type> <name>enc</name> <init>= <expr><name>R_STRING_ENC_UTF32LE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRune</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>r_mem_mem_aligned</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_utf32le_decode</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">0x10ffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>R_STRING_ENC_LATIN1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <name>R_STRING_ENC_UTF32LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_utf32le</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"U"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <call><name>r_str_escape_latin1</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>, <argument><expr><name>is_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RStrEnc</name></type> <name>enc</name> <init>= <expr><name>R_STRING_ENC_LATIN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>str</name> <operator>+</operator> <name>str_len</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_utf8_decode</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>R_STRING_ENC_UTF8</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>escstr</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>enc</name> <operator>==</operator> <name>R_STRING_ENC_UTF8</name></expr> ?</condition><then>
<expr><call><name>r_str_escape_utf8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>r_str_escape_latin1</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_asciidot</name></name></expr></argument>, <argument><expr><name>esc_bslash</name></expr></argument>, <argument><expr><name>is_comment</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>prefix_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prefix_out</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>escstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_str</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>refaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name><operator>-&gt;</operator><name>realnames</name></name> <operator>||</operator> <operator>!</operator><call><name>r_bin_string_filter</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escstr</name> <init>= <expr><call><name>ds_esc_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>escstr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>inv</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strinv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s%s\"%s\"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>Color_INVERT</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>escstr</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>Color_INVERT_RESET</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>=</operator> <name>refaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_filtered_flag</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_noisy_comments</name></name> <operator>||</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"str."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>refaddr</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>anal_flag</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_STRING</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>anal_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anal_flag</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>anal_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>anal_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>anal_flag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>anal_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>anal_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>anal_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_ptr</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>p</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>refaddr</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>aligned</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refptr</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>refptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>f2_in_opstr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_slow</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>opType</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>canHaveChar</name> <init>= <expr><name>opType</name> <operator>==</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canHaveChar</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>canHaveChar</name> <operator>=</operator> <name>opType</name> <operator>==</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>chref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name><operator>)</operator><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>chref</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>immstr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_from_ut64</name> <argument_list>(<argument><expr><call><name>r_read_ble64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>printable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>printable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>canHaveChar</name> <operator>&amp;&amp;</operator> <name>printable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; '%s'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>canHaveChar</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>char</name><operator>)</operator><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aligned</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; '%c'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_anal_refs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_STRING</name> <operator>||</operator> <name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_DATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>refaddr</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <operator>(</operator><name>R_ANAL_OP_TYPE_MOV</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_REG</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>stackop</name></name> <operator>==</operator> <name>R_ANAL_STACK_SET</name>
<operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>refaddr</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>refptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag_printed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>refaddr_printed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>string_printed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>refaddr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><name>refaddr</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>relsub_addr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>relsub_addr</name> <operator>&amp;&amp;</operator> <name>relsub_addr</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>r_core_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>relsub_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_in_opstr</name> <operator>=</operator> <name>f2</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f2</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>refaddr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag_printed</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_filtered_flag</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>f2_in_opstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>refptr</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_refptr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>num</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>refptr</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><name>num</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>n32</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>UT32_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_slow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_printed</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>r_str_is_printable_incl_newlines</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>UT32_MAX</name> <operator>||</operator> <name>n</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; [0x%"</literal> <name>PFMT64x</name><literal type="string">":%d]=-1"</literal></expr></argument>,
<argument><expr><name>refaddr</name></expr></argument>, <argument><expr><name>refptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>n32</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n32</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">512</literal> <operator>&amp;&amp;</operator> <name>n32</name> <operator>&lt;</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; [0x%"</literal> <name>PFMT64x</name>
<literal type="string">":%d]=%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>, <argument><expr><name>refptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flag</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f2_</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f2_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name><name>f2_</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg2</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>msg2</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg2</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>r_anal_data_kind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>msg2</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_filter</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>msg2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lala</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>msg2</name> <operator>=</operator> <name>lala</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refptrstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_SECSUB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>bo</name></expr>?</condition><then> <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><name>bo</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>refptrstr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment_start</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"; ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>f2_in_opstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_comment_end</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">":%d]=%s%s0x%"</literal> <name>PFMT64x</name> <literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><name>refptr</name></expr></argument>, <argument><expr><name>refptrstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>refptrstr</name></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>flag</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>refaddr_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtoff</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; 0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refaddr_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>refaddr_printed</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtoff</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name>addrstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name>addrstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>print_refaddr</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>refaddr</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name>addrstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>print_refaddr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print_refaddr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; 0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refaddr_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>print_msg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>strenc</name></name> <operator>==</operator> <name>R_STRING_ENC_GUESS</name>
<operator>&amp;&amp;</operator> <call><name>r_utf_bom_encoding</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R_STRING_ENC_GUESS</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_WHITECHAR</name> <argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>print_msg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg2</name> <init>= <expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>msg2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_filter</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>, <argument><expr><literal type="string">"UH.."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>print_msg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print_msg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_printed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>flag_printed</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> 
<operator>(</operator><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name> <operator>=</operator> <name>refaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>refaddr</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name>refaddr</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator><name>refaddr</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>refaddr</name> <operator>&gt;=</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name>refaddr</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name>refaddr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>canHaveChar</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>chref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; '%c'"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>refaddr</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st64</name><operator>)</operator><name>refaddr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_anal_var_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>refaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; var %s"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_var_free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; var %d"</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_core_anal_address</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_ASCII</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_printed</name> <operator>&amp;&amp;</operator> <name>print_msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>r_anal_data_kind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_printed</name> <operator>&amp;&amp;</operator> <name>print_msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>refaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>refaddr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>p</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">0xfff</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_as_string</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEADCODE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>aligned</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_demangled</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optype</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>optype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>demangled</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>realname</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_nl_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_relocs</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>demname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>showrelocs</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_slow</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>demangle</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.demangle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_lib</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle.libs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>rel</name> <init>= <expr><call><name>r_core_getreloc</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cstrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><call><name>r_cons_lastline</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ll</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ansilen</name> <init>= <expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>utf8len</name> <init>= <expr><call><name>r_utf8_strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><name>utf8len</name> <operator>-</operator> <operator>(</operator><name>cstrlen</name> <operator>-</operator> <name>ansilen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcol</name></name> <operator>-</operator> <name>cells</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_memset</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>import</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>demangle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>demname</name> <operator>=</operator> <call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>import</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>keep_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; RELOC %d %s"</literal></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>demname</name></expr> ?</condition><then> <expr><name>demname</name></expr> </then><else>: <expr><name><name>rel</name><operator>-&gt;</operator><name>import</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>symbol</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>demangle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>demname</name> <operator>=</operator> <call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>keep_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; RELOC %d %s @ 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" + 0x%"</literal> <name>PFMT64x</name></expr></argument>,
<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>demname</name></expr> ?</condition><then> <expr><name>demname</name></expr> </then><else>: <expr><name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; RELOC %d "</literal></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>demname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mymemwrite0</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mymemwrite1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mymemwrite2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>addr</name> <operator>&gt;=</operator> <name>emustack_min</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>emustack_max</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ssa_get</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>ssa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ssa</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ssa</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s_%d"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssa_set</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdb_num_inc</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ssa</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DISASM_MAX_STR</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>myregread</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_emu_ssa</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>ssa_get</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"&lt;%s"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>myregwrite</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>n32</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strlea</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_likely</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_ssa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssa_set</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>ssa_get</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"&gt;%s"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_slow</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>emu_str_printed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name> <operator>=</operator> <operator>*</operator><name>val</name></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>cstr</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>cstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>addr</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x1000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>cstr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>addr</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(cstr 0x%08"</literal><name>PFMT64x</name><literal type="string">") "</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>=</operator> <name><name>cstr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>=</operator> <name><name>cstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(pstr 0x%08"</literal><name>PFMT64x</name><literal type="string">") "</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_bin_strpurge</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_str_is_printable_incl_newlines</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>*</operator><name>val</name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>jump_op</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignored</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_MJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCJMP</name></expr>:</case>
<expr_stmt><expr><name>jump_op</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<expr_stmt><expr><name>ignored</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ignored</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jump_op</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignored</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
RCore *core = ds-&gt;core;
ut32 len = core-&gt;blocksize + 256;
if (len &lt; core-&gt;blocksize || len &gt; R_DISASM_MAX_STR) {
len = R_DISASM_MAX_STR;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name> <operator>=</operator> <operator>*</operator><name>val</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escstr</name> <init>= <expr><call><name>ds_esc_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>escstr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>inv</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strinv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s\"%s\"%s"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><name>type</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>Color_INVERT</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>escstr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>Color_INVERT_RESET</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s\"%s\""</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name></expr>?</condition><then> <expr><name>type</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>escstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>r_str_append_owned</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>emu_str_printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>n32</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>n32</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"-&gt; 0x%x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>*</operator><name>val</name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu_strflag</name></name> <operator>||</operator> <operator>!</operator><name>emu_str_printed</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_str</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>emuptr</name></name> <operator>=</operator> <operator>*</operator><name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stroff</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"; 0x%"</literal><name>PFMT64x</name><literal type="string">" %s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"; %s=0x%"</literal><name>PFMT64x</name><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"; %s=0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_pre_emulation</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_esil</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>pre_emu</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxemu</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilHookRegWriteCB</name></type> <name>orig_cb</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>end</name></expr></argument> &gt;</argument_list></name> <name>maxemu</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>base</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><call><name>r_core_anal_op</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ESIL</name> <operator>|</operator> <name>R_ANAL_OP_MASK_HINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_esil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_esil_set_pc</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_parse</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_update_stackptr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <name>orig_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_esil_anal_init</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_old_pc</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iotrap</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"esil.iotrap"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esd</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"esil.stack.depth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>addrsize</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"esil.addr.size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name> <operator>=</operator> <call><name>r_anal_esil_new</name> <argument_list>(<argument><expr><name>esd</name></expr></argument>, <argument><expr><name>iotrap</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_esil_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>ds</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>last_disasm_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>gp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"gp"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>gp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name> <operator>=</operator> <call><name>r_reg_arena_peek</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name> <init>= <expr><call><name>r_reg_regset_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate</name></name> <operator>&amp;&amp;</operator> <name>regset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_regstate_size</name></name> <operator>=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ds_pre_emulation</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_bbline</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_bbline</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f_before</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>r_anal_fcn_bbget_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f_before</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <name>bb</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>&amp;&amp;</operator> <name>f_before</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cmtcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_functions</name></name> <operator>||</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_lines_fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_EMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_before</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f_before</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_before</name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pre</name></name> <operator>=</operator> <name>DS_PRE_FCN_MIDDLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>linesright</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_lines_bb</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refline</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reflinecol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_update_ref_lines</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refline</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reflinecol</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name>refline</name></expr></argument>, <argument><expr><name>reflinecol</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_fcn_arg</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>on_stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asm_types</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>on_stack</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>asm_types</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>UT32_MAX</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"pf%s %s%s %s @ 0x%08"</literal> <name>PFMT64x</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>asm_types</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">"q"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>on_stack</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_chop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_last_comment</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right_default</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ll</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ll</name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>buf_line_begin</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name>ll</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>begin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_cont</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>can_emulate_metadata</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>emuskipmeta</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.skip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_meta</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"meta.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infos</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>infos</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>infos</name></expr>;</condition> <incr><expr><name>infos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>infos</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>emuskipmeta</name></expr></argument>, <argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mipsTweak</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asm_arch</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>asm_arch</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>asm_arch</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>asm_arch</name></expr></argument>, <argument><expr><literal type="string">"mips"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.gpfixed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>gp</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.gp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"gp"</literal></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_esil_anal</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook_mem_write</name>)<parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><call><name>r_core_pava</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConfigHold</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><call><name>r_config_hold_new</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_esil_anal_init</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>esil</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_emulate_metadata</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>esil</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>ds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <name>myregwrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_read</name></name> <operator>=</operator> <name>myregread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hook_mem_write</name> <operator>=</operator> <name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <name>mymemwrite2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu_write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <name>mymemwrite0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <name>mymemwrite1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_likely</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esilstr</name> <init>= <expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>esilstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mipsTweak</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_set_pc</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_parse</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>esilstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_esil_stack_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_hold_i</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_SWI</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>cmd_syscall_dostr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>esil_likely</name></name></expr>?</condition><then> <expr><literal type="string">"; likely"</literal></expr> </then><else>: <expr><literal type="string">"; unlikely"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFuncArg</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>nextele</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcn_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pcv</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pcv</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pcv</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>pcv</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>!</operator><name>pcv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$jt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pcv</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>!</operator><name>pcv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pcv</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>pcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcn_name</name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>pcv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcn_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>resolve_fcn_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_types</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcn_type</name> <init>= <expr><call><name>r_type_func_ret</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nargs</name> <init>= <expr><call><name>r_type_func_args_count</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>delete_last_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"; %s%s%s("</literal></expr></argument>, <argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>fcn_type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>fcn_type</name> <operator>&amp;&amp;</operator> <name><name>fcn_type</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fcn_type</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nargs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_end</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"void)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>s_width</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">8</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_SP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>spv</name> <init>= <expr><call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>spv</name> <operator>+</operator> <name>s_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_core_get_func_args</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fcn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>warning</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>on_stack</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>arg</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>cc_source</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>cc_source</name></name></expr></argument>, <argument><expr><literal type="string">"stack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>on_stack</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>arg</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_types</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"%s: unk_size"</literal></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>c_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>warning</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nextele</name> <operator>=</operator> <call><name>r_list_iter_get_next</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>arg</name><operator>-&gt;</operator><name>fmt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_types</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>warning</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"%s : unk_format"</literal></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>c_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nextele</name></expr>?</condition><then><expr><literal type="string">", "</literal></expr></then><else>:<expr><literal type="string">")"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>print_fcn_arg</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>orig_c_type</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>on_stack</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nextele</name></expr>?</condition><then><expr><literal type="string">", "</literal></expr></then><else>:<expr><literal type="string">")"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ds_comment_end</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_warn_if_fail</name> <argument_list>(<argument><expr><operator>!</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nargs</name> <operator>=</operator> <name>DEFAULT_NARGS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nargs</name> <operator>=</operator> <call><name>r_anal_var_count</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>r_anal_var_count</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>r_anal_var_count</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_esil</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr> ?</condition><then> <expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"; %s("</literal></expr></argument>, <argument><expr><name>fcn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"; 0x%"</literal><name>PFMT64x</name><literal type="string">"("</literal></expr></argument>, <argument><expr><name>pcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name> <init>= <expr><call><name>r_debug_arg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>R_ANAL_CC_TYPE_FASTCALL</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_comment_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">"%s0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr>?</condition><then><expr><literal type="string">", "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ds_comment_end</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>spv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>beach</name>:</label>
<if_stmt><if>if <condition>(<expr><name>esil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <name>hook_mem_write</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_hold_restore</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_hold_free</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_calls_hints</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.emu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emuwrite</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.write"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>emu</name> <operator>&amp;&amp;</operator> <name>emuwrite</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>full_name</name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>space</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>R_FLAGS_FS_IMPORTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>full_name</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>full_name</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_type_func_exist</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>full_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcn_type</name> <init>= <expr><call><name>r_type_func_ret</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn_type</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>fcn_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmt</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"; %s%s%s("</literal></expr></argument>, <argument><expr><name>fcn_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fcn_type</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fcn_type</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>arg_max</name> <init>= <expr><call><name>r_type_func_args_count</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmt</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">"void)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>r_type_func_args_type</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name> <init>= <expr><call><name>r_type_func_args_name</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmt</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>type</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>tname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>arg_max</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr></then><else>: <expr><literal type="string">","</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tname</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tname</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmt</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>tname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>arg_max</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr></then><else>: <expr><literal type="string">","</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_comments_right</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_relocs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_code</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="char">'d'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>mi</name> <init>= <expr><call><name>r_meta_find</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_ANY</name></expr></argument>, <argument><expr><name>R_META_WHERE_HERE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_code</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_code</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>asm_describe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>locase</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locase</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_asm_describe</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>locase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>locase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_align_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>line_indexes</name> <init>= <expr><call><name>r_str_split_lines</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lines_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>line_indexes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>comment</name> <operator>+</operator> <name><name>line_indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_usrcmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"%s"</literal></expr> </then><else>: <expr><literal type="string">"; %s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>lines_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CALL</name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_UCALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_calls</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_calls_hints</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_print_as_string</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_num_as_string</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s; \"%s\"%s"</literal></expr></argument>, <argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>pal_comment</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_find_next_number</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SEPARATOR</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SEPARATOR</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_SEPARATOR</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_jump_realname</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>kw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_demangle</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>realnames</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag_sym</name> <init>= <expr><call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag_sym</name> <operator>||</operator> <operator>!</operator><name><name>flag_sym</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>flag_sym</name><operator>-&gt;</operator><name>demangled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>realnames</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name><name>flag_sym</name><operator>-&gt;</operator><name>realname</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag_mthd</name> <init>= <expr><call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_CLASSES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>realnames</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag_mthd</name> <operator>&amp;&amp;</operator> <name><name>flag_mthd</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>flag_mthd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"method."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>kw</name> <operator>=</operator> <literal type="string">"method "</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>kw</name> <operator>=</operator> <literal type="string">"sym "</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ds_sub_jumps</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kw</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>jmpsub</name></name> <operator>||</operator> <operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optype</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>optype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_jump_realname</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>rel</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>r_core_getreloc</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>r_core_getreloc</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>import</name></name> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>import</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>import</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rel</name> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>symbol</name></name> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_jump_realname</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_core_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>realnames</name></name> <operator>&amp;&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>realname</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>numval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>nptr</name> <operator>=</operator> <call><name>_find_next_number</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>numval</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>nptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SEPARATOR</name> <argument_list>(<argument><expr><operator>*</operator><name>nptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>!=</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kwname</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kwname</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>numstr</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nptr</name><operator>-</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>numstr</name></expr></argument>, <argument><expr><name>kwname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>numstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kwname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>line_highlighted</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>asm_highlight</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>vat</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>asm_highlight</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_start_line_highlight</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>&amp;&amp;</operator> <call><name>line_highlighted</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>color_linehl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ds_end_line_highlight</name><parameter_list>(<parameter><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name> <operator>&amp;&amp;</operator> <call><name>line_highlighted</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_core_print_disasm</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invbreak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbytes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>json</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>pdf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>continueoninvbreak</name> <init>= <expr><operator>(</operator><name>len</name> <operator>==</operator> <name>l</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>invbreak</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>calc_row_offsets</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>calc_row_offsets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_bytes_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_bytes_bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>addrbytes</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><call><name>ds_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>cbytes</name></name> <operator>=</operator> <name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>buf_line_begin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pdf</name></name> <operator>=</operator> <name>pdf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name> <operator>=</operator> <ternary><condition><expr><name>pj</name></expr> ?</condition><then> <expr><name>pj</name></expr> </then><else>: <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_push</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>calc_row_offsets</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>







<block>{<block_content> 
<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ds_reflines_init</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>keep_asmqjmps</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr></argument>, <argument><expr><name>R_CORE_ASMQJMPS_NUM</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>=</operator> <name>R_CORE_ASMQJMPS_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_CORE_ASMQJMPS_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>toro</name>:</label>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><call><name>r_core_pava</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name></name> <operator>=</operator> <ternary><condition><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8.curvy"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>r_vline_uc</name></expr> </then><else>: <expr><name>r_vline_u</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>r_vline_a</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_PC</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ds_print_esil_anal_init</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>addrbytes</name> <operator>*</operator> <name>idx</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>lines</name></name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <name>inc</name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ds</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>inc</name></expr><operator>,</operator> <expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name> <operator>=</operator> <call><name>r_core_pava</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_UNALLOC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>is_valid_offset</name></name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_labels</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_setup_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>resetbg</name></name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_highlight</name></name> <operator>==</operator> <name>UT64_MAX</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_start_line_highlight</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" unmapped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtesil</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ds_pre_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_setup_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s%s%s"</literal></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>, <argument><expr><name>esil</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_seek_arch_bits</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <call><name>r_core_hint_begin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_str_addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>printed_flag_addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_update_ref_lines</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name><operator>)</operator></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ds_must_strip</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>fcn</name></name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>folded</name></name> <operator>&amp;&amp;</operator> <call><name>r_anal_function_contains</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <call><name>r_anal_function_max_addr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>of</name> <operator>!=</operator> <name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmt</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_bits_comment</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_pre_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; %s\n"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s (fcn) %s%s%s\n"</literal></expr></argument>,
<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>vline</name><index>[<expr><name>CORNER_TL</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>COLOR</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>color_fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>, <argument><expr><call><name>COLOR_RESET</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_setup_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d byte folded function)\n"</literal></expr></argument>, <argument><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <name>delta</name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_show_comments_right</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>link_key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"link.%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link_type</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>link_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>link_type</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>r_type_format</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>link_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%s)\n"</literal></expr></argument>, <argument><expr><name>link_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"pf %s @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>type_bitsize</name> <init>= <expr><call><name>r_type_get_bitsize</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>link_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>inc</name> <operator>=</operator> <operator>(</operator><name>type_bitsize</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>type_bitsize</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ds_disassemble</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">31337</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>retry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_atabs_option</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (ds-&gt;analop.mnemonic || !ds-&gt;lastfail) {
r_anal_op_fini (&amp;ds-&gt;analop);
}
if (!ds-&gt;lastfail) {
r_anal_op (core-&gt;anal, &amp;ds-&gt;analop, ds-&gt;at, buf + addrbytes * idx, (int)(len - addrbytes * idx));
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>addr</name></name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name><operator>)</operator></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_bbline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>&gt;=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_print_set_rowoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><name>calc_row_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_flag</name> <operator>=</operator> <call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_flag</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>==</operator> <name>R_MIDFLAGS_SHOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_show_xrefs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_show_flags</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_flag</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>==</operator> <name>R_MIDFLAGS_SHOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midbb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_bb</name> <operator>=</operator> <call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pdf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>sparse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><call><name>r_anal_fcn_bbget_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pdf</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>inc</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr>;</condition> <incr><expr><name>inc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><call><name>r_anal_fcn_bbget_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pdf</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name>inc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bb</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sparse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"..\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sparse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sparse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_control_flow_comments</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_adistrick_comments</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ds_show_functions</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_show_refs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_build_op_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_ptr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_sysregs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_fcn_name</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_demangled</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_emu</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_esil_anal</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CALL</name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_UCALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_calls</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_calls_hints</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_show_comments_describe</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_labels</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_setup_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_left</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>resetbg</name></name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>asm_highlight</name></name> <operator>==</operator> <name>UT64_MAX</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_start_line_highlight</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_offset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><call><name>r_anal_fcn_bbget_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>r_anal_fcn_bbget_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bb</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>folded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[+] Folded BB [..0x%08"</literal><name>PFMT64x</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mi_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mi_found</name> <init>= <expr><call><name>ds_print_meta_infos</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mi_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_core_vmode</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_op_size</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_trace</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_cycles</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_family</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_stackptr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mi_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_dwarf</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ds_print_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ds_print_asmop_payload</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syntax</name></name> <operator>!=</operator> <name>R_ASM_SYNTAX_INTEL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>ao</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>os</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syntax</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_asm_set_syntax</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>R_ASM_SYNTAX_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ao</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_set_syntax</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mi_type</name> <operator>==</operator> <name>R_META_TYPE_FORMAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mi_type</name> <operator>!=</operator> <name>R_META_TYPE_FORMAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_core_vmode</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>ds_end_line_highlight</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_comments_right</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ds_print_show_cursor</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_show_bytes</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_lines_right</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_optype</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_build_op_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_opstr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_end_line_highlight</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_dwarf</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ds_print_middle</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ds_print_asmop_payload</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syntax</name></name> <operator>!=</operator> <name>R_ASM_SYNTAX_INTEL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>ao</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>os</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syntax</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_asm_set_syntax</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>R_ASM_SYNTAX_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ao</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_set_syntax</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_print_core_vmode</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>asm_hint_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ds_cdiv_optimization</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>show_comments</name></name> <operator>||</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_usercomments</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>show_comment_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_cmtesil</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s%s%s"</literal></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pal_comment</name></name></expr></argument>, <argument><expr><name>esil</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ds_comment</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"; %s"</literal></expr></argument>, <argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_print_ptr</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_sysregs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_fcn_name</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_demangled</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_color_reset</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_comments_right</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_esil_anal</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_show_refs</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>resetbg</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_lines_ret</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_begin_line</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_pre</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_print_ref_lines</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"; --------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_newline</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>refline2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>prev_line_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>==</operator> <name>R_MIDFLAGS_REALIGN</name> <operator>&amp;&amp;</operator> <name>skip_bytes_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_bb</name> <operator>&amp;&amp;</operator> <name>skip_bytes_bb</name> <operator>&lt;</operator> <name>inc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name>skip_bytes_bb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inc</name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>+</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>%</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>dataalign</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HASRETRY</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>cbytes</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>lines</name></name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>+</operator> <name>inc</name></expr>;</expr_stmt>
<label><name>retry</name>:</label>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>nbuf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>tries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<goto>goto <name>toro</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<goto>goto <name>toro</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>continueoninvbreak</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<goto>goto <name>toro</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_print_set_rowoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><name>calc_row_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_print_set_rowoff</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>lines</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>UT32_MAX</name></expr></argument>, <argument><expr><name>calc_row_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ds_print_esil_anal_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_reflines_fini</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>calc_row_offsets</name></name> <operator>=</operator> <name>calc_row_offsets</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>addrbytes</name> <operator>*</operator> <name>idx</name></expr>;</return> 
</block_content>}</block></function>




<function><type><name>R_API</name> <name>int</name></type> <name>r_core_print_disasm_instructions</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_opcodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpopstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>old_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasanal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>addrbytes</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_bytes_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_bytes_bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>nb_opcodes</name> <operator>=</operator> <operator>-</operator><name>nb_opcodes</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>r_core_prevop_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <name>old_offset</name> <operator>-</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>old_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_asm_bwdis_len</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <operator>-</operator><name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>nb_bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>obsz</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>==</operator> <name>nb_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read that much!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err_offset</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>ds_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name>nb_opcodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nb_opcodes</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isNotTheEnd</name></cpp:macro> <cpp:value>(nb_opcodes ? j &lt; nb_opcodes: addrbytes * i &lt; nb_bytes)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>isNotTheEnd</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>ret</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name> <operator>=</operator> <call><name>r_core_pava</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasanal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_seek_arch_bits</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <call><name>r_core_hint_begin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_flag</name> <operator>=</operator> <call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midbb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_bb</name> <operator>=</operator> <call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_flag</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>&gt;</operator> <name>R_MIDFLAGS_SHOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_bb</name> <operator>&amp;&amp;</operator> <name>skip_bytes_bb</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>skip_bytes_bb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasanal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasanal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ds_must_strip</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>decode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>immtrim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasanal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasanal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmpopstr</name> <operator>=</operator> <call><name>r_anal_op_to_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tmpopstr</name><operator>)</operator></expr>?</condition><then> <expr><name>tmpopstr</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>immtrim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_immtrim</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>use_esil</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasanal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ESIL</name> <operator>|</operator> <name>R_ANAL_OP_MASK_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasanal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>ofs</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>flagspace_ports</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ds_build_op_str</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asm_str</name> <operator>=</operator> <call><name>colorize_asm_string</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <name>asm_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>immtrim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_immtrim</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>asm_instr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opcolor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>show_color</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcolor</name> <operator>=</operator> <call><name>r_print_color_op_type</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal> <name>Color_RESET</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>opcolor</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_offset</name>:</label>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>old_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_print_disasm_json</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_opcodes</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>asmop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>old_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dis_opcodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_by</name> <init>= <expr><literal type="char">'b'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>limit_by</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>nb_opcodes</name> <operator>=</operator> <operator>-</operator><name>nb_opcodes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too many backward instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_prevop_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <name>old_offset</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_core_asm_bwdis_len</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BWRETRY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BWRETRY</name></expr></cpp:if>
<expr_stmt><expr><name>nb_opcodes</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_core_asm_bwdis_len</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BWRETRY</name></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nb_opcodes</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>nb_bytes</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name><operator>+</operator><name>count</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>count</name></expr></argument>, <argument><expr><name>nb_bytes</name><operator>-</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>dis_opcodes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <operator>-</operator><name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>-=</operator> <name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>ds_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>end_nbopcodes</name></decl>, <decl><type ref="prev"/><name>end_nbbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_bytes_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_bytes_bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <call><name>r_core_hint_begin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>dis_opcodes</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name>nb_bytes</name> <operator>-</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>limit_by</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>nb_opcodes</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>nb_bytes</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAsmOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>nb_bytes</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>opstr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>has_description</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>nb_bytes</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_parse_parse</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>opstr</name></expr></argument>, <argument><expr><name>opstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_FCN</name> <operator>|</operator> <name>R_ANAL_FCN_TYPE_SYM</name> <operator>|</operator> <name>R_ANAL_FCN_TYPE_LOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>varsub</name></name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>varlist</name></name> <operator>=</operator> <name>r_anal_var_list_dynamic</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ba_len</name> <init>= <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>asmop</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>ba_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ba</name></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_varsub</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><name>ba</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>, <argument><expr><name>ba_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <call><name>r_asm_op_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_flag</name> <operator>=</operator> <call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>midbb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_bb</name> <operator>=</operator> <call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_flag</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>midflags</name></name> <operator>&gt;</operator> <name>R_MIDFLAGS_SHOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_bb</name> <operator>&amp;&amp;</operator> <name>skip_bytes_bb</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>skip_bytes_bb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>killme</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>be</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_io_read_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killme</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>refptr</name></name></expr></argument>, <argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>relsub_addr</name></name> <operator>=</operator> <name>killme</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aop</name> <init>= <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>aop</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>aop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ds_sub_jumps</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_filter</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"val"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"esil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kb</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"refptr"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>refptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"fcn_addr"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"fcn_last"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><call><name>r_anal_function_max_addr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"opcode"</literal></expr></argument>, <argument><expr><name>opstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"disasm"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><call><name>r_anal_op_family_to_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>family</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>r_anal_optype_to_string</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>rel</name> <init>= <expr><call><name>r_core_getreloc</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_kb</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"reloc"</literal></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type_num"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>UT64_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type2_num"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>type2</name></name> <operator>&amp;</operator> <name>UT64_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>switch_op</name></name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>switch_op</name><operator>-&gt;</operator><name>cases</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalCaseOp</name> <modifier>*</modifier></type><name>caseop</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ds-&gt;analop.switch_op-&gt;cases</argument>, <argument>iter</argument>, <argument>caseop</argument> )</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>caseop</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator> <name><name>caseop</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><name><name>caseop</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>fail</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>analop</name><operator>.</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>r_flag_get_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>flags</argument>, <argument>iter</argument>, <argument>flag</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64comment</name> <init>= <expr><call><name>sdb_encode</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>comment</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name>b64comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b64comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>r_anal_refs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>r_anal_xrefs_type_tostring</name> <argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>xrefs</name> <init>= <expr><call><name>r_anal_xrefs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xrefs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"xrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>r_anal_xrefs_type_tostring</name> <argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>+</operator> <name><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>+</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>%</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>dataalign</name></name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>oplen</name></name> <operator>+</operator> <name><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>+</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>asmop</name><operator>.</operator><name>payload</name></name> <operator>%</operator> <name><name>ds</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>dataalign</name></name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end_nbopcodes</name> <operator>=</operator> <name>dis_opcodes</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nb_opcodes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name><operator>&gt;=</operator><name>nb_opcodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_nbbytes</name> <operator>=</operator> <name>dis_opcodes</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;=</operator><name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_nbopcodes</name> <operator>||</operator> <name>end_nbbytes</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>old_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>analop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_print_disasm_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>scr_color</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>asmop</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RDisasmState</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><call><name>ds_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>||</operator> <name>addr</name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name> <operator>=</operator> <call><name>r_core_pava</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"???\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" ???\n"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_parse_filter</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scr_color</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>aop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fcnIn</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aop</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>l</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><call><name>r_print_colorize_opcode</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_asm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><call><name>r_print_color_op_type</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>aop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %60s %s\n"</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>vat</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>sp</name> <operator>+</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>sp</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_hex</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"addr\":%08"</literal><name>PFMT64d</name><literal type="string">",\"bytes\":\"%s\",\"inst\":\"%s\"}%s"</literal></expr></argument>,
<argument><expr><name>addr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>op_hex</name></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_hex</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %20s %s\n"</literal></expr></argument>,
<argument><expr><name>addr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>op_hex</name></expr></argument>,
<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{}]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ds_free</name> <argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pdi_check_end</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nb_opcodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>j</name> <operator>&lt;</operator> <name>nb_opcodes</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nb_bytes</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>j</name> <operator>&lt;</operator> <name>nb_opcodes</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name> <operator>&lt;</operator> <name>nb_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_disasm_pdi</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_opcodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>show_offset</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_bytes</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bytes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.decode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_color</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_ucase</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.ucase"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_instr</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.instr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esil</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.esil"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asm_immtrim</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.imm.trim"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>old_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAsmOp</name></type> <name>asmop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_reg</name> <init>= <expr><call><name>R_CONS_COLOR_DEF</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>Color_YELLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_num</name> <init>= <expr><call><name>R_CONS_COLOR_DEF</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>Color_CYAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>addrbytes</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>show_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_opcodes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nb_bytes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_opcodes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_opcodes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <operator>-</operator><name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>nb_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nb_bytes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt>



<expr_stmt><expr><name>nb_opcodes</name> <operator>=</operator> <operator>-</operator><name>nb_opcodes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_core_prevop_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>nb_opcodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_asm_bwdis_len</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
<argument><expr><name>nb_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_bytes</name> <operator>*=</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>nb_opcodes</name> <operator>+</operator> <name>nb_bytes</name><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midflags</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.flags.middle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>midbb</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bb.middle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asmmarks</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.marks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.marks"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<label><name>toro</name>:</label>
<for>for <control>(<init>;</init> <condition><expr><call><name>pdi_check_end</name> <argument_list>(<argument><expr><name>nb_opcodes</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>, <argument><expr><name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>show_offseg</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_SEGOFF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>show_offdec</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_ADDRDEC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seggrn</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.seggrn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_print_offset_sg</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>show_offseg</name></expr></argument>, <argument><expr><name>seggrn</name></expr></argument>, <argument><expr><name>show_offdec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s:\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>show_offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>show_offseg</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_SEGOFF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>show_offdec</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_ADDRDEC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seggrn</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.seggrn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_print_offset_sg</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>show_offseg</name></expr></argument>, <argument><expr><name>seggrn</name></expr></argument>, <argument><expr><name>show_offdec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>r_meta_find</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name>R_META_TYPE_ANY</name></expr></argument>, <argument><expr><name>R_META_WHERE_HERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>&amp;&amp;</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_META_TYPE_DATA</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hexlen</name> <init>= <expr><name>len</name> <operator>-</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>at</name> <operator>-</operator> <name><name>meta</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>hexlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hexlen</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>R_PRINT_FLAGS_HEADER</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RDisasmState</name></type> <name>ds</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ds_print_data_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"hex length=%"</literal> <name>PFMT64d</name> <literal type="string">" delta=%d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument> , <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>idx</name></expr></argument>, <argument><expr><name>hexlen</name><operator>-</operator><name>delta</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<continue>continue;</continue>
<case>case <expr><name>R_META_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>R_META_TYPE_FORMAT</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>R_META_TYPE_MAGIC</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>R_META_TYPE_RUN</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>midflags</name> <operator>||</operator> <name>midbb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDisasmState</name></type> <name>ds</name> <init>= <expr><block>{
<expr><operator>.</operator><name>oplen</name> <operator>=</operator> <name>ret</name></expr>,
<expr><operator>.</operator><name>at</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr>,
<expr><operator>.</operator><name>midflags</name> <operator>=</operator> <name>midflags</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_bytes_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_bytes_bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>midflags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_flag</name> <operator>=</operator> <call><name>handleMidFlags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>midbb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_bytes_bb</name> <operator>=</operator> <call><name>handleMidBB</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_flag</name> <operator>&amp;&amp;</operator> <name>midflags</name> <operator>&gt;</operator> <name>R_MIDFLAGS_SHOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>skip_bytes_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_bytes_bb</name> <operator>&amp;&amp;</operator> <name>skip_bytes_bb</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asmop</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>skip_bytes_bb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>asmop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>show_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%18s%02x "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_hex</name> <init>= <expr><call><name>r_asm_op_get_hex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%20s "</literal></expr></argument>, <argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>asmop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asm_instr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>asm_immtrim</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>decode</name> <operator>||</operator> <name>esil</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>analop</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpopstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpopstr</name> <operator>=</operator> <call><name>r_anal_op_to_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><operator>(</operator><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opstr</name> <operator>=</operator> <ternary><condition><expr><name>tmpopstr</name></expr>?</condition><then> <expr><name>tmpopstr</name></expr></then><else>: <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>asmop</name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opstr</name> <operator>=</operator> <operator>(</operator><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asm_immtrim</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_parse_immtrim</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>opstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_str</name> <init>= <expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asmop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>asm_ucase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>asm_str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asm_immtrim</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_parse_immtrim</name> <argument_list>(<argument><expr><name>asm_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_parse_filter</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>hint</name></expr></argument>,
<argument><expr><name>asm_str</name></expr></argument>, <argument><expr><name>opstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asm_str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opstr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>show_color</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>aop</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aop</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asm_str</name> <operator>=</operator> <call><name>r_print_colorize_opcode</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>asm_str</name></expr></argument>, <argument><expr><name>color_reg</name></expr></argument>, <argument><expr><name>color_num</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal><name>Color_RESET</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>r_print_color_op_type</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name><name>aop</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>asm_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>asm_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>aop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>asm_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>nb_opcodes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb_opcodes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>toro</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.marks"</literal></expr></argument>, <argument><expr><name>asmmarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>old_offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
