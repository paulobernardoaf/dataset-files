<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\core\libs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static int __lib_ ##x ##_cb (RLibPlugin * pl, void *user, void *data) {struct r_ ##x ##_plugin_t *hand = (struct r_ ##x ##_plugin_t *)data;RCore *core = (RCore *) user;pl-&gt;free = NULL; r_ ##x ##_add (core-&gt;y, hand);return true;}static int __lib_ ##x ##_dt (RLibPlugin * pl, void *p, void *u) { return true; }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_COPY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static int __lib_ ##x ##_cb (RLibPlugin * pl, void *user, void *data) {struct r_ ##x ##_plugin_t *hand = (struct r_ ##x ##_plugin_t *)data;struct r_ ##x ##_plugin_t *instance;RCore *core = (RCore *) user;instance = R_NEW (struct r_ ##x ##_plugin_t);memcpy (instance, hand, sizeof (struct r_ ##x ##_plugin_t));r_ ##x ##_add (core-&gt;y, instance);return true;}static int __lib_ ##x ##_dt (RLibPlugin * pl, void *p, void *u) { return true; }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_io_add</name></cpp:macro> <cpp:value>r_io_plugin_add</cpp:value></cpp:define>
<macro><name>CB_COPY</name> <argument_list>(<argument>io</argument>, <argument>io</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_core_add</name></cpp:macro> <cpp:value>r_core_plugin_add</cpp:value></cpp:define>
<macro><name>CB</name> <argument_list>(<argument>core</argument>, <argument>rcmd</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_debug_add</name></cpp:macro> <cpp:value>r_debug_plugin_add</cpp:value></cpp:define>
<macro><name>CB</name> <argument_list>(<argument>debug</argument>, <argument>dbg</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_bp_add</name></cpp:macro> <cpp:value>r_bp_plugin_add</cpp:value></cpp:define>
<macro><name>CB</name> <argument_list>(<argument>bp</argument>, <argument>dbg-&gt;bp</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>lang</argument>, <argument>lang</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>anal</argument>, <argument>anal</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>asm</argument>, <argument>assembler</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>parse</argument>, <argument>parser</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>bin</argument>, <argument>bin</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>egg</argument>, <argument>egg</argument>)</argument_list></macro>
<macro><name>CB</name> <argument_list>(<argument>fs</argument>, <argument>fs</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__openPluginsAt</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pdir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pdir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>pdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__loadSystemPlugins</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R2_LOADLIBS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>where</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>where</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>R_CORE_LOADLIBS_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dir.plugins"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>R_CORE_LOADLIBS_ENV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_LIB_ENV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>R_CORE_LOADLIBS_HOME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hpd</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hpd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>hpd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hpd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>R_CORE_LOADLIBS_SYSTEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__openPluginsAt</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R2_PLUGINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__openPluginsAt</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R2_EXTRAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__openPluginsAt</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R2_BINDINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_loadlibs_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>prev</name> <init>= <expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_lib_add_handler (core-&gt;lib, R_LIB_TYPE_ ##x, y, &amp;__lib_ ##z ##_cb, &amp;__lib_ ##z ##_dt, core);</cpp:value></cpp:define>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lib</name></name> <operator>=</operator> <call><name>r_lib_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>, <argument><expr><literal type="string">"io plugins"</literal></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>CORE</name></expr></argument>, <argument><expr><literal type="string">"core plugins"</literal></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>DBG</name></expr></argument>, <argument><expr><literal type="string">"debugger plugins"</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>BP</name></expr></argument>, <argument><expr><literal type="string">"debugger breakpoint plugins"</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>LANG</name></expr></argument>, <argument><expr><literal type="string">"language plugins"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>ANAL</name></expr></argument>, <argument><expr><literal type="string">"analysis plugins"</literal></expr></argument>, <argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>ASM</name></expr></argument>, <argument><expr><literal type="string">"(dis)assembler plugins"</literal></expr></argument>, <argument><expr><name>asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>PARSE</name></expr></argument>, <argument><expr><literal type="string">"parsing plugins"</literal></expr></argument>, <argument><expr><name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>BIN</name></expr></argument>, <argument><expr><literal type="string">"bin plugins"</literal></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>EGG</name></expr></argument>, <argument><expr><literal type="string">"egg plugins"</literal></expr></argument>, <argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DF</name> <argument_list>(<argument><expr><name>FS</name></expr></argument>, <argument><expr><literal type="string">"fs plugins"</literal></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>loadlibs_init_time</name></name> <operator>=</operator> <call><name>r_sys_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__isScriptFilename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"py"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"js"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"lua"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_loadlibs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>prev</name> <init>= <expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__loadSystemPlugins</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.plugins"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>loadlibs_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homeplugindir</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>homeplugindir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isScript</name> <init>= <expr><call><name>__isScriptFilename</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isScript</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">". %s/%s"</literal></expr></argument>, <argument><expr><name>homeplugindir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homeplugindir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>times</name><operator>-&gt;</operator><name>loadlibs_time</name></name> <operator>=</operator> <call><name>r_sys_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
