<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\main\main.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name><argument_list>(<argument><expr><name>r_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RMain</name></type> <name><name>foo</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"r2"</literal></expr>, <expr><name>r_main_radare2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rax2"</literal></expr>, <expr><name>r_main_rax2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"radiff2"</literal></expr>, <expr><name>r_main_radiff2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rafind2"</literal></expr>, <expr><name>r_main_rafind2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rarun2"</literal></expr>, <expr><name>r_main_rarun2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rasm2"</literal></expr>, <expr><name>r_main_rasm2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ragg2"</literal></expr>, <expr><name>r_main_ragg2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rabin2"</literal></expr>, <expr><name>r_main_rabin2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"radare2"</literal></expr>, <expr><name>r_main_radare2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RMain</name> <modifier>*</modifier></type><name>r_main_new</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>foo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>foo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RMain</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RMain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>foo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name/></name>main <operator>=</operator> <name><name>foo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator>main</expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_main_free</name><parameter_list>(<parameter><decl><type><name>RMain</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_run</name><parameter_list>(<parameter><decl><type><name>RMain</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>m</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name/></name>main</expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name/></name>main <operator>(</operator><name>argc</name><operator>,</operator> <name>argv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
