<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\main\rahash2.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_crypto.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>from</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>to</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>incremental</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>quiet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RHashSeed</name></type> <name>s</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compare_hashes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compare</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>compare</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Computed hash matches the expected one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Computed hash doesn't match the expected one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_hash_seed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sptr</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>_s</name> <operator>=</operator> <operator>&amp;</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_stdin_slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>seed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>seed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>seed</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>sptr</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>sptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>sptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>sptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: This is not an hexpair, assuming a string, prefix it with 's:' to skip this message."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_hash_hexprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ule</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ule</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_hash_print</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ule</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hname</name> <init>= <expr><call><name>r_hash_name</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name> <literal type="string">"-0x%08"</literal><name>PFMT64x</name> <literal type="string">" %s: "</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><ternary><condition><expr><name>to</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>to</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>hname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <name>R_HASH_SIZE_ENTROPY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.8f\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>do_hash_hexprint</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>ule</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"e file.%s="</literal></expr></argument>, <argument><expr><name>hname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_hash_hexprint</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>ule</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>do_hash_hexprint</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>ule</name></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"{\"name\":\"%s\",\"hash\":\""</literal></expr></argument>, <argument><expr><name>hname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_hash_hexprint</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>ule</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>r_print_randomart</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>, <argument><expr><name>hname</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_hash_internal</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr><call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>print</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_hash_do_spice</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_hash_print</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ule</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>fsize</name></decl>, <decl><type ref="prev"/><name>algobit</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>==</operator> <name>R_HASH_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Invalid hashing algorithm specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Invalid file size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>fsize</name> <operator>/</operator> <operator>-</operator><name>bsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bsize</name> <operator>&gt;</operator> <name>fsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <literal type="number">0LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Invalid -f -t range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>==</operator> <operator>-</operator><literal type="number">1LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Unknown file size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>incremental</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_ALL</name></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>hashbit</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <name>algobit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>hashbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_hash_do_begin</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>bsize</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>bsize</name><operator>)</operator> <operator>&gt;</operator> <name>to</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name>to</name> <operator>-</operator> <name>j</name><operator>)</operator></expr></then><else>: <expr><name>bsize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_hash_do_spice</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><call><name>r_hash_name</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <name>rad</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_hash_print</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><ternary><condition><expr><name>quiet</name></expr>?</condition><then> <expr><literal type="char">'n'</literal></expr></then><else>: <expr><name>rad</name></expr></else></ternary></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quiet</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>_s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>_s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Seed ignored on per-block hashing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_ALL</name></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>ofrom</name></decl>, <decl><type ref="prev"/><name>oto</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>hashbit</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <name>algobit</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ofrom</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oto</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>f</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>bsize</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>+</operator> <name>bsize</name> <operator>&lt;</operator> <name>fsize</name><operator>)</operator></expr>?</condition><then> <expr><name>bsize</name></expr></then><else>: <expr><operator>(</operator><name>fsize</name> <operator>-</operator> <name>j</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>bsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>fsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name>ofrom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>oto</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compare_hashes</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>, <argument><expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: rahash2 [-rBhLkv] [-b S] [-a A] [-c H] [-E A] [-s S] [-f O] [-t O] [file] ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(
<argument><expr><literal type="string">" -a algo comma separated list of algorithms (default is 'sha256')\n"</literal>
<literal type="string">" -b bsize specify the size of the block (instead of full file)\n"</literal>
<literal type="string">" -B show per-block hash\n"</literal>
<literal type="string">" -c hash compare with this hash\n"</literal>
<literal type="string">" -e swap endian (use little endian)\n"</literal>
<literal type="string">" -E algo encrypt. Use -S to set key and -I to set IV\n"</literal>
<literal type="string">" -D algo decrypt. Use -S to set key and -I to set IV\n"</literal>
<literal type="string">" -f from start hashing at given address\n"</literal>
<literal type="string">" -i num repeat hash N iterations\n"</literal>
<literal type="string">" -I iv use give initialization vector (IV) (hexa or s:string)\n"</literal>
<literal type="string">" -S seed use given seed (hexa or s:string) use ^ to prefix (key for -E)\n"</literal>
<literal type="string">" (- will slurp the key from stdin, the @ prefix points to a file\n"</literal>
<literal type="string">" -k show hash using the openssh's randomkey algorithm\n"</literal>
<literal type="string">" -q run in quiet mode (-qq to show only the hash)\n"</literal>
<literal type="string">" -L list all available algorithms (see -a)\n"</literal>
<literal type="string">" -r output radare commands\n"</literal>
<literal type="string">" -s string hash this string instead of files\n"</literal>
<literal type="string">" -t to stop hashing at given address\n"</literal>
<literal type="string">" -x hexstr hash this hexpair string instead of files\n"</literal>
<literal type="string">" -v show version information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>algolist</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_NBITS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_hash_name</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"h %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"e base64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"e base91\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"e punycode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_crypto_name</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"c %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setHashString</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (hashstr) {eprintf ("Hashstring already defined\n");return 1;}hashstr_hex = y;hashstr = (char*)x;}</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_power_of_two</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>encrypt_or_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hashstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashstr_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>no_key_mode</name> <init>= <expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"base64"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"base91"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"punycode"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>no_key_mode</name> <operator>||</operator> <name><name>s</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name> <init>= <expr><call><name>r_crypto_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_crypto_use</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_crypto_set_key</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>hashstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><name>hashstr_len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_crypto_set_iv</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid IV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_crypto_update</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_crypto_final</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_crypto_get_output</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown %s algorithm '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>direction</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"encryption"</literal></expr></then><else>: <expr><literal type="string">"decryption"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_crypto_free</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s key not defined. Use -S [key]\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>direction</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Encryption"</literal></expr></then><else>: <expr><literal type="string">"Decryption"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encrypt_or_decrypt_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>no_key_mode</name> <init>= <expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"base64"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"base91"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"punycode"</literal></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>no_key_mode</name> <operator>||</operator> <name><name>s</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name> <init>= <expr><call><name>r_crypto_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_crypto_use</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_crypto_set_key</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_stdin_slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_crypto_set_iv</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid IV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_crypto_update</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_crypto_final</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_crypto_get_output</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown %s algorithm '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>direction</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"encryption"</literal></expr></then><else>: <expr><literal type="string">"decryption"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_crypto_free</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s key not defined. Use -S [key]\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>direction</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Encryption"</literal></expr></then><else>: <expr><literal type="string">"Decryption"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_rahash2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>rad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>numblocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name> <init>= <expr><literal type="string">"sha256"</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>seed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ivlen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ivseed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compareStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>compareBin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hashstr_len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hashstr_hex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>algobit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"p:jD:rveE:a:i:I:S:s:x:b:nBhf:t:kLqc:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><name>quiet</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: -i argument must be positive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><name>rad</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><name>seed</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case> <expr_stmt><expr><name>ivseed</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>numblocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>decrypt</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>encrypt</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><call><name>algolist</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>ule</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>rad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><name>rad</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>ptype</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>incremental</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>bsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>to</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <return>return <expr><call><name>r_main_version_print</name> <argument_list>(<argument><expr><literal type="string">"rahash2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <return>return <expr><call><name>do_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><call><name>setHashString</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><call><name>setHashString</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>compareStr</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><call><name>do_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>encrypt</name> <operator>&amp;&amp;</operator> <name>decrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Option -E and -D are incompatible with each other.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>compareStr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compareBin_len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>incremental</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Option -c incompatible with -b and -B options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>encrypt</name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>encrypt</name></expr></argument>, <argument><expr><literal type="string">"base91"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>decrypt</name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>decrypt</name></expr></argument>, <argument><expr><literal type="string">"base91"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Option -c incompatible with -E base64, -E base91, -D base64 or -D base91 options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>algobit</name> <operator>=</operator> <call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_power_of_two</name> <argument_list>(<argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Option -c incompatible with multiple algorithms in -a.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>compareBin</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>compareStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compareBin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>compareBin_len</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>compareStr</name></expr></argument>, <argument><expr><name>compareBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>compareBin_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Invalid -c hex hash\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>compareBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>compareBin_len</name> <operator>!=</operator> <call><name>r_hash_size</name> <argument_list>(<argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(
<argument><expr><literal type="string">"rahash2: Given -c hash has %d byte(s) but the selected algorithm returns %d byte(s).\n"</literal></expr></argument>,
<argument><expr><name>compareBin_len</name></expr></argument>,
<argument><expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>compareBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st64</name><operator>)</operator> <name>from</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>st64</name><operator>)</operator> <name>to</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>||</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&amp;&amp;</operator> <name>from</name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid -f or -t offsets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptype</name></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"r2 -qfnc \"p==%s 100\" \"%s\""</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ivseed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ivseed</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>ivseed</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>iv</name></expr></argument>, <argument><expr><name>ivseed</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ivlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>ivseed</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ivlen</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>ivseed</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ivlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>iv</name></expr></argument>, <argument><expr><name>ivseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ivlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>ivseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_hash_seed</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashstr</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashstr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>INSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hashstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>hashstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hashstr</name><index>[<expr><name>bytes_read</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hashstr_len</name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hashstr_hex</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hashstr_len</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashstr_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid hex string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hashstr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashstr_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name>hashstr_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid -f.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>hashstr_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid -t.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>hashstr_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hashstr</name> <operator>=</operator> <name>hashstr</name> <operator>+</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashstr_len</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hashstr</name><index>[<expr><name>hashstr_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes_read</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hashstr_hex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashstr_len</name> <operator>=</operator> <call><name>r_str_unescape</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>encrypt_or_decrypt</name> <argument_list>(<argument><expr><name>encrypt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hashstr</name></expr></argument>, <argument><expr><name>hashstr_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>encrypt_or_decrypt</name> <argument_list>(<argument><expr><name>decrypt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hashstr</name></expr></argument>, <argument><expr><name>hashstr_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>hashstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strsz</name> <init>= <expr><name>hashstr_len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>_s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>strsz</name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hashstr</name></expr></argument>, <argument><expr><name>hashstr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hashstr</name></expr></argument>, <argument><expr><name>hashstr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>strsz</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strsz</name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>strsz</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>algobit</name> <operator>=</operator> <call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid algorithm. See -E, -D maybe?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>hashstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_ALL</name></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>hashbit</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <name>algobit</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>strsz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_hash_internal</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hashbit</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><name>strsz</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compare_hashes</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>compareBin</name></expr></argument>, <argument><expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>_s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>hashstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>do_help</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numblocks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <operator>-</operator><name>bsize</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Invalid block size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>io</name> <operator>=</operator> <call><name>r_io_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><call><name>encrypt_or_decrypt_file</name> <argument_list>(<argument><expr><name>encrypt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>rt</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><call><name>encrypt_or_decrypt_file</name> <argument_list>(<argument><expr><name>decrypt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>rt</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>r_stdin_slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%d"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Cannot open malloc://1024\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Cannot hash directories\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rahash2: Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>do_hash</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>algo</name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><name>ule</name></expr></argument>, <argument><expr><name>compareBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_desc_close</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hashstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_free</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
