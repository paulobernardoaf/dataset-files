<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\main\radare2.c">

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THREADS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_THREADED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCOLORIZE_NONTTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid_gdb_file</name><parameter_list>(<parameter><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><ternary><condition><expr><name>fh</name> <operator>&amp;&amp;</operator> <name><name>fh</name><operator>-&gt;</operator><name>core</name></name></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><name>d</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"gdb://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_file_in_cur_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <call><name>r_file_basename</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_main_version_verify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>show</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>vc</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>R2_GITTAP</name></expr></init></decl>;</decl_stmt>
<struct>struct <name>vcs_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vc</name></type> <name>callback</name></decl>;</decl_stmt>
}</block> <decl><name><name>vcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"r_anal"</literal></expr>, <expr><name>r_anal_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_lib"</literal></expr>, <expr><name>r_lib_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_egg"</literal></expr>, <expr><name>r_egg_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_asm"</literal></expr>, <expr><name>r_asm_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_bin"</literal></expr>, <expr><name>r_bin_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_cons"</literal></expr>, <expr><name>r_cons_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_flag"</literal></expr>, <expr><name>r_flag_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_core"</literal></expr>, <expr><name>r_core_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_crypto"</literal></expr>, <expr><name>r_crypto_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_bp"</literal></expr>, <expr><name>r_bp_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_debug"</literal></expr>, <expr><name>r_debug_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_main"</literal></expr>, <expr><name>r_main_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_hash"</literal></expr>, <expr><name>r_hash_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_fs"</literal></expr>, <expr><name>r_fs_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_io"</literal></expr>, <expr><name>r_io_version</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_LIB_MAGIC</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"r_magic"</literal></expr>, <expr><name>r_magic_version</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"r_parse"</literal></expr>, <expr><name>r_parse_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_reg"</literal></expr>, <expr><name>r_reg_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_sign"</literal></expr>, <expr><name>r_sign_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_search"</literal></expr>, <expr><name>r_search_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_syscall"</literal></expr>, <expr><name>r_syscall_version</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r_util"</literal></expr>, <expr><name>r_util_version</name></expr> }</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s r2\n"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>vcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vcs_t</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>vcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name><name>v</name><operator>-&gt;</operator><name>callback</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: r2 library versions mismatch!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: r2 library versions mismatch! See r2 -V\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>main_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: r2 [-ACdfLMnNqStuvwzX] [-P patch] [-p prj] [-a arch] [-b bits] [-i file]\n"</literal>
<literal type="string">" [-s addr] [-B baddr] [-m maddr] [-c cmd] [-e k=v] file|pid|-|--|=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(
<argument><expr><literal type="string">" -- run radare2 without opening any file\n"</literal>
<literal type="string">" - same as 'r2 malloc://512'\n"</literal>
<literal type="string">" = read file from stdin (use -i and -c to run cmds)\n"</literal>
<literal type="string">" -= perform !=! command to run all commands remotely\n"</literal>
<literal type="string">" -0 print \\x00 after init and every command\n"</literal>
<literal type="string">" -2 close stderr file descriptor (silent warning messages)\n"</literal>
<literal type="string">" -a [arch] set asm.arch\n"</literal>
<literal type="string">" -A run 'aaa' command to analyze all referenced code\n"</literal>
<literal type="string">" -b [bits] set asm.bits\n"</literal>
<literal type="string">" -B [baddr] set base address for PIE binaries\n"</literal>
<literal type="string">" -c 'cmd..' execute radare command\n"</literal>
<literal type="string">" -C file is host:port (alias for -c+=http://%%s/cmd/)\n"</literal>
<literal type="string">" -d debug the executable 'file' or running process 'pid'\n"</literal>
<literal type="string">" -D [backend] enable debug mode (e cfg.debug=true)\n"</literal>
<literal type="string">" -e k=v evaluate config var\n"</literal>
<literal type="string">" -f block size = file size\n"</literal>
<literal type="string">" -F [binplug] force to use that rbin plugin\n"</literal>
<literal type="string">" -h, -hh show help message, -hh for long\n"</literal>
<literal type="string">" -H ([var]) display variable\n"</literal>
<literal type="string">" -i [file] run script file\n"</literal>
<literal type="string">" -I [file] run script file before the file is opened\n"</literal>
<literal type="string">" -k [OS/kern] set asm.os (linux, macos, w32, netbsd, ...)\n"</literal>
<literal type="string">" -l [lib] load plugin file\n"</literal>
<literal type="string">" -L list supported IO plugins\n"</literal>
<literal type="string">" -m [addr] map file at given address (loadaddr)\n"</literal>
<literal type="string">" -M do not demangle symbol names\n"</literal>
<literal type="string">" -n, -nn do not load RBin info (-nn only load bin structures)\n"</literal>
<literal type="string">" -N do not load user settings and scripts\n"</literal>
<literal type="string">" -q quiet mode (no prompt) and quit after -i\n"</literal>
<literal type="string">" -qq quit after running all -c and -i\n"</literal>
<literal type="string">" -Q quiet mode (no prompt) and quit faster (quickLeak=true)\n"</literal>
<literal type="string">" -p [prj] use project, list if no arg, load if no file\n"</literal>
<literal type="string">" -P [file] apply rapatch file and quit\n"</literal>
<literal type="string">" -r [rarun2] specify rarun2 profile to load (same as -e dbg.profile=X)\n"</literal>
<literal type="string">" -R [rr2rule] specify custom rarun2 directive\n"</literal>
<literal type="string">" -s [addr] initial seek\n"</literal>
<literal type="string">" -S start r2 in sandbox mode\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_THREADS</name> <operator>&amp;&amp;</operator> <name>ALLOW_THREADED</name></expr></cpp:if>
<literal type="string">" -t load rabin2 info in thread\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">" -T do not compute file hashes\n"</literal>
<literal type="string">" -u set bin.filter=false to get raw sym/sec/cls names\n"</literal>
<literal type="string">" -v, -V show radare2 version (-V show lib versions)\n"</literal>
<literal type="string">" -w open file in write mode\n"</literal>
<literal type="string">" -x open without exec-flag (asm.emu will not work), See io.exec\n"</literal>
<literal type="string">" -X same as -e bin.usextr=false (useful for dyldcache)\n"</literal>
<literal type="string">" -z, -zz do not load strings or load them even in raw\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datahome</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_DATADIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPrefix</name> <init>= <expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(
<argument><expr><literal type="string">"Scripts:\n"</literal>
<literal type="string">" system ${R2_PREFIX}/share/radare2/radare2rc\n"</literal>
<literal type="string">" user ~/.radare2rc "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_RC</name></expr></argument>)</argument_list></call> <literal type="string">" (and "</literal> <call><name>R_JOIN_3_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_RC_DIR</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <literal type="string">")\n"</literal>
<literal type="string">" file ${filename}.r2\n"</literal>
<literal type="string">"Plugins:\n"</literal>
<literal type="string">" binrc "</literal> <call><name>R_JOIN_4_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_BINRC</name></expr></argument>, <argument><expr><literal type="string">"bin-&lt;format&gt;"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <literal type="string">" (elf, elf64, mach0, ..)\n"</literal>
<literal type="string">" R2_USER_PLUGINS "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_PLUGINS</name></expr></argument>)</argument_list></call> <literal type="string">"\n"</literal>
<literal type="string">" R2_LIBR_PLUGINS "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_PLUGINS</name></expr></argument>)</argument_list></call> <literal type="string">"\n"</literal>
<literal type="string">" R2_USER_ZIGNS "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><name>R2_HOME_ZIGNS</name></expr></argument>)</argument_list></call> <literal type="string">"\n"</literal>
<literal type="string">"Environment:\n"</literal>
<literal type="string">" R2_RDATAHOME %s\n"</literal> 
<literal type="string">" RCFILE ~/.radare2rc (user preferences, batch script)\n"</literal> 
<literal type="string">" R2_MAGICPATH "</literal> <call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_MAGIC</name></expr></argument>)</argument_list></call> <literal type="string">"\n"</literal>
<literal type="string">" R_DEBUG if defined, show error messages and crash signal\n"</literal>
<literal type="string">" R_DEBUG_ASSERT=1 set a breakpoint when hitting an assert\n"</literal>
<literal type="string">" VAPIDIR path to extra vapi directory\n"</literal>
<literal type="string">" R2_NOPLUGINS do not load r2 shared plugins\n"</literal>
<literal type="string">"Paths:\n"</literal>
<literal type="string">" R2_PREFIX "</literal><name>R2_PREFIX</name><literal type="string">"\n"</literal>
<literal type="string">" R2_INCDIR "</literal><name>R2_INCDIR</name><literal type="string">"\n"</literal>
<literal type="string">" R2_LIBDIR "</literal><name>R2_LIBDIR</name><literal type="string">"\n"</literal>
<literal type="string">" R2_LIBEXT "</literal><name>R_LIB_EXT</name><literal type="string">"\n"</literal></expr></argument>
, <argument><expr><name>dirPrefix</name></expr></argument>, <argument><expr><name>datahome</name></expr></argument>, <argument><expr><name>dirPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>datahome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>main_print_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>incdir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_INCDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libdir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_LIBDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>incdir</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>R2_INCDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libdir</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>R2_LIBDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>confighome</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_CONFIGDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datahome</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_DATADIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cachehome</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_CACHEDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homeplugins</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homezigns</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_ZIGNS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plugins</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>magicpath</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_SDB_MAGIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<struct>struct <name>radare2_var_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block> <decl><name><name>r2_vars</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"R2_PREFIX"</literal></expr>, <expr><name>R2_PREFIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_MAGICPATH"</literal></expr>, <expr><name>magicpath</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_PREFIX"</literal></expr>, <expr><name>R2_PREFIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_INCDIR"</literal></expr>, <expr><name>incdir</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_LIBDIR"</literal></expr>, <expr><name>libdir</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_LIBEXT"</literal></expr>, <expr><name>R_LIB_EXT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_RCONFIGHOME"</literal></expr>, <expr><name>confighome</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_RDATAHOME"</literal></expr>, <expr><name>datahome</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_RCACHEHOME"</literal></expr>, <expr><name>cachehome</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_LIBR_PLUGINS"</literal></expr>, <expr><name>plugins</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_USER_PLUGINS"</literal></expr>, <expr><name>homeplugins</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R2_USER_ZIGNS"</literal></expr>, <expr><name>homezigns</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>var_name</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>var_name</name></expr></argument>, <argument><expr><literal type="string">"R2_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>var_name</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>r2_vars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>incdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>confighome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>datahome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cachehome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homeplugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homezigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>plugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>magicpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>run_commands</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_analysis</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Script '%s' not found.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_core_run_script</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[c] Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>quiet</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cmds</argument>, <argument>iter</argument>, <argument>cmdn</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd_lines</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cmdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<label><name>beach</name>:</label>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_analysis</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmds</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mustSaveHistory</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"scr.histsave"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_color_default</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alacritty</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"ALACRITTY_LOG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alacritty</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>alacritty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"COLORTERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"truecolor"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"24bit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_16M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"truecolor"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"24bit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_16M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"256color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dumb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_radare2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forcequit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>haveRarunProfile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_analysis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iod</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_connect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fullfile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_project</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zerosep</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>help</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>LOAD_BIN_ALL</name></decl>, <decl><name>LOAD_BIN_NOTHING</name></decl>, <decl><name>LOAD_BIN_STRUCTURES_ONLY</name></decl> }</block> <decl><name>load_bin</name> <init>= <expr><name>LOAD_BIN_ALL</name></expr></init></decl>;</enum>
<decl_stmt><decl><type><name>bool</name></type> <name>run_rc</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>perms</name> <init>= <expr><name>R_PERM_RX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sandbox</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>seek</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_list_io_plugins</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>debugbackend</name> <init>= <expr><literal type="string">"native"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmarch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>forcebin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asmbits</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>customRarunProfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>mapaddr</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quietLeak</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_gdb</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s_seek</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>compute_hashes</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>cmds</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>evals</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>prefiles</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISTS_FREE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ r_list_free (cmds); r_list_free (evals); r_list_free (files); r_list_free (prefiles); }</cpp:value></cpp:define>







<decl_stmt><decl><type><name>bool</name></type> <name>noStderr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigBlockMask</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sigemptyset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sigBlockMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sigBlockMask</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_signal_sigmask</name> <argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigBlockMask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name> <init>= <expr><call><name>r_sys_get_environ</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>envp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_set_environ</name> <argument_list>(<argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R_DEBUG"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_crash_handler</name> <argument_list>(<argument><expr><literal type="string">"gdb --pid %d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>main_help</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_core_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_radare2</name></name> <operator>=</operator> <name>r_main_radare2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_radiff2</name></name> <operator>=</operator> <name>r_main_radiff2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_rafind2</name></name> <operator>=</operator> <name>r_main_rafind2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_rabin2</name></name> <operator>=</operator> <name>r_main_rabin2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_ragg2</name></name> <operator>=</operator> <name>r_main_ragg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_rasm2</name></name> <operator>=</operator> <name>r_main_rasm2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>r_main_rax2</name></name> <operator>=</operator> <name>r_main_rax2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_task_sync_begin</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_project_list</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-H"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>main_print_var</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_color_default</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"=02AMCwxfF:H:hm:e:nk:NdqQs:p:b:B:a:Lui:I:l:P:R:r:c:D:vVSTzuXt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cmdremote</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><name>noStderr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name>zerosep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.filter"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>asmarch</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>zflag</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name>do_analysis</name> <operator>+=</operator> <ternary><condition><expr><name>do_analysis</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>asmbits</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>baddr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.usextr"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>do_connect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sorry. No debugger backend available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>debugbackend</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_plugin_list</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_eval</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>evals</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>fullfile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>forcebin</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>help</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><call><name>main_print_var</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>prefiles</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>asmos</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_lib_open</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>do_list_io_plugins</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>mapaddr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_seek</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.offset"</literal></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.demangle"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>load_bin</name> <operator>==</operator> <name>LOAD_BIN_ALL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>load_bin</name> <operator>=</operator> <name>LOAD_BIN_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>load_bin</name> <operator>==</operator> <name>LOAD_BIN_NOTHING</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>load_bin</name> <operator>=</operator> <name>LOAD_BIN_STRUCTURES_ONLY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.info"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>run_rc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_project_list</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>patchfile</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quietLeak</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.fortunes"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>forcequit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>haveRarunProfile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.profile"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>customRarunProfile</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>customRarunProfile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>s_seek</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>sandbox</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_THREADS</name></expr></cpp:if>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ALLOW_THREADED</name></expr></cpp:if>
<expr_stmt><expr><name>threaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: -t is temporarily disabled!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name>compute_hashes</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>R2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>customRarunProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_main_version_verify</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>customRarunProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_main_version_print</name> <argument_list>(<argument><expr><literal type="string">"radare2"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<return>return <expr><call><name>r_main_version_verify</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>perms</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>perms</name> <operator>&amp;=</operator> <operator>~</operator><name>R_PERM_X</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.exec"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>help</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>noStderr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>close</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to close stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>nul</name><index>[]</index></name> <init>= <expr><name>R_SYS_DEVNULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_stderr</name> <init>= <expr><call><name>open</name> <argument_list>(<argument><expr><name>nul</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>new_stderr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open %s"</literal></expr></argument>, <argument><expr><name>nul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>new_stderr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>dup2</name> <argument_list>(<argument><expr><name>new_stderr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to dup2 stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>close</name> <argument_list>(<argument><expr><name>new_stderr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to close %s"</literal></expr></argument>, <argument><expr><name>nul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbg_profile</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.profile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg_profile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dbg_profile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>dbg_profile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"program="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>program</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>program</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read dbg.profile '%s'\n"</literal></expr></argument>, <argument><expr><name>dbg_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <ternary><condition><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>do_list_io_plugins</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.plugins"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_loadlibs</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_CORE_LOADLIBS_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>run_commands</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prefiles</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>do_analysis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_commands</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>do_analysis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quietLeak</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_plugin_list</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>help</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>main_help</name> <argument_list>(<argument><expr><ternary><condition><expr><name>help</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if <condition>(<expr><name>customRarunProfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tfn</name> <init>= <expr><call><name>r_file_temp</name> <argument_list>(<argument><expr><literal type="string">".rarun2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>tfn</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>customRarunProfile</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>customRarunProfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>tfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>haveRarunProfile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.profile"</literal></expr></argument>, <argument><expr><name>tfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&gt;=</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveRarunProfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing argument for -d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><ternary><condition><expr><name>haveRarunProfile</name></expr>?</condition><then> <expr><name>pfile</name></expr></then><else>: <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"winedbg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>debugbackend</name> <operator>=</operator> <literal type="string">"io"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>debugbackend</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_NOPLUGINS"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.plugins"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.plugins"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_loadlibs</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_CORE_LOADLIBS_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_commands</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prefiles</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>do_analysis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>prefiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefiles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_force_plugin</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>forcebin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prj</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prj</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_project_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>prj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.strings"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_connect</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing URI for -C\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"=+%s"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"=+http://%s/cmd/"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"=!="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>zflag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.strings"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.rawstr"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>zflag</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sleeping now...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_sleep</name> <argument_list>(<argument><expr><name>zflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run_rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_parse_radare2rc</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"zign.autoload"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dir-&gt;zigns"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>complete_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>complete_path</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal><name>R_SYS_DIR</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>complete_path</name></expr></argument>, <argument><expr><literal type="string">"gz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sign_load_gz</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>complete_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_sign_load</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>complete_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>complete_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pfile</name> <operator>&amp;&amp;</operator> <call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Cannot debug directories, yet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sys_chdir</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[d] Cannot open directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_stdin_slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"^D\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot reopen stdin without UNIX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%d"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[=] Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>,
<argument><expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot slurp from stdin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>asmbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>asmbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"search.in"</literal></expr></argument>, <argument><expr><literal type="string">"dbg.map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No program given to -d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.backend"</literal></expr></argument>, <argument><expr><name>debugbackend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>debugbackend</name></expr></argument>, <argument><expr><literal type="string">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haveRarunProfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>--</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iod</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>io</name></name> <operator>&amp;&amp;</operator> <name>fh</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>debugbackend</name></expr></argument>, <argument><expr><literal type="string">"gdb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.exe.path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>baddr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.baddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newpath</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newpath</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iod</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>newpath</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_debug_get_baddr</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid_gdb_file</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_debug_get_baddr</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>filepath</name> <operator>=</operator> <call><name>get_file_in_cur_dir</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iod</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>filepath</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_debug_get_baddr</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>haveRarunProfile</name> <operator>&amp;&amp;</operator> <name>pfile</name><operator>)</operator></expr>?</condition><then> <expr><name>pfile</name></expr></then><else>: <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>is_gdb</name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"gdb://"</literal></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><ternary><condition><expr><name>f</name></expr>?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_gdb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"dbg://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>escaped_path</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_file_path</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>escaped_path</name> <operator>=</operator> <call><name>r_str_arg_escape</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>pfile</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_path</name> <init>= <expr><call><name>r_str_arg_escape</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>pfile</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_arg</name> <init>= <expr><call><name>r_str_arg_escape</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>escaped_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escaped_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asmarch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asmbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>asmbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asmos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.os"</literal></expr></argument>, <argument><expr><name>asmos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name> <operator>||</operator> <name>debug</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbg_profile</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.profile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>==</operator> <name>argc</name> <operator>&amp;&amp;</operator> <name>dbg_profile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dbg_profile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name> <operator>&amp;&amp;</operator> <name>perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perms</name> <operator>|=</operator> <name>R_PERM_CREAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_CREAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.va"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_io_create: Permission denied.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iod</name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iod</name> <operator>&amp;&amp;</operator> <name>perms</name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iod</name><operator>-&gt;</operator><name>perm</name></name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>load_bin</name> <operator>==</operator> <name>LOAD_BIN_ALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filepath</name> <operator>=</operator> <ternary><condition><expr><name>file</name></expr>?</condition><then> <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <ternary><condition><expr><name>filepath</name></expr> ?</condition><then> <expr><name>filepath</name> <operator>+</operator> <literal type="number">3</literal></expr> </then><else>: <expr><name>pfile</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <name>iod</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iod</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bi</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>haveBinInfo</name> <init>= <expr><name>bi</name> <operator>&amp;&amp;</operator> <name><name>bi</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bi</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;&amp;</operator> <name><name>bi</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haveBinInfo</name> <operator>&amp;&amp;</operator> <name>baddr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Don't use -B on unknown files. Consider using -m.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>iod</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>, <argument><expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>load_bin</name> <operator>==</operator> <name>LOAD_BIN_STRUCTURES_ONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_bin_load_structs</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>iod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prj</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prj</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>r_core_project_info</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>prj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pfile</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>load_bin</name> <operator>=</operator> <name>LOAD_BIN_STRUCTURES_ONLY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find project file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iod</name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name><name>iod</name><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>iod</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mapaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: using oba to load the syminfo from different mapaddress.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Must use the API instead of running commands to speedup loading times.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"oba 0 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">".ies*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_use</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_gdb</name></expr> ?</condition><then> <expr><literal type="string">"gdb"</literal></expr> </then><else>: <expr><name>debugbackend</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>baddr</name> <operator>=</operator> <call><name>r_debug_get_baddr</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>baddr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>baddr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bin.baddr 0x%08"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>load_bin</name> <operator>==</operator> <name>LOAD_BIN_ALL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>baddr</name> <operator>&amp;&amp;</operator> <name>baddr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Using 0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"asm.bits %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <name>__GNU_LIBRARY__</name> <operator>&amp;&amp;</operator> <name>__GLIBC__</name> <operator>&amp;&amp;</operator> <name>__GLIBC_MINOR__</name> <operator>&amp;&amp;</operator> <name>__x86_64__</name></expr></cpp:if>
<decl_stmt><decl><type><name>ut64</name></type> <name>bitness</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bitness</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"glibc.fc_offset = 0x00148\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.fc_offset"</literal></expr></argument>, <argument><expr><literal type="number">0x00148</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">".dm*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"dr? thumb;?? e asm.bits=16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pfile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[w] Cannot open '%s' for writing.\n"</literal></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r] Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing file to open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>rclass</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"fs"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>rclass</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fstype</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bclass</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"m /root %s @ 0"</literal></expr></argument>, <argument><expr><name>fstype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"=!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>iod</name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mapaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>mapaddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>evals</argument>, <argument>iter</argument>, <argument>cmdn</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_eval</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>cmdn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


if (!quiet &amp;&amp; r_cons_is_utf8 ()) {
r_config_set_i (r-&gt;config, "scr.utf8", true);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>asmarch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>asmarch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asmbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>asmbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>asmos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.os"</literal></expr></argument>, <argument><expr><name>asmos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>debug</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <name>iod</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>iod</name><operator>-&gt;</operator><name>fd</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>iod</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> \
<name><name>iod</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>isdbg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_setup_debugger</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>debugbackend</name></expr></argument>, <argument><expr><name>baddr</name> <operator>==</operator> <name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name> <operator>&amp;&amp;</operator> <name>o</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>regstate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="string">"entry0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><call><name>r_bin_get_sections</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>sections</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr>?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr></then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name>compute_hashes</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>limit</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.hashlimit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_file_set_hashes</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><call><name>r_bin_file_compute_hashes</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s_seek</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>s_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seek</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>seek</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>iod</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>iod</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>npath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>has_project</name> <operator>=</operator> <call><name>r_core_project_open</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iod</name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr> ?</condition><then> <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_project</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.strings"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>npath</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name> <operator>&amp;&amp;</operator> <name>npath</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>npath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: file.path change: %s =&gt; %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>npath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>evals</argument>, <argument>iter</argument>, <argument>cmdn</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_eval</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>cmdn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.r2"</literal></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri_splitter</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name>uri_splitter</name></expr>?</condition><then> <expr><name>uri_splitter</name> <operator>+</operator> <literal type="number">3</literal></expr></then><else>: <expr><name>f</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isInteractive</name> <init>= <expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isInteractive</name> <operator>&amp;&amp;</operator> <call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"Do you want to run the '%s' script? (y/N) "</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd_file</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>global_rc</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_GLOBAL_RC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>global_rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_run_script</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>global_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>global_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"ieq"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>da</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"file.analyze"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>da</name> <operator>&gt;</operator> <name>do_analysis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_analysis</name> <operator>=</operator> <name>da</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>do_analysis</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>do_analysis</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"aa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"aaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"aaaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNCOLORIZE_NONTTY</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_isatty</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>fullfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"omfg+w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_commands</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>do_analysis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>evals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmds</name> <operator>=</operator> <name>evals</name> <operator>=</operator> <name>files</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>forcequit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run_rc</name> <operator>&amp;&amp;</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.fortunes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_fortune_print_random</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sandbox</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.sandbox"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.wheel"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>patchfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>patchfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_core_patch</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[p] Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><name>patchfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>patchfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>patchfile</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zerosep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_zero</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seek</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>seek</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"aeip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_prompt_loop</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug</name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>question</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_question_debug</name> <init>= <expr><name>ret</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_question_save</name> <init>= <expr><operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>y_kill_debug</name> <init>= <expr><operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>y_save_project</name> <init>= <expr><operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_task_running_tasks_count</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"There are running background tasks. Do you want to kill them? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_task_break_all</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_core_task_join</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>tasks</name><operator>.</operator><name>main_task</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>no_question_debug</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.exitkills"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>y_kill_debug</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>r_debug_kill</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Do you want to quit? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.exitkills"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Do you want to kill the process? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_kill</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_detach</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prj</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"prj.name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>no_question_save</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prj</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prj</name> <operator>&amp;&amp;</operator> <name>y_save_project</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>r_core_project_save</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>prj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>question</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Do you want to save the '%s' project? (Y/n)"</literal></expr></argument>, <argument><expr><name>prj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prj</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prj</name> <operator>&amp;&amp;</operator> <call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>question</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_core_project_save</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>prj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>question</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.confirmquit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"Do you want to quit? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&amp;&amp;</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.exitkills"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_kill</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mustSaveHistory</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_line_hist_save</name> <argument_list>(<argument><expr><name>R2_HOME_HISTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<label><name>beach</name>:</label>
<if_stmt><if>if <condition>(<expr><name>quietLeak</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_task_sync_end</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>r_core_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_free</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LISTS_FREE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
