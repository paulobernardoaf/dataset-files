<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\main\rafind2.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_search.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>align</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>from</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nonstop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>identify</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>R_SEARCH_STRING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>bsize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hexstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>widestr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RPrint</name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>keywords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>json</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hit</name><parameter_list>(<parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>addr</name> <operator>-</operator> <name>cur</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <name>addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cur</name> <operator>-</operator> <name>addr</name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>cur</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>delta</name> <operator>&gt;=</operator> <name>bsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid delta\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>_str</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>_str</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>showstr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>widestr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>_str</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>delta</name></expr>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_str</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_str</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>delta</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name> <operator>||</operator> <operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_str</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>delta</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name> <operator>||</operator> <operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><literal type="string">"string"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s{\"offset\":%"</literal><name>PFMT64d</name><literal type="string">",\"type\":\"%s\",\"data\":\"%s\"}"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"f hit%d_%d 0x%08"</literal><name>PFMT64x</name><literal type="string">" ; %s\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>curfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>showstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: %s [-mXnzZhqv] [-a align] [-b sz] [-f/t from/to] [-[e|s|S] str] [-x hex] -|file|dir ..\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(
<argument><expr><literal type="string">" -a [align] only accept aligned hits\n"</literal>
<literal type="string">" -b [size] set block size\n"</literal>
<literal type="string">" -e [regex] search for regex matches (can be used multiple times)\n"</literal>
<literal type="string">" -f [from] start searching from address 'from'\n"</literal>
<literal type="string">" -h show this help\n"</literal>
<literal type="string">" -i identify filetype (r2 -nqcpm file)\n"</literal>
<literal type="string">" -j output in JSON\n"</literal>
<literal type="string">" -m magic search, file-type carver\n"</literal>
<literal type="string">" -M [str] set a binary mask to be applied on keywords\n"</literal>
<literal type="string">" -n do not stop on read errors\n"</literal>
<literal type="string">" -r print using radare commands\n"</literal>
<literal type="string">" -s [str] search for a specific string (can be used multiple times)\n"</literal>
<literal type="string">" -S [str] search for a specific wide string (can be used multiple times). Assumes str is UTF-8.\n"</literal>
<literal type="string">" -t [to] stop search at address 'to'\n"</literal>
<literal type="string">" -q quiet - do not show headings (filenames) above matching contents (default for searching a single file)\n"</literal>
<literal type="string">" -v print version and exit\n"</literal>
<literal type="string">" -x [hex] search for hexpair string (909090) (can be used multiple times)\n"</literal>
<literal type="string">" -X show hexdump of search results\n"</literal>
<literal type="string">" -z search for zero-terminated strings\n"</literal>
<literal type="string">" -Z show string found on each search hit\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rafind_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"File: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>identify</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"r2 -e search.show=false -e search.maxhits=1 -nqcpm '%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_sandbox_system</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><call><name>r_io_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open file '%s'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>r_search_new</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate %"</literal><name>PFMT64d</name><literal type="string">" bytes\n"</literal></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_search_set_callback</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hit</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>r_io_size</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_new</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_SEARCH_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"rabin2 -q%szzz '%s'"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>json</name></expr>?</condition><then> <expr><literal type="string">"j"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_SEARCH_MAGIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tostr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>to</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>!=</operator> <name>UT64_MAX</name><operator>)</operator></expr>?</condition><then>
<expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"-e search.to=%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"r2"</literal>
<literal type="string">" -e search.in=range"</literal>
<literal type="string">" -e search.align=%d"</literal>
<literal type="string">" -e search.from=%"</literal><name>PFMT64d</name>
<literal type="string">" %s -qnc/m%s '%s'"</literal></expr></argument>,
<argument><expr><name>align</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>tostr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>json</name></expr>?</condition><then> <expr><literal type="string">"j"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_sandbox_system</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tostr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_SEARCH_ESIL</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>keywords</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"r2 -qc \"/E %s\" %s"</literal></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sandbox_system</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_SEARCH_KEYWORD</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>keywords</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hexstr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>r_search_keyword_new_hex</name> <argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>r_search_keyword_new_hexmask</name> <argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>widestr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>r_search_keyword_new_wide</name> <argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>r_search_keyword_new_str</name> <argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_SEARCH_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>r_search_keyword_new_hexmask</name> <argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_search_begin</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_seek</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>R_IO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>cur</name> <operator>+=</operator> <name>bsize</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur</name> <operator>+</operator> <name>bsize</name><operator>)</operator> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nonstop</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>bsize</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_search_update</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"search: update read error at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>r_cons_free</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_search_free</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_free</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rafind_open_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rafind_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_stdin_slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%d"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>rafind_open_file</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>rafind_open_dir</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>rafind_open_file</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rafind_open_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>files</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>fname</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fname</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fullpath</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal><name>R_SYS_DIR</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rafind_open</name> <argument_list>(<argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_rafind2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keywords</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"a:ie:b:jmM:s:S:x:Xzf:t:E:rqnhvZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>rad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>identify</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><name>json</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>nonstop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_MAGIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_REGEXP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_ESIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_KEYWORD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>widestr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_KEYWORD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>widestr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>bsize</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_KEYWORD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexstr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>widestr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name>r_print_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<return>return <expr><call><name>r_main_version_print</name> <argument_list>(<argument><expr><literal type="string">"rafind2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<return>return <expr><call><name>show_help</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_SEARCH_STRING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>showstr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>show_help</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>==</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>show_help</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rafind_open</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
