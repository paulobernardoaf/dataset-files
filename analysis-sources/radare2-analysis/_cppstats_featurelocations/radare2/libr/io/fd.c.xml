<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\fd.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_close</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_close</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr>?</condition><then> <expr><call><name>r_io_desc_read</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr>?</condition><then> <expr><call><name>r_io_desc_write</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_fd_seek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_io_desc_seek</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_fd_size</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_resize</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_resize</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_is_blockdevice</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_is_blockdevice</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_is_chardevice</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_is_chardevice</name> <argument_list>(<argument><expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_read_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name>buf</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_io_desc_read_at</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_write_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr>?</condition><then> <expr><call><name>r_io_desc_write_at</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_is_dbg</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr>?</condition><then> <expr><call><name>r_io_desc_is_dbg</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_get_pid</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_io_desc_get_pid</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_get_tid</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_io_desc_get_tid</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_fd_get_base</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name> <operator>&amp;&amp;</operator> <name>base</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_io_desc_get_base</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_io_fd_get_name</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>desc</name></expr>?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_use_fd</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name><modifier>*</modifier></type> <name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fd_get_current</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
