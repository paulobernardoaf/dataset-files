<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\io_cache.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_io.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_CONTAINER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of ((RBNode*)x, RCache, rb)</cpp:value></cpp:define>

static void _fcn_tree_calc_max_addr(RBNode *node) {
RIOCache *c = CACHE_CONTAINER (node);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_item_free</name><parameter_list>(<parameter><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_cache_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>io-&gt;cache</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_itv_contain</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_cache_init</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>cache_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>r_cache_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_cache_fini</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cache_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_cache_commit</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RInterval</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>RInterval</name><operator>)</operator><block>{<expr><name>from</name></expr>, <expr><name>to</name> <operator>-</operator> <name>from</name></expr>}</block></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>io-&gt;cache</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_itv_overlap</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error writing change at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_cache_reset</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_cache_invalidate</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>invalidated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RInterval</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>RInterval</name><operator>)</operator><block>{<expr><name>from</name></expr>, <expr><name>to</name> <operator>-</operator> <name>from</name></expr>}</block></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_prev_safe</name> <argument_list>(<argument>io-&gt;cache</argument>, <argument>iter</argument>, <argument>tmp</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_itv_overlap</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>, <argument><expr><call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>invalidated</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>invalidated</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_cache_list</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>io-&gt;cache</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dataSize</name> <init>= <expr><call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"wx "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" @ 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" #replaces: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>odata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"idx\":%"</literal><name>PFMT64d</name><literal type="string">",\"addr\":%"</literal><name>PFMT64d</name><literal type="string">",\"size\":%d,"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"before\":\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>odata</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\",\"after\":\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\",\"written\":%s}%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr>
?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr>?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"idx=%d addr=0x%08"</literal><name>PFMT64x</name><literal type="string">" size=%d "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>odata</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr>?</condition><then> <expr><literal type="string">"(written)"</literal></expr></then><else>: <expr><literal type="string">"(not written)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_cache_write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>itv</name></name> <operator>=</operator> <operator>(</operator><name>RInterval</name><operator>)</operator><block>{<expr><name>addr</name></expr>, <expr><name>len</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>odata</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>odata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>cm</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>cachemode</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cachemode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>cachemode</name></name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_cache_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RInterval</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>RInterval</name><operator>)</operator><block>{ <expr><name>addr</name></expr>, <expr><name>len</name></expr> }</block></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>io-&gt;cache</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_itv_overlap</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>begin</name> <init>= <expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name>begin</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>begin</name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>addr</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>covered</name></expr>;</return>
</block_content>}</block></function>
</unit>
