<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_self.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/vm_map.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_traps.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task_info.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>macosx_debug_regions</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mach_vm_address_t</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__OpenBSD__</name> <operator>||</operator> <name>__NetBSD__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__DragonFly__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kvm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>bool</name></type> <name>bsd_proc_vmmaps</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOSelfSection</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIOSelfSection</name></type> <name><name>self_sections</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>self_sections_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>mameio</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>self_in_section</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>self_sections_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name><operator>-</operator><name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>perm</name> <operator>=</operator> <name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_self_regions</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>self_sections_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>task_for_pid</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"task_for_pid failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>macosx_debug_regions</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>region</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>region2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>perms</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/proc/%d/maps"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %s %*s %*s %*s %[^\n]"</literal></expr></argument>, <argument><expr><name>region</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_c</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>region</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos_c</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>region2</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>pos_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>region2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pos_c</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region2</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>region2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>region2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>region2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<return>return <expr><call><name>bsd_proc_vmmaps</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name> <argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name> <operator>|</operator> <name>PROCESS_VM_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>name</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>name_size</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"io_self/update_self_regions: Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>VirtualQuery</name> <argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>(</operator><name>PBYTE</name><operator>)</operator> <name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name> <operator>+</operator> <name><name>mbi</name><operator>.</operator><name>RegionSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_READONLY</name></expr> ?</condition><then> <expr><name>R_PERM_R</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_READWRITE</name></expr> ?</condition><then> <expr><name>R_PERM_RW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_EXECUTE</name></expr> ?</condition><then> <expr><name>R_PERM_X</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_EXECUTE_READ</name></expr> ?</condition><then> <expr><name>R_PERM_RX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_EXECUTE_READWRITE</name></expr> ?</condition><then> <expr><name>R_PERM_RWX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <ternary><condition><expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_NOACCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>perm</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GetMappedFileName</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name>to</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> not yet implemented for this platform</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"self://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>pid</name> <init>= <expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_self_regions</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_self</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>perm</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>self_in_section</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newlen</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>perm</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>self_in_section</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>newlen</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case> <return>return <expr><name>offset</name></expr>;</return>
<case>case <expr><name>SEEK_CUR</name></expr>:</case> <return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>offset</name></expr>;</return>
<case>case <expr><name>SEEK_END</name></expr>:</case> <return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>got_alarm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__system</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This is unsafe, so disabled by the sandbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"call "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>cbptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This is unsafe, so disabled by the sandbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>r_str_word_set0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: =!call [fcnptr] [a0] [a1] ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name> <init>= <expr><name>cmd</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cbptr</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cbptr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_lib_dl_close</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>()</parameter_list> <init>= <expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a0</name></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>size_t</name><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>a0</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a1</name></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>size_t</name>,<name>size_t</name><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>ut64</name></type> <name>a0</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a1</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a2</name></decl></parameter>)</parameter_list> <init>= \
<expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>size_t</name>,<name>size_t</name>,<name>size_t</name><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>ut64</name></type> <name>a0</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a1</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a2</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a3</name></decl></parameter>)</parameter_list> <init>= \
<expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>size_t</name>,<name>size_t</name>,<name>size_t</name>,<name>size_t</name><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>ut64</name></type> <name>a0</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a1</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a2</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a3</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a4</name></decl></parameter>)</parameter_list> <init>= \
<expr><operator>(</operator><call><call><name>size_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>size_t</name>,<name>size_t</name>,<name>size_t</name>,<name>size_t</name>,<name>size_t</name><operator>)</operator></call><operator>)</operator><name>cbptr</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>ut64</name></type> <name>a0</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a1</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a2</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a3</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a4</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No callback defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported number of arguments in call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RES %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"alarm "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>tmout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secs</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>secs</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmout</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>secs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmout</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>got_alarm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setitimer</name> <argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>(</name><cpp:literal>"self:// alarm is not implemented for this platform yet"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> <cpp:literal>"self:// alarm is not implemented for this platform yet"</cpp:literal></cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"dlsym "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name> <init>= <expr><name>cmd</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%s) 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lib_dl_close</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"mameio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"_ZN12device_debug2goEj"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: No MAME IO implemented yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mameio</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This process is not a MAME!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_lib_dl_close</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"maps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>self_sections_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" - 0x%08"</literal><name>PFMT64x</name><literal type="string">" %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>self_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"|Usage: =![cmd] [args]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!pid show getpid()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!maps show map regions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!kill commit suicide\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!alarm [secs] setup alarm signal to raise r2 prompt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!dlsym [sym] dlopen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!call [sym] [...] nativelly call a function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| =!mameio enter mame IO mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_self</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"self"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Read memory from self"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"self://"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>system</name> <operator>=</operator> <name>__system</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_mach</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<function_decl><type><name>kern_return_t</name></type> <name>mach_vm_region_recurse</name> <parameter_list>(
<parameter><decl><type><name>vm_map_t</name></type> <name>target_task</name></decl></parameter>,
<parameter><decl><type><name>mach_vm_address_t</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
<parameter><decl><type><name>mach_vm_size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>natural_t</name> <modifier>*</modifier></type><name>depth</name></decl></parameter>,
<parameter><decl><type><name>vm_region_recurse_info_t</name></type> <name>info</name></decl></parameter>,
<parameter><decl><type><name>mach_msg_type_number_t</name> <modifier>*</modifier></type><name>infoCnt</name></decl></parameter>
)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>macosx_debug_regions</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>mach_vm_address_t</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vm_region_submap_info_64</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_vm_size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>natural_t</name></type> <name>nsubregions</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>share_mode</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"null"</literal></expr>,
<expr><literal type="string">"cow"</literal></expr>,
<expr><literal type="string">"private"</literal></expr>,
<expr><literal type="string">"empty"</literal></expr>,
<expr><literal type="string">"shared"</literal></expr>,
<expr><literal type="string">"true shared"</literal></expr>,
<expr><literal type="string">"prv aliased"</literal></expr>,
<expr><literal type="string">"shm aliased"</literal></expr>,
<expr><literal type="string">"large"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>VM_REGION_SUBMAP_INFO_COUNT_64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kret</name> <operator>=</operator> <call><name>mach_vm_region_recurse</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsubregions</name></expr></argument>,
<argument><expr><operator>(</operator><name>vm_region_recurse_info_t</name><operator>)</operator> <operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kret</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_printed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"mach_vm_region_recurse: Error %d - %s"</literal></expr></argument>, <argument><expr><name>kret</name></expr></argument>, <argument><expr><call><name>mach_error_string</name><argument_list>(<argument><expr><name>kret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>is_submap</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>print_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>print_size_unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><ternary><condition><expr><name>num_printed</name></expr>?</condition><then> <expr><literal type="string">" ... "</literal></expr></then><else>: <expr><literal type="string">"Region "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>print_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>print_size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>print_size</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <expr_stmt><expr><name>print_size_unit</name> <operator>=</operator> <literal type="string">"K"</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print_size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>print_size</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <expr_stmt><expr><name>print_size_unit</name> <operator>=</operator> <literal type="string">"M"</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print_size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>print_size</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <expr_stmt><expr><name>print_size_unit</name> <operator>=</operator> <literal type="string">"G"</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %p - %p [%d%s](%x/%x; %d, %s, %u p. res, %u p. swp, %u p. drt, %u ref)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>address</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>address</name> <operator>+</operator> <name>size</name><operator>)</operator></expr></argument>,
<argument><expr><name>print_size</name></expr></argument>,
<argument><expr><name>print_size_unit</name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>protection</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>max_protection</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>inheritance</name></name></expr></argument>,
<argument><expr><name><name>share_mode</name><index>[<expr><name><name>info</name><operator>.</operator><name>share_mode</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>pages_resident</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>pages_swapped_out</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>pages_dirtied</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>.</operator><name>ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_EXECUTE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>address</name><operator>+</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsubregions</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" (%d sub-regions)"</literal></expr></argument>, <argument><expr><name>nsubregions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_printed</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nsubregions</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_printed</name> <operator>&gt;=</operator> <name>max</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Max %d num_printed %d\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>num_printed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<function><type><name>bool</name></type> <name>bsd_proc_vmmaps</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_PROC</name></expr>, <expr><name>KERN_PROC_VMMAP</name></expr>, <expr><name>pid</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sysctl failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sysctl failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p_start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_start</name> <operator>&lt;</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator>struct <name>kinfo_vmentry</name> <operator>*</operator><operator>)</operator><name>p_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>kve_structsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_EXEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %p - %p %s (%s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>kve_start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>kve_end</name></name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>kve_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>kve_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_start</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"buffer allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__OpenBSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kinfo_vmentry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name></type> <name>entry</name> <init>= <expr><block>{ <expr><operator>.</operator><name>kve_start</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>endq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_PROC_VMMAP</name></expr>, <expr><name>pid</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sysctl failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>endq</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>kve_end</name></name> <operator>==</operator> <name>endq</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVE_PROT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVE_PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVE_PROT_EXEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %p - %p %s [off. %zu]\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>.</operator><name>kve_start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>.</operator><name>kve_end</name></name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name><operator>.</operator><name>kve_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>kve_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>kve_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>kve_start</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>kve_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__NetBSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CTL_VM</name></expr>, <expr><name>VM_PROC</name></expr>, <expr><name>VM_PROC_MAP</name></expr>, <expr><name>pid</name></expr>, <expr>sizeof <operator>(</operator>struct <name>kinfo_vmentry</name><operator>)</operator></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sysctl failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sysctl failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p_start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_start</name> <operator>&lt;</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator>struct <name>kinfo_vmentry</name> <operator>*</operator><operator>)</operator><name>p_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_protection</name></name> <operator>&amp;</operator> <name>KVME_PROT_EXEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %p - %p %s (%s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>kve_start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>kve_end</name></name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>kve_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>kve_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>kve_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_start</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"buffer allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__DragonFly__</name></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vmspace</name></name></type> <name>vs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vm_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vm_map_entry</name></name></type> <name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>proc</name></name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>e</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kvm_t</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>kvm_openfiles</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"kvm_openfiles: `%s`\n"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>kvm_getprocs</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvm_read</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>proc</name><operator>-&gt;</operator><name>kp_paddr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kvm_read</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>p</name><operator>.</operator><name>p_vmspace</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <operator>&amp;</operator><name><name>vs</name><operator>.</operator><name>vm_map</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ep</name> <operator>!=</operator> <operator>&amp;</operator><name><name>p</name><operator>.</operator><name>p_vmspace</name><operator>-&gt;</operator><name>vm_map</name><operator>.</operator><name>header</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kvm_read</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ep</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_EXECUTE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %p - %p %s [off. %zu]\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>.</operator><name>end</name></name></expr></argument>,
<argument><expr><call><name>r_tr_rwx_i</name> <argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self_sections</name><index>[<expr><name>self_sections_count</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_sections_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>kvm_close</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_self</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"self"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"read memory from myself using 'self://' (UNSUPPORTED)"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_mach</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
