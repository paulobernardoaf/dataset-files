<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_ihex.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>rbuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>Rihex</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fw04b</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>eaddr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fwblock</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>start_addr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>rih</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBufferSparse</name> <modifier>*</modifier></type><name>rbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>(</operator><name><name>fd</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rih</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pathname</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open '%s' for writing\n"</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ihex:write(): sparse write failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>nonempty</name> <init>= <expr><call><name>r_buf_nonempty_list</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>nonempty</argument>, <argument>iter</argument>, <argument>rbs</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>addl0</name> <init>= <expr><name><name>rbs</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>addh0</name> <init>= <expr><name><name>rbs</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>addh1</name> <init>= <expr><name><name>rbs</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>tsiz</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rbs</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addh0</name> <operator>!=</operator> <name>addh1</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>fw04b</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>addh0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"ihex:write: file error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tsiz</name> <operator>=</operator> <operator>-</operator><name>addl0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addl0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fwblock</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>rbs</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>rbs</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>tsiz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ihex:fwblock error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fw04b</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>addh1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ihex:write: file error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwblock</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>rbs</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>tsiz</name></expr></argument>, <argument><expr><operator>(</operator><name>addh1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>addl0</name></expr></argument>, <argument><expr><name><name>rbs</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>tsiz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ihex:fwblock error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> 

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">":00000001FF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>fwblock</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>start_addr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>cks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>last_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">0x10</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cks</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cks</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>start_addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cks</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>start_addr</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cks</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cks</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>cks</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">":10%04x00%02x%02x%02x%02x%02x%02x%02x"</literal>
<literal type="string">"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>start_addr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cks</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start_addr</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start_addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fw04b</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>start_addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_addr</name> <operator>=</operator> <name>i</name><operator>+</operator><name>start_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cks</name> <operator>=</operator> <operator>-</operator><name>last_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cks</name> <operator>-=</operator> <name>last_addr</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cks</name> <operator>-=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>linebuf</name><operator>+</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cks</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">":%02X%04X00%.*s%02X\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>last_addr</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>j</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>cks</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fw04b</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>eaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>cks</name> <init>= <expr><literal type="number">0</literal> <operator>-</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name>eaddr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>eaddr</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">":02000004%04X%02X\n"</literal></expr></argument>, <argument><expr><name>eaddr</name></expr></argument>, <argument><expr><name>cks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>rih</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>rih</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rih</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_io_t</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>rih</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rih</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"ihex://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>ihex_parse</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>rbuf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>sec_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>sec_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>segreg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>addr_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut16</name></type> <name>next_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extH</name></decl>, <decl><type ref="prev"/><name>extL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_MAX</name></cpp:macro> <cpp:value>(sec_size &lt; INT_MAX)? sec_size: INT_MAX</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut32</name></type> <name>sec_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sec_count</name> <init>= <expr><name>UT16_MAX</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sec_tmp</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sec_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sec_tmp</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">":%02x%04x%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid data in ihex file (%.*s)\n"</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bc</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_tmp</name> <operator>&amp;=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>addr_tmp</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>addr_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>next_addr</name> <operator>!=</operator> <name>addr_tmp</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>sec_size</name> <operator>+</operator> <name>bc</name><operator>)</operator> <operator>&gt;</operator> <name>SEC_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>sec_size</name> <operator>&amp;&amp;</operator> <name>sec_size</name> <operator>&lt;</operator> <name>UT16_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>sec_start</name></expr></argument>, <argument><expr><name>sec_tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sec_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sec_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sparse buffer problem, giving up\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sec_start</name> <operator>=</operator> <name>segreg</name> <operator>+</operator> <name>addr_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <name>addr_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">9</literal><operator>+</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unparsable data !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec_size</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name>sec_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec_tmp</name><index>[<expr><name>sec_size</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>byte</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>byte</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sec_size</name> <operator>+=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_addr</name> <operator>+=</operator> <name>bc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">9</literal><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"unparsable data !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>byte</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>fixedcksum</name> <init>= <expr><literal type="number">0</literal><operator>-</operator><operator>(</operator><name>cksum</name><operator>-</operator><name>byte</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Checksum failed %02x (got %02x expected %02x)\n"</literal></expr></argument>,
<argument><expr><name>cksum</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>, <argument><expr><name>fixedcksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>eol</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sec_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>sec_start</name></expr></argument>, <argument><expr><name>sec_tmp</name></expr></argument>, <argument><expr><name>sec_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sec_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sparse buffer problem, giving up. ssiz=%X, sstart=%X\n"</literal></expr></argument>, <argument><expr><name>sec_size</name></expr></argument>, <argument><expr><name>sec_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case> 



<if_stmt><if>if <condition>(<expr><name>sec_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>sec_start</name></expr></argument>, <argument><expr><name>sec_tmp</name></expr></argument>, <argument><expr><name>sec_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sec_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"sparse buffer problem, giving up\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>addr_tmp</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>addr_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bc</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>addr_tmp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"invalid type 02/04 record!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extH</name></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extL</name></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unparsable data !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extH</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extL</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>extH</name> <operator>+</operator> <name>extL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>segreg</name> <operator>=</operator> <name>extH</name> <operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name>extL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>segreg</name> <operator>=</operator> <name>segreg</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">4</literal></expr></then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec_start</name> <operator>=</operator> <name>segreg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cksum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name>byte</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>fixedcksum</name> <init>= <expr><literal type="number">0</literal><operator>-</operator><operator>(</operator><name>cksum</name><operator>-</operator><name>byte</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Checksum failed %02x (got %02x expected %02x)\n"</literal></expr></argument>,
<argument><expr><name>cksum</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>, <argument><expr><name>fixedcksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>eol</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name>str</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sec_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sec_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>pathname</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mal</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Rihex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>=</operator> <call><name>r_buf_new_sparse</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mal</name><operator>-&gt;</operator><name>rbuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ihex_parse</name> <argument_list>(<argument><expr><name><name>mal</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ihex: failed to parse file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>mal</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_ihex</name></expr></argument>,
<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__resize</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Rihex</name> <modifier>*</modifier></type><name>rih</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rih</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name><name>rih</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_ihex</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ihex"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Open intel HEX file"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"ihex://"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>__resize</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_ihex</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
