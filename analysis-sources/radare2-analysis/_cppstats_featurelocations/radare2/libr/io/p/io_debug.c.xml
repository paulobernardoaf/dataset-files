<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_debug.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_RARUN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>||</operator> <name>__APPLE__</name> <operator>||</operator> <name>__WINDOWS__</name> <operator>||</operator> <name>__NetBSD__</name> <operator>||</operator> <name>__KFBSD__</name> <operator>||</operator> <name>__OpenBSD__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGER_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGER_SUPPORTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name> <operator>&amp;&amp;</operator> <name>DEBUGGER_SUPPORTED</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_EXIT</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__POWERPC__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;spawn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/exception_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_traps.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_act.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/vm_map.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/loader.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/nlist.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32dbg_wrap.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>winbase</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOW32</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>winbase</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wintid</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_tokens</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>tok</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name> <argument_list>(<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TOKEN_ADJUST_PRIVILEGES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_enable</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupPrivilegeValue</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SE_DEBUG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_enable</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AdjustTokenPrivileges</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_enable</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>err_enable</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"setup_tokens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>__createprocess_params</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>appname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name> <modifier>*</modifier></type><name>pi</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__createprocess_wrap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>__createprocess_params</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>params</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>CreateProcess</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>appname</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmdline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>CREATE_NEW_CONSOLE</name> <operator>|</operator> <name>DEBUG_ONLY_THIS_PROCESS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fork_and_ptraceme</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DEBUG_EVENT</name></type> <name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>tid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setup_tokens</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name> <operator>=</operator> <call><name>w32dbg_wrap_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_cmd</name> <init>= <expr><ternary><condition><expr><name><name>io</name><operator>-&gt;</operator><name>args</name></name></expr> ?</condition><then> <expr><call><name>r_str_appendf</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>r_str_argv</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_arg_unescape</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" "</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>appname_</name> <init>= <expr><call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>cmdline_</name> <init>= <expr><call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>__createprocess_params</name></name></type> <name>p</name> <init>= <expr><block>{<expr><name>appname_</name></expr>, <expr><name>cmdline_</name></expr>, <expr><operator>&amp;</operator><name>pi</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_CALL_FUNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>__createprocess_wrap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>user</name></name> <operator>=</operator> <operator>&amp;</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"fork_and_ptraceme/CreateProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>appname_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdline_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>appname_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdline_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>dwThreadId</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_WAIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>wait_time</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>de</name></name> <operator>=</operator> <operator>&amp;</operator><name>de</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_fork</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name> <operator>!=</operator> <name>CREATE_PROCESS_DEBUG_EVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"exception code 0x%04x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_fork</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Spawned new process with pid %d, tid = %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winbase</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>lpBaseOfImage</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wintid</name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
<return>return <expr><name>pid</name></expr>;</return>

<label><name>err_fork</name>:</label>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERRFORK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TerminateProcess</name> <argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_fini</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__APPLE__</name> <operator>&amp;&amp;</operator> <name>__POWERPC__</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>__APPLE__</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>||</operator> <name>__BSD__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>inferior_abort_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Inferior received signal SIGABRT. Executing BKPT.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_me</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGTRAP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>||</operator> <name>__BSD__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><name>inferior_abort_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_TRACE_ME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace-traceme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_SIGEXC</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_TRACEME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace-traceme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name>MAGIC_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__POWERPC__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_posix_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"posix_spawnp: Invalid argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">86</literal></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported architecture. Please specify -b 32\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"posix_spawnp: unknown error %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"posix_spawnp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RRunProfile</name><modifier>*</modifier></type> <name>_get_run_profile</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><call><name>r_run_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_run_free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>_program</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>_dodebug</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_run_parsefile</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't find profile '%s'\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_run_free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>, <argument><expr><name>R_SYS_DIR</name> <literal type="string">".rarun2."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_file_rm</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_run_parseline</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>expr</name><operator>=</operator><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"bits=64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_run_parseline</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>expr</name><operator>=</operator><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"bits=32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_run_config_env</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't config the environment.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_run_free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rp</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__POWERPC__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_posix_redirection</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><name>posix_spawn_file_actions_t</name> <modifier>*</modifier></type><name>fileActions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>_stdin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addopen</name> <argument_list>(<argument><expr><name>fileActions</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>_stdin</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>_stdout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addopen</name> <argument_list>(<argument><expr><name>fileActions</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>_stdout</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>_stderr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addopen</name> <argument_list>(<argument><expr><name>fileActions</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>_stderr</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fork_and_ptraceme_for_mac</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>runprofile</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>posix_spawn_file_actions_t</name></type> <name>fileActions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ps_flags</name> <init>= <expr><name>POSIX_SPAWN_SETSIGDEF</name> <operator>|</operator> <name>POSIX_SPAWN_SETSIGMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>no_signals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>all_signals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>copied</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cpu_type_t</name></type> <name>cpu</name> <init>= <expr><name>CPU_TYPE_ANY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>posix_spawnattr_t</name></type> <name>attr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>posix_spawnattr_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>no_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigfillset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>all_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawnattr_setsigmask</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>no_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawnattr_setsigdefault</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>posix_spawn_file_actions_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addinherit_np</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addinherit_np</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_addinherit_np</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ps_flags</name> <operator>|=</operator> <name>POSIX_SPAWN_CLOEXEC_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ps_flags</name> <operator>|=</operator> <name>POSIX_SPAWN_START_SUSPENDED</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_SPAWN_DISABLE_ASLR</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>runprofile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>useASLR</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>aslr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_cmd</name> <init>= <expr><ternary><condition><expr><name><name>io</name><operator>-&gt;</operator><name>args</name></name></expr>
?</condition><then> <expr><call><name>r_str_appendf</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>r_str_argv</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid execvp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>useASLR</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>useASLR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ps_flags</name> <operator>|=</operator> <name>_POSIX_SPAWN_DISABLE_ASLR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>posix_spawnattr_setflags</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>ps_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cpu</name> <operator>=</operator> <name>CPU_TYPE_I386</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>posix_spawnattr_setbinpref_np</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>r_file_readlink</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>r_str_arg_unescape</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>posix_spawnp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_posix_error</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>r_str_argv</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>posix_spawn_file_actions_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><call><name>_get_run_profile</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>handle_posix_redirection</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rp</name><operator>-&gt;</operator><name>_aslr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ps_flags</name> <operator>|=</operator> <name>_POSIX_SPAWN_DISABLE_ASLR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>_bits</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cpu</name> <operator>=</operator> <name>CPU_TYPE_I386</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>posix_spawnattr_setflags</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>ps_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawnattr_setbinpref_np</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>posix_spawnp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>_args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_posix_error</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_run_free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>posix_spawn_file_actions_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fileActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><operator>(</operator><name>__APPLE__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__POWERPC__</name><operator>)</operator><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>fork_child_data_t</name> <block>{
<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>runprofile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
}</block></struct></type> <name>fork_child_data</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fork_child_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>fork_child_data</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>runprofile</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>r_str_argv</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><call><name>_get_run_profile</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>trace_me</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_run_start</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_run_free</name> <argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_cmd</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>args</name></name></expr> ?</condition><then>
<expr><call><name>r_str_appendf</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>trace_me</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>r_str_argv</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_arg_unescape</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>execvp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not execvp: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name>MAGIC_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid execvp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_str_argv_free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fork_and_ptraceme_for_unix</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>status</name></decl>, <decl><type ref="prev"/><name>child_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>runprofile</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fork_child_data</name></type> <name>child_data</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>child_data</name><operator>.</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_data</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_data</name><operator>.</operator><name>runprofile</name></name> <operator>=</operator> <name>runprofile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_data</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>child_pid</name> <operator>=</operator> <call><name>r_io_ptrace_fork</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fork_child_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>child_pid</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"fork_and_ptraceme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>waitpid</name> <argument_list>(<argument><expr><name>child_pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"waitpid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usleep</name> <argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>!=</operator> <name>child_pid</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>WIFSTOPPED</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Process with PID %d started...\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>child_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WEXITSTATUS</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MAGIC_EXIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>child_pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><name>child_pid</name></expr></argument>, <argument><expr><name>SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Killing child process %d due to an error\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>child_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><name>child_pid</name></expr></argument>, <argument><expr><name>SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>child_pid</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fork_and_ptraceme</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>
<return>return <expr><call><name>fork_and_ptraceme_for_unix</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>fork_and_ptraceme_for_mac</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>fork_and_ptraceme_for_unix</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"waitfor://"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"pidof://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"dbg://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>file</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pid_of</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dbg</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dbg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pids</name> <init>= <expr><call><name><name>d</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>pids</name></name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>pids</argument>, <argument>iter</argument>, <argument>proc</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Matching PID %d %s\n"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot enumerate processes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOPlugin</name> <modifier>*</modifier></type><name>_plugin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"waitfor://"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name> <init>= <expr><name>file</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Waiting for %s\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>target_pid</name> <init>= <expr><call><name>get_pid_of</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>target_pid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"dbg://%d"</literal></expr></argument>, <argument><expr><name>target_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"pidof://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name> <init>= <expr><name>file</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target_pid</name> <init>= <expr><call><name>get_pid_of</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>target_pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find matching process for %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"dbg://%d"</literal></expr></argument>, <argument><expr><name>target_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidfile</name> <init>= <expr><name>file</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name> <argument_list>(<argument><expr><name>pidfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>pidfile</name> <operator>||</operator> <name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork_and_ptraceme</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>file</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"w32dbg://%d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_plugin</name> <operator>=</operator> <call><name>r_io_plugin_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>uri</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_plugin</name> <operator>||</operator> <operator>!</operator><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>w32</name> <init>= <expr><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><name><name>ret</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>w32</name><operator>-&gt;</operator><name>winbase</name></name> <operator>=</operator> <name>winbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w32</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>=</operator> <name>wintid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator><operator>-&gt;</operator><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>*</operator><name>w32</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"smach://%d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>_plugin</name> <operator>=</operator> <call><name>r_io_plugin_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>uri</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_plugin</name> <operator>||</operator> <operator>!</operator><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name> <operator>||</operator> <operator>!</operator><name><name>_plugin</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"ptrace://%d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_plugin</name> <operator>=</operator> <call><name>r_io_plugin_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>uri</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_plugin</name> <operator>||</operator> <operator>!</operator><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"attach://%d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_plugin</name> <operator>=</operator> <call><name>r_io_plugin_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>uri</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_plugin</name> <operator>||</operator> <operator>!</operator><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>_plugin</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>w32</name> <init>= <expr><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><name><name>ret</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator><operator>-&gt;</operator><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>*</operator><name>w32</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>plugin</name></name> <operator>=</operator> <name>_plugin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>referer</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name> <parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"something went wrong\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"trying to close %d with io_debug\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_sys_backtrace</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_debug</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"debug"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Attach to native debugger instance"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"dbg://,pidof://,waitfor://"</literal></expr>,
<expr><operator>.</operator><name>author</name> <operator>=</operator> <literal type="string">"pancake"</literal></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="string">"0.2.0"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>isdbg</name> <operator>=</operator> <name>true</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_debug</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"debug"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Debug a program or pid. (NOT SUPPORTED FOR THIS PLATFORM)"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_debug</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
