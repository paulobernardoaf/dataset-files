<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_mach.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>&amp;&amp;</operator> <name>DEBUGGER</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__get_pid</name> <parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXCEPTION_PORT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/exception_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_host.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/host_priv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_traps.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/processor_set.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_act.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/thread_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/vm_map.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/loader.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/nlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACH_ERROR_STRING</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mach_error_string (ret) ? mach_error_string (ret) : "(unknown)")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MACH_MAGIC</name></cpp:macro> <cpp:value>r_str_hash ("mach")</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOMach</name>;</typedef>





<function><type><name>int</name></type> <name>RIOMACH_TASK</name><parameter_list>(<parameter><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_IO_NFDS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IO_NFDS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>task_t</name></type> <name>task_for_pid_workaround</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>host_t</name></type> <name>myhost</name> <init>= <expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>psDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>psDefault_control</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_array_t</name></type> <name>tasks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>numTasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MACH_PORT_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>processor_set_default</name> <argument_list>(<argument><expr><name>myhost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>MACH_PORT_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>host_processor_set_priv</name> <argument_list>(<argument><expr><name>myhost</name></expr></argument>, <argument><expr><name>psDefault</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psDefault_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>MACH_PORT_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>numTasks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>processor_set_tasks</name> <argument_list>(<argument><expr><name>psDefault_control</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numTasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>MACH_PORT_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>tasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTasks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pid_for_task</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>pid2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>tasks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>MACH_PORT_NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>task_t</name></type> <name>task_for_pid_ios9pangu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><name>MACH_PORT_NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>host_get_special_port</name> <argument_list>(<argument><expr><call><name>mach_host_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HOST_LOCAL_NODE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>task_t</name></type> <name>pid_to_task</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>task_t</name></type> <name>old_task</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><ternary><condition><expr><name>fd</name></expr>?</condition><then> <expr><operator>(</operator><name>RIODescData</name> <operator>*</operator><operator>)</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMach</name> <modifier>*</modifier></type><name>riom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iodd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <name><name>iodd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>riom</name> <operator>&amp;&amp;</operator> <name><name>riom</name><operator>-&gt;</operator><name>task</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_task</name> <operator>=</operator> <name><name>riom</name><operator>-&gt;</operator><name>task</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riom</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>old_pid</name> <operator>=</operator> <name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_task</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_pid</name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>old_task</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>old_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"pid_to_task: fail to deallocate port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>task_for_pid</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>pid_t</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>!=</operator> <name>KERN_SUCCESS</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>MACH_PORT_VALID</name> <argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>task_for_pid_workaround</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>MACH_PORT_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>task_for_pid_ios9pangu</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <name>MACH_PORT_NULL</name></expr>)</condition> <block>{<block_content>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>old_task</name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>task_is_dead</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name> <init>= <expr><call><name>mach_port_get_refs</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MACH_PORT_RIGHT_SEND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>the_lower</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>getNextValid</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vm_region_submap_info_64</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>address</name> <init>= <expr><name>MACH_VM_MIN_ADDRESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>vm_size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>osize</name> <init>= <expr><operator>(</operator><name>vm_size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>natural_t</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><call><name>__get_pid</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>lower</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>the_lower</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>the_lower</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>info_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info_count</name> <operator>=</operator> <name>VM_REGION_SUBMAP_INFO_COUNT_64</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>vm_region_recurse_64</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_region_recurse_info_t</name><operator>)</operator> <operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lower</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lower</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>is_submap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>address</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>address</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>address</name> <operator>&lt;</operator> <name>lower</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lower</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>the_lower</name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
<return>return <expr><name>lower</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>copied</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>dd</name> <init>= <expr><operator>(</operator><name>RIODescData</name> <operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>dd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dd</name> <operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <call><name>r_str_hash</name> <argument_list>(<argument><expr><literal type="string">"mach"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>__get_pid</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>task_is_dead</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>copied</name> <operator>=</operator> <call><name>getNextValid</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copied</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copied</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>copied</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name>copied</name><operator>)</operator></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vm_read_overwrite</name> <argument_list>(<argument><expr><name>task</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>copied</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>,
<argument><expr><operator>(</operator><name>pointer_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name>copied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KERN_PROTECTION_FAILURE</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>KERN_INVALID_ADDRESS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>copied</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>copied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name><operator>+</operator><name>copied</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>copied</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>copied</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>copied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>copied</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>copied</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tsk_getperm</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>vm_address_t</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>vmsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>info_count</name> <init>= <expr><name>VM_REGION_BASIC_INFO_COUNT_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_region_flavor_t</name></type> <name>flavor</name> <init>= <expr><name>VM_REGION_BASIC_INFO_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_region_basic_info_data_64_t</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>vm_region_64</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmsize</name></expr></argument>, <argument><expr><name>flavor</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_region_info_t</name><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>info</name><operator>.</operator><name>protection</name></name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tsk_pagesize</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><call><name>__get_pid</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>vm_size_t</name></type> <name>pagesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>pagesize</name></expr>
?</condition><then> <expr><name>pagesize</name></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator><call><name>host_page_size</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pagesize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>KERN_SUCCESS</name><operator>)</operator></expr>
?</condition><then> <expr><name>pagesize</name></expr> </then><else>: <expr><literal type="number">4096</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vm_address_t</name></type> <name>tsk_getpagebase</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>pagesize</name> <init>= <expr><call><name>tsk_pagesize</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>pagesize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tsk_setperm</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>vm_address_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>vm_protect</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"tsk_setperm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tsk_write</name><parameter_list>(<parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>vm_address_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name> <init>= <expr><call><name>vm_write</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_offset_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>mach_msg_type_number_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mach_write_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>vaddr</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>pageaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>pagesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>operms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>__get_pid</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>task_is_dead</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pageaddr</name> <operator>=</operator> <call><name>tsk_getpagebase</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pagesize</name> <operator>=</operator> <call><name>tsk_pagesize</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <name>pagesize</name><operator>)</operator></expr>
?</condition><then> <expr><name>pagesize</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>len</name> <operator>/</operator> <name>pagesize</name><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><name>pagesize</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tsk_write</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>operms</name> <operator>=</operator> <call><name>tsk_getperm</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>pageaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsk_setperm</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>pageaddr</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>, <argument><expr><name>VM_PROT_READ</name> <operator>|</operator> <name>VM_PROT_WRITE</name> <operator>|</operator> <name>VM_PROT_COPY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"io.mach: Cannot set page perms for %d byte(s) at 0x%08"</literal>
<name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pagesize</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>pageaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsk_write</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"io.mach: Cannot write on memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>operms</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsk_setperm</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>pageaddr</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>, <argument><expr><name>operms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"io.mach: Cannot restore page perms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>mach_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"attach://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"mach://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMach</name> <modifier>*</modifier></type><name>riom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>file</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pidfile</name> <operator>=</operator> <name>file</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name> <argument_list>(<argument><expr><name>pidfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>pidfile</name> <operator>||</operator> <name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>pid_to_task</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"smach://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Child killed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



if (pid &gt; 0 &amp;&amp; io-&gt;referer &amp;&amp; !strncmp (io-&gt;referer, "dbg://", 6)) {
eprintf ("Child killed\n");
kill (pid, SIGKILL);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EPERM</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Operation not permitted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EINVAL</name></expr>:</case>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace: Cannot attach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Possibly unsigned r2. Please see doc/macos.md\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERRNO: %d (EINVAL)\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unknown error in debug_attach\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIODescData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iodd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOMach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>riom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>iodd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>riom</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <call><name>r_str_hash</name> <argument_list>(<argument><expr><literal type="string">"mach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>riom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pidpath</name> <operator>=</operator> <ternary><condition><expr><name>pid</name></expr>
?</condition><then> <expr><call><name>r_sys_pid_to_path</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"kernel"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"smach://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_mach</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>rw</name> <operator>|</operator> <name>R_PERM_X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>iodd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_mach</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>rw</name> <operator>|</operator> <name>R_PERM_X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>iodd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>pidpath</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_IO_SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_IO_SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_IO_SEEK_END</name></expr>:</case>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>ST64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iodd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iodd</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>R_MACH_MAGIC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"__close io_mach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kr</name> <operator>==</operator> <name>KERN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__system</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iodd</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>R_MACH_MAGIC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>iodd</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"perm"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>perm</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pagesize</name> <init>= <expr><call><name>tsk_pagesize</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tsk_setperm</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: =!perm [rwx]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMach</name> <modifier>*</modifier></type><name>riom</name> <init>= <expr><name><name>iodd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidstr</name> <init>= <expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pidstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>__get_pid</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pidstr</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>pidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>riom</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iodd</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"io_mach_system: Invalid pid %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Try: '=!pid' or '=!perm'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__get_pid</name> <parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODescData</name> <modifier>*</modifier></type><name>iodd</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iodd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iodd</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>R_MACH_MAGIC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>iodd</name><operator>-&gt;</operator><name>pid</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_mach</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mach"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Attach to mach debugger instance"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"attach://,mach://,smach://"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>getpid</name> <operator>=</operator> <name>__get_pid</name></expr>,
<expr><operator>.</operator><name>gettid</name> <operator>=</operator> <name>__get_pid</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>system</name> <operator>=</operator> <name>__system</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
<expr><operator>.</operator><name>isdbg</name> <operator>=</operator> <name>true</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_mach</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mach"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"mach debug io (unsupported in this platform)"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_mach</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
