<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_bfdbg.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_API</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../debug/p/bfvm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../debug/p/bfvm.c"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>bfvm</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOBfdbg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOBFDBG_FD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOBfdbg*)(x)-&gt;data)-&gt;fd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOBFDBG_SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOBfdbg*)(x)-&gt;data)-&gt;size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOBFDBG_BUF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOBfdbg*)(x)-&gt;data)-&gt;buf)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_in_screen</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>screen</name></name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>screen</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>screen_size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_in_input</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>input</name></name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>input</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>input_size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_in_base</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOBfdbg</name> <modifier>*</modifier></type><name>riom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_base</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>mem</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_screen</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_size</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_buf</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_input</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_size</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_buf</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>RIOBFDBG_SZ</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>count</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>RIOBFDBG_BUF</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>+</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOBfdbg</name> <modifier>*</modifier></type><name>riom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_base</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>mem</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_screen</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_size</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_buf</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_input</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name><operator>-</operator><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_size</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_buf</name></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>RIOBFDBG_SZ</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>count</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>RIOBFDBG_BUF</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>+</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOBfdbg</name> <modifier>*</modifier></type><name>riom</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfvm_free</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case> <return>return <expr><name>offset</name></expr>;</return>
<case>case <expr><name>SEEK_CUR</name></expr>:</case> <return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>offset</name></expr>;</return>
<case>case <expr><name>SEEK_END</name></expr>:</case> <return>return <expr><call><name>RIOBFDBG_SZ</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"bfdbg://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>getmalfd</name> <parameter_list>(<parameter><decl><type><name>RIOBfdbg</name> <modifier>*</modifier></type><name>mal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0xffff</literal> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIOBind</name></type> <name>iob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOBfdbg</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOBfdbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>getmalfd</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>bfvm</name></name> <operator>=</operator> <call><name>bfvm_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mal</name><operator>-&gt;</operator><name>bfvm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>pathname</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name> <operator>||</operator> <name>rlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>rlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_bfdbg</name></expr></argument>,
<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate (%s) %"</literal><name>PFMT32u</name><literal type="string">" byte(s)\n"</literal></expr></argument>,
<argument><expr><name>pathname</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_bfdbg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bfdbg"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Attach to brainFuck Debugger instance"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"bfdbg://"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_bfdbg</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
