<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_w32dbg.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32dbg_wrap.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOW32DBG_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOW32Dbg*)x-&gt;data)-&gt;pi.dwProcessId)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_IO_NFDS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IO_NFDS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__find_next_valid_addr</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>page_size</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>from</name> <operator>+</operator> <name>page_size</name><operator>)</operator> <operator>/</operator> <name>page_size</name><operator>)</operator> <operator>*</operator> <name>page_size</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>buf</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>from</name> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>page_size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><ternary><condition><expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr> ?</condition><then> <expr><name>from</name></expr> </then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_os_read_at</name><parameter_list>(<parameter><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>page_size</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_PARTIAL_COPY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>valid_addr</name> <init>= <expr><call><name>__find_next_valid_addr</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid_addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>skipped</name> <operator>=</operator> <name>valid_addr</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\xff'</literal></expr></argument>, <argument><expr><name>skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>valid_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>skipped</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_len</name> <init>= <expr><name>len</name> <operator>-</operator> <name>skipped</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totRead</name> <init>= <expr><name>skipped</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>totRead</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_len</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>valid_addr</name> <init>= <expr><call><name>__find_next_valid_addr</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>totRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>valid_addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>skipped</name> <operator>=</operator> <name>valid_addr</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>valid_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\xff'</literal></expr></argument>, <argument><expr><name>skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totRead</name> <operator>+=</operator> <name>skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>totRead</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totRead</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>read_len</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>totRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>debug_os_read_at</name> <argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>w32dbg_write_at</name><parameter_list>(<parameter><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>ret</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><literal type="number">0</literal> <operator>!=</operator> <call><name>WriteProcessMemory</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>len</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>w32dbg_write_at</name> <argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"attach://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"w32dbg://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>r2_OpenThread</name>)<parameter_list>(
<parameter><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl></parameter>,
<parameter><decl><type><name>BOOL</name></type> <name>bInheritHandle</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>dwThreadId</name></decl></parameter>
)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__w32_first_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>THREADENTRY32</name></type> <name>te32</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>te32</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>THREADENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>CreateToolhelp32Snapshot</name> <argument_list>(<argument><expr><name>TH32CS_SNAPTHREAD</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Thread32First</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>te32</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>te32</name><operator>.</operator><name>th32OwnerProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r2_OpenThread</name> <operator>=</operator> <name>OpenThread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thid</name> <operator>=</operator> <ternary><condition><expr><name>r2_OpenThread</name></expr>
?</condition><then> <expr><call><name>r2_OpenThread</name> <argument_list>(<argument><expr><name>THREAD_ALL_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>te32</name><operator>.</operator><name>th32ThreadID</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_first_thread/OpenThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_first_th</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>te32</name><operator>.</operator><name>th32ThreadID</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>Thread32Next</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>te32</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<label><name>err_first_th</name>:</label>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not find an active thread for pid %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__open_proc</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>attach</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DEBUG_EVENT</name></type> <name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_proc</name> <init>= <expr><call><name>OpenProcess</name> <argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h_proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__open_proc/OpenProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>att_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name> <operator>=</operator> <call><name>w32dbg_wrap_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attach</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_ATTACH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__open_proc/DebugActiveProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>att_exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_WAIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>wait_time</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>de</name></name> <operator>=</operator> <operator>&amp;</operator><name>de</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__open_proc/WaitForDebugEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>att_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name> <operator>!=</operator> <name>CREATE_PROCESS_DEBUG_EVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"exception code 0x%04x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>att_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>winbase</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>lpBaseOfImage</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>inst</name></name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name>h_proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
<label><name>att_exit</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h_proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>h_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOW32Dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>file</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__open_proc</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"attach://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>=</operator> <call><name>__w32_first_thread</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <call><name>OpenThread</name> <argument_list>(<argument><expr><name>THREAD_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_w32dbg</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>rw</name> <operator>|</operator> <name>R_PERM_X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_sys_pid_to_path</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>iop</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_DETTACH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name><name>iop</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__system</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>iop</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>!=</operator> <name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>&amp;&amp;</operator> <name>pid</name> <operator>!=</operator> <name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <call><name>OpenThread</name> <argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot attach to %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>iop</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Try: '=!pid'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__getpid</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>iow</name> <init>= <expr><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>fd</name></expr> ?</condition><then> <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iow</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>iow</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__gettid</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>iow</name> <init>= <expr><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>fd</name></expr> ?</condition><then> <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>iow</name></expr>?</condition><then> <expr><name><name>iow</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__getbase</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>iow</name> <init>= <expr><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>fd</name></expr> ?</condition><then> <expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&amp;&amp;</operator> <name>iow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>base</name> <operator>=</operator> <name><name>iow</name><operator>-&gt;</operator><name>winbase</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_w32dbg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"w32dbg"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"w32 debugger io plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"w32dbg://,attach://"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>system</name> <operator>=</operator> <name>__system</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
<expr><operator>.</operator><name>getpid</name> <operator>=</operator> <name>__getpid</name></expr>,
<expr><operator>.</operator><name>gettid</name> <operator>=</operator> <name>__gettid</name></expr>,
<expr><operator>.</operator><name>getbase</name> <operator>=</operator> <name>__getbase</name></expr>,
<expr><operator>.</operator><name>isdbg</name> <operator>=</operator> <name>true</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_w32dbg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_w32dbg</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
