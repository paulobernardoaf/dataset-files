<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_zip.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zip.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><enum>enum <block>{
<decl><name>R_IO_PARENT_ZIP</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>R_IO_CHILD_FILE</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>R_IO_NEW_FILE</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>R_IO_EXISTING_FILE</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>R_IO_MODIFIED_FILE</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>R_IO_DELETED_FILE</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,
}</block></enum></type> <name>R_IO_ZIP_ARCHIVE_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_io_zip_uri_const_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOZipConstURI</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIOZipConstURI</name></type> <name><name>ZIP_URIS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"zip://"</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"apk://"</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ipa://"</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"jar://"</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIOZipConstURI</name></type> <name><name>ZIP_ALL_URIS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"zipall://"</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"apkall://"</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ipaall://"</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"jarall://"</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>r_io_zfo_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>archivename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>encryption_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type> <name>io_backref</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOZipFileObj</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_has_uri_substr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>file</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_check_uri_many</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_io_zip_has_uri_substr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ZIP_ALL_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>ZIP_ALL_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>ZIP_ALL_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>file</name><index>[<expr><name><name>ZIP_ALL_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_check_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_io_zip_has_uri_substr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ZIP_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>ZIP_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>ZIP_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>file</name><index>[<expr><name><name>ZIP_URIS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_io_zip_plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>many</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_io_zip_check_uri_many</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_io_zip_check_uri</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type><name>r_io_zip_open_archive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archivename</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type> <name>zipArch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zip_errorp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>archivename</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>zipArch</name> <operator>=</operator> <call><name>zip_open</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zip_errorp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>zipArch</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_INVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: Invalid file name (NULL).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_OPEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: File could not be opened file name.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_NOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: File does not exist.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: Read error occurred.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_NOZIP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: File is not a valid ZIP archive.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zip_errorp</name> <operator>==</operator> <name>ZIP_ER_INCONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: ZIP file had some inconsistencies archive.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ZIP File Error: Something bad happened, get your debug on.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_slurp_file</name><parameter_list>(<parameter><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_file</name></name> <modifier>*</modifier></type><name>zFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type><name>zipArch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zfo</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zipArch</name> <operator>=</operator> <call><name>r_io_zip_open_archive</name> <argument_list>(
<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>archivename</name></name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>,
<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zipArch</name> <operator>&amp;&amp;</operator> <name>zfo</name> <operator>&amp;&amp;</operator> <name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>zip_fopen_index</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zip_stat_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zFile</name> <operator>&amp;&amp;</operator> <name><name>zfo</name><operator>-&gt;</operator><name>b</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>zip_stat_index</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zip_fread</name> <argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>opened</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zip_fclose</name> <argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type> <name>r_io_zip_get_files</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>archivename</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type><name>zipArch</name> <init>= <expr><call><name>r_io_zip_open_archive</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>num_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zipArch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>files</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_entries</name> <operator>=</operator> <call><name>zip_get_num_files</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zip_stat_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zip_stat_index</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>files</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_io_zip_flush_file</name><parameter_list>(<parameter><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type> <name>zipArch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zfo</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zipArch</name> <operator>=</operator> <call><name>r_io_zip_open_archive</name> <argument_list>(
<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>archivename</name></name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zipArch</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_source</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>zip_source_buffer</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>zip_replace</name><argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>zip_add</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>zip_name_locate</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zip_source_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_io_zip_free_zipfileobj</name><parameter_list>(<parameter><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zfo</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zfo</name><operator>-&gt;</operator><name>modified</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_zip_flush_file</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>r_io_zip_create_new_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archivename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>zip_stat</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOZipFileObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>archivename</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>sb</name></expr>?</condition><then> <expr><name><name>sb</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><name>filename</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>sb</name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><name><name>sb</name><operator>-&gt;</operator><name>index</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>rw</name></name> <operator>=</operator> <name>rw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>zfo</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RIOZipFileObj</name><modifier>*</modifier></type> <name>r_io_zip_alloc_zipfileobj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archivename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type><name>zipArch</name> <init>= <expr><call><name>r_io_zip_open_archive</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zipArch</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_entries</name> <operator>=</operator> <call><name>zip_get_num_files</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zip_stat_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zip_stat_index</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <call><name>r_io_zip_create_new_file</name> <argument_list>(
<argument><expr><name>archivename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>,
<argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_zip_slurp_file</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <call><name>r_io_zip_create_new_file</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>zfo</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_io_zip_open_many</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list_fds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>filenames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename_in_zipfile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zip_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zip_uri</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_zip_plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zip_uri</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zip_uri</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>zip_uri</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zip_filename</name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>
<name><name>zip_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>zip_filename</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>zip_filename</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>filenames</name> <operator>=</operator> <call><name>r_io_zip_get_files</name><argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filenames</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list_fds</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>filenames</argument>, <argument>iter</argument>, <argument>filename_in_zipfile</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filename_in_zipfile</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zfo</name> <operator>=</operator> <call><name>r_io_zip_alloc_zipfileobj</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>,
<argument><expr><name>filename_in_zipfile</name></expr></argument>, <argument><expr><name>ZIP_CREATE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zfo</name> <operator>&amp;&amp;</operator> <name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: File did not exist, creating a new one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>io_backref</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_zip</name></expr></argument>,
<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list_fds</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zip_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>filenames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list_fds</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>r_io_zip_get_by_file_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>archivename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>file_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip_stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zip</name></name> <modifier>*</modifier></type> <name>zipArch</name> <init>= <expr><call><name>r_io_zip_open_archive</name> <argument_list>(<argument><expr><name>archivename</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name> <operator>||</operator> <operator>!</operator><name>zipArch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filename</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_entries</name> <operator>=</operator> <call><name>zip_get_num_files</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_idx</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>file_idx</name> <operator>&gt;=</operator> <name>num_entries</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filename</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zip_stat_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zip_stat_index</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_idx</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zip_close</name> <argument_list>(<argument><expr><name>zipArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filename</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>r_io_zip_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pikaboo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zip_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zip_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filename_in_zipfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_zip_plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zip_uri</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zip_uri</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pikaboo</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pikaboo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zip_filename</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>, <argument><expr><literal type="string">"apk://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"//%s//classes.dex"</literal></expr></argument>, <argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>, <argument><expr><literal type="string">"ipa://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>r_io_zip_get_files</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>files</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>name</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bin_name</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".app/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bin_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>bin_name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin_name</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>bin_name</name> <operator>-</operator> <name>slash</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chkstr</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Payload/%s.app/%s"</literal></expr></argument>, <argument><expr><name>bin_name</name></expr></argument>, <argument><expr><name>bin_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>chkstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"//%s"</literal></expr></argument>, <argument><expr><name>chkstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>chkstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>chkstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>zip_filename</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zip_filename</name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>
<name><name>zip_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zip_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>zip_filename</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>zip_filename</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name>filename_in_zipfile</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>filename_in_zipfile</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>filename_in_zipfile</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>filename_in_zipfile</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_in_zipfile</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>filename_in_zipfile</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>filename_in_zipfile</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>filename_in_zipfile</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>filename_in_zipfile</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_in_zipfile</name> <operator>=</operator> <call><name>r_io_zip_get_by_file_idx</name> <argument_list>(
<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><name>filename_in_zipfile</name></expr></argument>,
<argument><expr><name>ZIP_CREATE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>filename_in_zipfile</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zip_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zip_filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pikaboo</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zip_filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"usage: zip:///path/to/archive//filepath\n"</literal>
<literal type="string">"usage: zip:///path/to/archive::[number]\n"</literal>
<literal type="string">"Archive was not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename_in_zipfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>r_io_zip_get_files</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>files</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>name</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>zfo</name> <operator>=</operator> <call><name>r_io_zip_alloc_zipfileobj</name> <argument_list>(<argument><expr><name>zip_filename</name></expr></argument>,
<argument><expr><name>filename_in_zipfile</name></expr></argument>, <argument><expr><name>ZIP_CREATE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zfo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zfo</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: File did not exist, creating a new one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>io_backref</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_zip</name></expr></argument>,
<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open the archive %s and file %s\n"</literal></expr></argument>,
<argument><expr><name>zip_filename</name></expr></argument>, <argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_desc_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename_in_zipfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zip_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_io_zip_lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>seek_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>seek_val</name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name>seek_val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>offset</name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>offset</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>seek_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>seek_val</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>seek_val</name></expr>;</return>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>seek_val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>offset</name> <operator>+</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>seek_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>seek_val</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>seek_val</name></expr>;</return>
<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>seek_val</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>seek_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>seek_val</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>seek_val</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>seek_val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_realloc_buf</name><parameter_list>(<parameter><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_io_zip_truncate_buf</name><parameter_list>(<parameter><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>size</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_io_zip_resize</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_io_zip_truncate_buf</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>modified</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_zip_flush_file</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>zfo</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_zip_realloc_buf</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zfo</name><operator>-&gt;</operator><name>modified</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>zfo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_io_zip_flush_file</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_io_zip_close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOZipFileObj</name> <modifier>*</modifier></type><name>zfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_zip_free_zipfileobj</name> <argument_list>(<argument><expr><name>zfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zfo</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_zip</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"zip"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Open zip files"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"zip://,apk://,ipa://,jar://,zipall://,apkall://,ipaall://,jarall://"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>r_io_zip_open</name></expr>,
<expr><operator>.</operator><name>open_many</name> <operator>=</operator> <name>r_io_zip_open_many</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>r_io_zip_write</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>r_io_zip_read</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>r_io_zip_close</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>r_io_zip_lseek</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>r_io_zip_plugin_open</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>r_io_zip_resize</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_zip</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
