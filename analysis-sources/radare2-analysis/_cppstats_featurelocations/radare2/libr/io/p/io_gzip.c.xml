<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_gzip.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOGzip</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>_io_malloc_sz</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>mal</name></expr>?</condition><then> <expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_io_malloc_set_sz</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name><modifier>*</modifier></type> <name>_io_malloc_buf</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name><modifier>*</modifier></type> <name>_io_malloc_set_buf</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>_io_malloc_off</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mal</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_io_malloc_set_off</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><operator>(</operator><name>RIOGzip</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name>buf</name> <operator>||</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <operator>(</operator><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name> <operator>-</operator><call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>_io_malloc_buf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_io_malloc_set_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__resize</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>new_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mallocsz</name> <init>= <expr><call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>mallocsz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>new_buf</name></expr></argument>, <argument><expr><call><name>_io_malloc_buf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>mallocsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>mallocsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new_buf</name> <operator>+</operator> <name>mallocsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>mallocsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>_io_malloc_buf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_io_malloc_set_buf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>new_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_io_malloc_set_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mallocsz</name> <init>= <expr><call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>mallocsz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name> <operator>&gt;=</operator> <name>mallocsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>mallocsz</name> <operator>-</operator> <call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_io_malloc_buf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>riom</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>riom</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>riom</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Writing changes into gzipped files is not yet supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>r_offset</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mallocsz</name> <init>= <expr><call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name>r_offset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&lt;=</operator> <name>mallocsz</name><operator>)</operator></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><name>mallocsz</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>r_offset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name> <operator>&lt;=</operator> <name>mallocsz</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>_io_malloc_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr> </then><else>: <expr><name>mallocsz</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>r_offset</name> <operator>=</operator> <call><name>_io_malloc_sz</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>_io_malloc_set_off</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>r_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r_offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"gzip://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIOGzip</name> <modifier>*</modifier></type><name>mal</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOGzip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>pathname</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mal</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_inflate</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mal</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_gzip</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate (%s) %d byte(s)\n"</literal></expr></argument>, <argument><expr><name>pathname</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>mal</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_gzip</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"gzip"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Read/write gzipped files"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"gzip://"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,
<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,
<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>__resize</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_gzip</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
