<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p\io_r2k_windows.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IO_R2k_WINDOWS_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IO_R2k_WINDOWS_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hnd</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIOW32</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_PPA</name> <block>{
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>PA</name><operator>,</operator> * <name>PPA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RTL_PROCESS_MODULE_INFORMATION</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>Section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>MappedBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>ImageBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ImageSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>LoadOrderIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>InitOrderIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>LoadCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>OffsetToFileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>FullPathName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RTL_PROCESS_MODULE_INFORMATION</name><operator>,</operator> *<name>PRTL_PROCESS_MODULE_INFORMATION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RTL_PROCESS_MODULES</name> <block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>NumberOfModules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTL_PROCESS_MODULE_INFORMATION</name></type> <name><name>Modules</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RTL_PROCESS_MODULES</name><operator>,</operator> *<name>PRTL_PROCESS_MODULES</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2K_DEVICE</name></cpp:macro> <cpp:value>"\\\\.\\r2k\\"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_CODE</name><parameter_list>(<parameter><type><name>DeviceType</name></type></parameter>, <parameter><type><name>Function</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><name>Access</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((DeviceType) &lt;&lt; 16) | ((Access) &lt;&lt; 14) | ((Function) &lt;&lt; 2) | (Method))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
FILE_DEVICE_UNKNOWN 0x22
FILE_READ_ACCESS 1
FILE_WRITE_ACCESS 2
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOSE_DRIVER</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x803, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_READ_PHYS_MEM</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x807, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_READ_KERNEL_MEM</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x804, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_WRITE_KERNEL_MEM</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x805, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_GET_PHYSADDR</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x809, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_WRITE_PHYS_MEM</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x808, 0, 1 | 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_GET_SYSTEM_MODULES</name></cpp:macro> <cpp:value>IOCTL_CODE(0x22, 0x80a, 0, 1 | 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>HANDLE</name></type> <name>gHandleDriver</name></decl>;</decl_stmt>

<function_decl><type><name>BOOL</name></type> <name>StartStopService</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>lpServiceName</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bStop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetSystemModules</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ReadKernelMemory</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>WriteKernelMemory</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Init</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>driverPath</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
