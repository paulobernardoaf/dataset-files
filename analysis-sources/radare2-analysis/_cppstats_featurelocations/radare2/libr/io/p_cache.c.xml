<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\io\p_cache.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name><name>cleanup_masks</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000000000000001</literal></expr>,
<expr><literal type="number">0x0000000000000003</literal></expr>,
<expr><literal type="number">0x0000000000000007</literal></expr>,
<expr><literal type="number">0x000000000000000f</literal></expr>,
<expr><literal type="number">0x000000000000001f</literal></expr>,
<expr><literal type="number">0x000000000000003f</literal></expr>,
<expr><literal type="number">0x000000000000007f</literal></expr>,
<expr><literal type="number">0x00000000000000ff</literal></expr>,
<expr><literal type="number">0x00000000000001ff</literal></expr>,
<expr><literal type="number">0x00000000000003ff</literal></expr>,
<expr><literal type="number">0x00000000000007ff</literal></expr>,
<expr><literal type="number">0x0000000000000fff</literal></expr>,
<expr><literal type="number">0x0000000000001fff</literal></expr>,
<expr><literal type="number">0x0000000000003fff</literal></expr>,
<expr><literal type="number">0x0000000000007fff</literal></expr>,
<expr><literal type="number">0x000000000000ffff</literal></expr>,
<expr><literal type="number">0x000000000001ffff</literal></expr>,
<expr><literal type="number">0x000000000003ffff</literal></expr>,
<expr><literal type="number">0x000000000007ffff</literal></expr>,
<expr><literal type="number">0x00000000000fffff</literal></expr>,
<expr><literal type="number">0x00000000001fffff</literal></expr>,
<expr><literal type="number">0x00000000003fffff</literal></expr>,
<expr><literal type="number">0x00000000007fffff</literal></expr>,
<expr><literal type="number">0x0000000000ffffff</literal></expr>,
<expr><literal type="number">0x0000000001ffffff</literal></expr>,
<expr><literal type="number">0x0000000003ffffff</literal></expr>,
<expr><literal type="number">0x0000000007ffffff</literal></expr>,
<expr><literal type="number">0x000000000fffffff</literal></expr>,
<expr><literal type="number">0x000000001fffffff</literal></expr>,
<expr><literal type="number">0x000000003fffffff</literal></expr>,
<expr><literal type="number">0x000000007fffffff</literal></expr>,
<expr><literal type="number">0x00000000ffffffff</literal></expr>,
<expr><literal type="number">0x00000001ffffffff</literal></expr>,
<expr><literal type="number">0x00000003ffffffff</literal></expr>,
<expr><literal type="number">0x00000007ffffffff</literal></expr>,
<expr><literal type="number">0x0000000fffffffff</literal></expr>,
<expr><literal type="number">0x0000001fffffffff</literal></expr>,
<expr><literal type="number">0x0000003fffffffff</literal></expr>,
<expr><literal type="number">0x0000007fffffffff</literal></expr>,
<expr><literal type="number">0x000000ffffffffff</literal></expr>,
<expr><literal type="number">0x000001ffffffffff</literal></expr>,
<expr><literal type="number">0x000003ffffffffff</literal></expr>,
<expr><literal type="number">0x000007ffffffffff</literal></expr>,
<expr><literal type="number">0x00000fffffffffff</literal></expr>,
<expr><literal type="number">0x00001fffffffffff</literal></expr>,
<expr><literal type="number">0x00003fffffffffff</literal></expr>,
<expr><literal type="number">0x00007fffffffffff</literal></expr>,
<expr><literal type="number">0x0000ffffffffffff</literal></expr>,
<expr><literal type="number">0x0001ffffffffffff</literal></expr>,
<expr><literal type="number">0x0003ffffffffffff</literal></expr>,
<expr><literal type="number">0x0007ffffffffffff</literal></expr>,
<expr><literal type="number">0x000fffffffffffff</literal></expr>,
<expr><literal type="number">0x001fffffffffffff</literal></expr>,
<expr><literal type="number">0x003fffffffffffff</literal></expr>,
<expr><literal type="number">0x007fffffffffffff</literal></expr>,
<expr><literal type="number">0x00ffffffffffffff</literal></expr>,
<expr><literal type="number">0x01ffffffffffffff</literal></expr>,
<expr><literal type="number">0x03ffffffffffffff</literal></expr>,
<expr><literal type="number">0x07ffffffffffffff</literal></expr>,
<expr><literal type="number">0x0fffffffffffffff</literal></expr>,
<expr><literal type="number">0x1fffffffffffffff</literal></expr>,
<expr><literal type="number">0x3fffffffffffffff</literal></expr>,
<expr><literal type="number">0x7fffffffffffffff</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_desc_cache_init</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_desc_cache_write</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>caddr</name></decl>, <decl><type ref="prev"/><name>desc_sz</name> <init>= <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbaddr</name></decl>, <decl><type ref="prev"/><name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name>desc</name> <operator>||</operator> <operator>(</operator><name>desc_sz</name> <operator>&lt;=</operator> <name>paddr</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_io_desc_cache_init</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>desc_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>desc_sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>&gt;</operator> <operator>(</operator><name>desc_sz</name> <operator>-</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>desc_sz</name> <operator>-</operator> <name>paddr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>caddr</name> <operator>=</operator> <name>paddr</name> <operator>/</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name> <operator>=</operator> <name>paddr</name> <operator>%</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>written</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><name>caddr</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cache</name> <operator>=</operator> <operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIODescCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>-</operator> <name>written</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cbaddr</name> <operator>&lt;</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>cbaddr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>cbaddr</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cached</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1ULL</literal> <operator>&lt;&lt;</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<do>do <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>cbaddr</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cached</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1ULL</literal> <operator>&lt;&lt;</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>written</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>caddr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_desc_cache_read</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>caddr</name></decl>, <decl><type ref="prev"/><name>desc_sz</name> <init>= <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbaddr</name></decl>, <decl><type ref="prev"/><name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name>desc</name> <operator>||</operator> <operator>(</operator><name>desc_sz</name> <operator>&lt;=</operator> <name>paddr</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>desc_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>desc_sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>&gt;</operator> <operator>(</operator><name>desc_sz</name> <operator>-</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>desc_sz</name> <operator>-</operator> <name>paddr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>caddr</name> <operator>=</operator> <name>paddr</name> <operator>/</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name> <operator>=</operator> <name>paddr</name> <operator>%</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>amount</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><name>caddr</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cache</name> <operator>=</operator> <operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>-</operator> <name>amount</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <operator>(</operator><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>cbaddr</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>cbaddr</name> <operator>&lt;</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>cbaddr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1ULL</literal> <operator>&lt;&lt;</operator> <name>cbaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>cbaddr</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1ULL</literal> <operator>&lt;&lt;</operator> <name>cbaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>cbaddr</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>amount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>amount</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><name>caddr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cbaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>amount</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__riocache_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RIOCache</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__desc_cache_list_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>writes</name> <init>= <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>dcache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>blockaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteaddr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>writes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dcache</name> <operator>=</operator> <operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dcache</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blockaddr</name> <operator>=</operator> <call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>byteaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byteaddr</name> <operator>&lt;</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>byteaddr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dcache</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1LL</literal> <operator>&lt;&lt;</operator> <name>byteaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>byteaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>blockaddr</name> <operator>+</operator> <name>byteaddr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dcache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>byteaddr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__riocache_free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>writes</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
cache-&gt;size = i;
cache-&gt;to = blockaddr + R_IO_DESC_CACHE_SIZE;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>writes</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_io_desc_cache_list</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>writes</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>__riocache_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>writes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>__desc_cache_list_cb</name></expr></argument>, <argument><expr><name>writes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOCache</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>writes</argument>, <argument>iter</argument>, <argument>c</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>itvSize</name> <init>= <expr><call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>odata</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>itvSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>odata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>writes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>odata</name></name></expr></argument>, <argument><expr><name>itvSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>writes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__desc_cache_commit_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>RIODesc</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>blockaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteaddr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>R_IO_DESC_CACHE_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>dcache</name> <init>= <expr><operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dcache</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blockaddr</name> <operator>=</operator> <name>R_IO_DESC_CACHE_SIZE</name> <operator>*</operator> <call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>byteaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byteaddr</name> <operator>&lt;</operator> <name>R_IO_DESC_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>byteaddr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dcache</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1LL</literal> <operator>&lt;&lt;</operator> <name>byteaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dcache</name><operator>-&gt;</operator><name>cdata</name><index>[<expr><name>byteaddr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>blockaddr</name> <operator>+</operator> <name>byteaddr</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>blockaddr</name> <operator>+</operator> <name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_desc_cache_commit</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>files</name></name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>__desc_cache_commit_cb</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__desc_cache_cleanup_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>RIODesc</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>blockaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteaddr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blockaddr</name> <operator>=</operator> <name>R_IO_DESC_CACHE_SIZE</name> <operator>*</operator> <call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>blockaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><name>blockaddr</name> <operator>+</operator> <name>R_IO_DESC_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byteaddr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>blockaddr</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;=</operator> <name><name>cleanup_masks</name><index>[<expr><name>byteaddr</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_desc_cache_cleanup</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>__desc_cache_cleanup_cb</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__desc_cache_free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODescCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RIODescCache</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__desc_fini_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>RIODesc</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>__desc_cache_free_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_desc_cache_fini</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__desc_fini_cb</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_desc_cache_fini_all</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_id_storage_foreach</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>__desc_fini_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
