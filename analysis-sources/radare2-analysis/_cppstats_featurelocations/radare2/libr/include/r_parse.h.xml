<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_parse.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PARSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_PARSE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>RList</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RAnalVarList</name>)<parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_parse_t</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>flagspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>notin_flagspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>regsub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>relsub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>tailsub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>localvar_only</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>relsub_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxflagnamelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retleave_asm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_parse_plugin_t</name></name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>parsers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVarList</name></type> <name>varlist</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_ptr_at</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>get_op_ireg</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>RAnalBind</name></type> <name>analb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagGetAtAddr</name></type> <name>flag_get</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RAnalLabelAt</name></type> <name>label_get</name></decl>;</decl_stmt>
}</block></struct></type> <name>RParse</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_parse_plugin_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fini</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>assemble</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>varsub</name>)<parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>replace</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>RParsePlugin</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function_decl><type><name>R_API</name> <name><name>struct</name> <name>r_parse_t</name></name> <modifier>*</modifier></type><name>r_parse_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_parse_free</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_parse_set_user_ptr</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_add</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RParsePlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_use</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_assemble</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_filter</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_parse_varsub</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_parse_immtrim</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opstr</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_parse_c_string</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_parse_c_file</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_parse_c_reset</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><name><name>struct</name> <name>r_parse_ctype_t</name></name></type> <name>RParseCType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></decl>,
<decl><name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></decl>,
<decl><name>R_PARSE_CTYPE_TYPE_KIND_ARRAY</name></decl>
}</block></enum></type> <name>RParseCTypeTypeKind</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNSPECIFIED</name></decl>,
<decl><name>R_PARSE_CTYPE_IDENTIFIER_KIND_STRUCT</name></decl>,
<decl><name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNION</name></decl>,
<decl><name>R_PARSE_CTYPE_IDENTIFIER_KIND_ENUM</name></decl>
}</block></enum></type> <name>RParseCTypeTypeIdentifierKind</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>r_parse_ctype_type_t</name></name></type> <name>RParseCTypeType</name>;</typedef>
<struct>struct <name>r_parse_ctype_type_t</name> <block>{
<decl_stmt><decl><type><name>RParseCTypeTypeKind</name></type> <name>kind</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>RParseCTypeTypeIdentifierKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_const</name></decl>;</decl_stmt>
}</block> <decl><name>identifier</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_const</name></decl>;</decl_stmt>
}</block> <decl><name>pointer</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>count</name></decl>;</decl_stmt>
}</block> <decl><name>array</name></decl>;</struct>
}</block>;</union>
}</block>;</struct>

<function_decl><type><name>R_API</name> <name>RParseCType</name> <modifier>*</modifier></type><name>r_parse_ctype_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_parse_ctype_free</name><parameter_list>(<parameter><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RParseCTypeType</name> <modifier>*</modifier></type><name>r_parse_ctype_parse</name><parameter_list>(<parameter><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_parse_ctype_type_free</name><parameter_list>(<parameter><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_6502_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_arm_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_att2intel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_avr_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_chip8_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_dalvik_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_m68k_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_mips_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_ppc_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_sh_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_wasm_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_x86_pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RParsePlugin</name></type> <name>r_parse_plugin_z80_pseudo</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
