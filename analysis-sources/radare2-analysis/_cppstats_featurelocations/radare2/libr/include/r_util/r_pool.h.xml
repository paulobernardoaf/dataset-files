<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_pool.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_POOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_POOL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_mem.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_mem_pool_factory_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RMemoryPool</name> <modifier>*</modifier><modifier>*</modifier></type><name>pools</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPoolFactory</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RPoolFactory</name> <modifier>*</modifier></type><name>r_poolfactory_instance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_poolfactory_init</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RPoolFactory</name><modifier>*</modifier></type> <name>r_poolfactory_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_poolfactory_alloc</name><parameter_list>(<parameter><decl><type><name>RPoolFactory</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodesize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_poolfactory_stats</name><parameter_list>(<parameter><decl><type><name>RPoolFactory</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_poolfactory_free</name><parameter_list>(<parameter><decl><type><name>RPoolFactory</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
