<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_intervaltree.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_INTERVALTREE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_INTERVALTREE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_rbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../r_types.h"</cpp:file></cpp:include>














<typedef>typedef <type><struct>struct <name>r_interval_node_t</name> <block>{
<decl_stmt><decl><type><name>RBNode</name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>max_end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIntervalNode</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RIntervalNodeFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_interval_tree_t</name> <block>{
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIntervalNodeFree</name></type> <name>free</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIntervalTree</name>;</typedef>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_init</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNodeFree</name></type> <name>free</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_fini</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_insert</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_delete</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>free</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_resize</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>new_start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>new_end</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>RBIter</name></type> <name>r_interval_tree_first_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>RIntervalNode</name> <modifier>*</modifier></type><name>r_interval_tree_node_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>RIntervalNode</name> <modifier>*</modifier></type><name>r_interval_tree_node_at_data</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>r_interval_tree_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_interval_tree_node_at</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RIntervalIterCb</name>)<parameter_list>(<parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_in</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_intersect</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_interval_tree_foreach</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_first (&amp;(tree)-&gt;root-&gt;node); r_rbtree_iter_has(&amp;it) &amp;&amp; (dat = r_rbtree_iter_get (&amp;it, RIntervalNode, node)-&gt;data); r_rbtree_iter_next (&amp;(it)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_interval_tree_foreach_prev</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_last (&amp;(tree)-&gt;root-&gt;node); r_rbtree_iter_has(&amp;it) &amp;&amp; (dat = r_rbtree_iter_get (&amp;it, RIntervalNode, node)-&gt;data); r_rbtree_iter_prev (&amp;(it)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
