<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_event.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_EVENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_EVENT_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb/ht_up.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_vector.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>r_event_t</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>incall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVector</name></type> <name>all_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_handle</name></decl>;</decl_stmt>
}</block></struct></type> <name>REvent</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_callback_handle_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventCallbackHandle</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>REventCallback</name>)<parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>R_EVENT_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>R_EVENT_META_SET</name></decl>, 
<decl><name>R_EVENT_META_DEL</name></decl>, 
<decl><name>R_EVENT_META_CLEAR</name></decl>, 
<decl><name>R_EVENT_CLASS_NEW</name></decl>, 
<decl><name>R_EVENT_CLASS_DEL</name></decl>, 
<decl><name>R_EVENT_CLASS_RENAME</name></decl>, 
<decl><name>R_EVENT_CLASS_ATTR_SET</name></decl>, 
<decl><name>R_EVENT_CLASS_ATTR_DEL</name></decl>, 
<decl><name>R_EVENT_CLASS_ATTR_RENAME</name></decl>, 
<decl><name>R_EVENT_DEBUG_PROCESS_FINISHED</name></decl>, 
<decl><name>R_EVENT_MAX</name></decl>,
}</block></enum></type> <name>REventType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_meta_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventMeta</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_class_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventClass</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_class_rename_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_new</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventClassRename</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_class_attr_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventClassAttr</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_class_attr_set_t</name> <block>{
<decl_stmt><decl><type><name>REventClassAttr</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventClassAttrSet</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_class_attr_rename_t</name> <block>{
<decl_stmt><decl><type><name>REventClassAttr</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id_new</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventClassAttrRename</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_event_debug_process_finished_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
}</block></struct></type> <name>REventDebugProcessFinished</name>;</typedef>

<function_decl><type><name>R_API</name> <name>REvent</name> <modifier>*</modifier></type><name>r_event_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_event_free</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>REventCallbackHandle</name></type> <name>r_event_hook</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>REventCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_event_unhook</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>REventCallbackHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_event_send</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
