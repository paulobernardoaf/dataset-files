<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_range.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_RANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_RANGE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_range_tiny_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pairs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>ranges</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRangeTiny</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RRangeTiny</name> <modifier>*</modifier></type><name>r_tinyrange_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_init</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_fini</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_tinyrange_in</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_tinyrange_add</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_tinyrange_free</name><parameter_list>(<parameter><decl><type><name>RRangeTiny</name> <modifier>*</modifier></type><name>bbr</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <type><struct>struct <name>r_range_item_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>datalen</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRangeItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_range_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ranges</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRange</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_new_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_free</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRangeItem</name> <modifier>*</modifier></type><name>r_range_item_get</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_range_size</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_add_from_string</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRangeItem</name> <modifier>*</modifier></type><name>r_range_add</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_sub</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_range_merge</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_contains</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_sort</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_range_percent</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_list</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_get_n</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_inverse</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_range_overlap</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
