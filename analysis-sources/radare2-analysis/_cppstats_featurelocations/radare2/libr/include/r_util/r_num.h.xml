<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_num.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_NUM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NUM_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NUMCALC_STRSZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>RNumCalcValue</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>RNCNAME</name></decl>, <decl><name>RNCNUMBER</name></decl>, <decl><name>RNCEND</name></decl>, <decl><name>RNCINC</name></decl>, <decl><name>RNCDEC</name></decl>,
<decl><name>RNCPLUS</name><init>=<expr><literal type="char">'+'</literal></expr></init></decl>, <decl><name>RNCMINUS</name><init>=<expr><literal type="char">'-'</literal></expr></init></decl>, <decl><name>RNCMUL</name><init>=<expr><literal type="char">'*'</literal></expr></init></decl>, <decl><name>RNCDIV</name><init>=<expr><literal type="char">'/'</literal></expr></init></decl>, <decl><name>RNCMOD</name><init>=<expr><literal type="char">'%'</literal></expr></init></decl>,

<decl><name>RNCNEG</name><init>=<expr><literal type="char">'~'</literal></expr></init></decl>, <decl><name>RNCAND</name><init>=<expr><literal type="char">'&amp;'</literal></expr></init></decl>, <decl><name>RNCORR</name><init>=<expr><literal type="char">'|'</literal></expr></init></decl>, <decl><name>RNCXOR</name><init>=<expr><literal type="char">'^'</literal></expr></init></decl>,
<decl><name>RNCPRINT</name><init>=<expr><literal type="char">';'</literal></expr></init></decl>, <decl><name>RNCASSIGN</name><init>=<expr><literal type="char">'='</literal></expr></init></decl>, <decl><name>RNCLEFTP</name><init>=<expr><literal type="char">'('</literal></expr></init></decl>, <decl><name>RNCRIGHTP</name><init>=<expr><literal type="char">')'</literal></expr></init></decl>,
<decl><name>RNCSHL</name><init>=<expr><literal type="char">'&lt;'</literal></expr></init></decl>, <decl><name>RNCSHR</name> <init>= <expr><literal type="char">'&gt;'</literal></expr></init></decl>, <decl><name>RNCROL</name> <init>= <expr><literal type="char">'#'</literal></expr></init></decl>, <decl><name>RNCROR</name> <init>= <expr><literal type="char">'$'</literal></expr></init></decl>
}</block></enum></type> <name>RNumCalcToken</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_num_calc_t</name> <block>{
<decl_stmt><decl><type><name>RNumCalcToken</name></type> <name>curr_tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>number_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string_value</name><index>[<expr><name>R_NUMCALC_STRSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>oc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>calc_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>calc_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>calc_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>calc_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>under_calc</name></decl>;</decl_stmt>
}</block></struct></type> <name>RNumCalc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_num_t</name> <block>{
<function_decl><type><name>ut64</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_num_t</name></name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>cb_from_value</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_num_t</name></name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RNumCalc</name></type> <name>nc</name></decl>;</decl_stmt>
}</block></struct></type> <name>RNum</name>;</typedef>

<typedef>typedef <function_decl><type><name>ut64</name></type> (<modifier>*</modifier><name>RNumCallback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_num_t</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RNumCallback2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_num_t</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>R_API</name> <name>RNum</name> <modifier>*</modifier></type><name>r_num_new</name><parameter_list>(<parameter><decl><type><name>RNumCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>RNumCallback2</name></type> <name>cb2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_num_free</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_num_units</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_conditional</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_calc</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_num_calc_index</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_chs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cylinder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sectorsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_is_valid_input</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_get_input_value</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_num_get_name</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_num_as_string</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>___</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>printable_only</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_tail</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_tail_base</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_num_minmax_swap</name><parameter_list>(<parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_num_minmax_swap_i</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_math</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_num_get</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_to_bits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_to_trits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_rand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_num_irand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut16</name></type> <name>r_num_ntohs</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>foo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_get_input_num_value</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_is_valid_input_num_value</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_between</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_num_is_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_str_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_num_str_split</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_num_str_split_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_num_dup</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_num_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_num_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_num_get_float</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st64</name></type> <name>r_num_abs</name><parameter_list>(<parameter><decl><type><name>st64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>num</name></expr> </then><else>: <expr><name>num</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
