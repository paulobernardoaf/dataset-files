<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_util\r_graph.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_GRAPH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_GRAPH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_graph_node_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>out_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>in_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>all_neighbours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListFree</name></type> <name>free</name></decl>;</decl_stmt>
}</block></struct></type> <name>RGraphNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_graph_edge_t</name> <block>{
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nth</name></decl>;</decl_stmt>
}</block></struct></type> <name>RGraphEdge</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_graph_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RGraph</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_graph_visitor_t</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>discover_node</name>)<parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_graph_visitor_t</name></name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>finish_node</name>)<parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_graph_visitor_t</name></name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tree_edge</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraphEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_graph_visitor_t</name></name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>back_edge</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraphEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_graph_visitor_t</name></name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fcross_edge</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraphEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_graph_visitor_t</name></name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>RGraphVisitor</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RGraphNodeCallback</name>)<parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RGraphEdgeCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraphEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>R_API</name> <name>RGraph</name> <modifier>*</modifier></type><name>r_graph_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_free</name><parameter_list>(<parameter><decl><type><name>RGraph</name><modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_get_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RListIter</name> <modifier>*</modifier></type><name>r_graph_node_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_reset</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_add_node</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_del_node</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_add_edge</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_add_edge_at</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_node_split_forward</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>split_me</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_del_edge</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_get_neighbours</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_nth_neighbour</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_innodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_all_neighbours</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_get_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_graph_adjacent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs_node</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs_node_reverse</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
