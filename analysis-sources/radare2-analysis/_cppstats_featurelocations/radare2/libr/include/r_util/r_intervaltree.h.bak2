

#ifndef R_INTERVALTREE_H
#define R_INTERVALTREE_H

#include "r_rbtree.h"
#include "../r_types.h"














typedef struct r_interval_node_t {
	RBNode node;
	ut64 start; 
	ut64 end; 
	ut64 max_end; 
	void *data;
} RIntervalNode;

typedef void (*RIntervalNodeFree)(void *data);

typedef struct r_interval_tree_t {
	RIntervalNode *root;
	RIntervalNodeFree free;
} RIntervalTree;

R_API void r_interval_tree_init(RIntervalTree *tree, RIntervalNodeFree free);
R_API void r_interval_tree_fini(RIntervalTree *tree);


R_API bool r_interval_tree_insert(RIntervalTree *tree, ut64 start, ut64 end, void *data);





R_API bool r_interval_tree_delete(RIntervalTree *tree, RIntervalNode *node, bool free);





R_API bool r_interval_tree_resize(RIntervalTree *tree, RIntervalNode *node, ut64 new_start, ut64 new_end);



R_API RBIter r_interval_tree_first_at(RIntervalTree *tree, ut64 start);


R_API RIntervalNode *r_interval_tree_node_at(RIntervalTree *tree, ut64 start);


R_API RIntervalNode *r_interval_tree_node_at_data(RIntervalTree *tree, ut64 start, void *data);


static inline void *r_interval_tree_at(RIntervalTree *tree, ut64 start) {
	RIntervalNode *node = r_interval_tree_node_at (tree, start);
	return node ? node->data : NULL;
}

typedef void (*RIntervalIterCb)(RIntervalNode *node, void *user);


R_API void r_interval_tree_all_at(RIntervalTree *tree, ut64 start, RIntervalIterCb cb, void *user);



R_API void r_interval_tree_all_in(RIntervalTree *tree, ut64 value, bool end_inclusive, RIntervalIterCb cb, void *user);



R_API void r_interval_tree_all_intersect(RIntervalTree *tree, ut64 start, ut64 end, bool end_inclusive, RIntervalIterCb cb, void *user);

#define r_interval_tree_foreach(tree, it, dat) for ((it) = r_rbtree_first (&(tree)->root->node); r_rbtree_iter_has(&it) && (dat = r_rbtree_iter_get (&it, RIntervalNode, node)->data); r_rbtree_iter_next (&(it)))


#define r_interval_tree_foreach_prev(tree, it, dat) for ((it) = r_rbtree_last (&(tree)->root->node); r_rbtree_iter_has(&it) && (dat = r_rbtree_iter_get (&it, RIntervalNode, node)->data); r_rbtree_iter_prev (&(it)))



#endif 
