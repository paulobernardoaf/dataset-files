<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_bp.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_BP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_BP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP_MAXPIDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP_CONT_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP_CONT_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_bp_arch_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>RBreakpointArch</name>;</typedef>

<enum>enum <block>{
<decl><name>R_BP_TYPE_SW</name></decl>,
<decl><name>R_BP_TYPE_HW</name></decl>,
<decl><name>R_BP_TYPE_COND</name></decl>,
<decl><name>R_BP_TYPE_FAULT</name></decl>,
<decl><name>R_BP_TYPE_DELETE</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>r_bp_plugin_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointArch</name> <modifier>*</modifier></type><name>bps</name></decl>;</decl_stmt>
}</block></struct></type> <name>RBreakpointPlugin</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bp_item_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>st64</name></type> <name>module_delta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>recoil</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>swstep</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>internal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>togglehits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>obytes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bbytes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>pids</name><index>[<expr><name>R_BP_MAXPIDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RBreakpointItem</name>;</typedef>

<struct_decl>struct <name>r_bp_t</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RBreakpointCallback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bp_t</name></name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_bp_t</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stepcont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bpinmaps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RCoreBind</name></type> <name>corebind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOBind</name></type> <name>iob</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RBreakpointPlugin</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>traces</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointCallback</name></type> <name>breakpoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nhwbps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>bps_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bps_idx_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name></decl>;</decl_stmt>
}</block></struct></type> <name>RBreakpoint</name>;</typedef>


<enum>enum <block>{
<decl><name>R_BP_PROT_EXEC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>R_BP_PROT_WRITE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>R_BP_PROT_READ</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>R_BP_PROT_ACCESS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>r_bp_trace_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>traps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>RBreakpointTrace</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>RBreakpoint</name> <modifier>*</modifier></type><name>r_bp_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpoint</name> <modifier>*</modifier></type><name>r_bp_free</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_del</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_del_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_plugin_add</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointPlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_use</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_plugin_del</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_plugin_list</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_in</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_list</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_size</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_get_bytes</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_set_trace</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_set_trace_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_enable</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_enable_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_del_index</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_index</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_get_index_at</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_item_new</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_at</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_in</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_bp_is_valid</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_add_cond</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_del_cond</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_add_fault</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_add_sw</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_add_hw</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_restore_one</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_restore</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_bp_restore_except</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_traptrace_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_traptrace_enable</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_traptrace_reset</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bp_traptrace_next</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_traptrace_add</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_traptrace_free_at</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_traptrace_list</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bp_traptrace_at</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bp_traptrace_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bp_traptrace_enable</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_watch_add</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_x86</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_arm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_mips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_ppc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RBreakpointPlugin</name></type> <name>r_bp_plugin_bf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
