<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\sdb\ht_inc.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HT_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> HT_TYPE should be defined before including this header</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HtName_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Ht_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HT_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEY_TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VALUE_TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEY_TO_HASH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HT_NULL_VALUE</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HT_TYPE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HtName_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##PP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ht_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ht_pp_##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HtPP##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TYPE</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_TYPE</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TO_HASH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)(uintptr_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NULL_VALUE</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HT_TYPE</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HtName_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##UP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ht_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ht_up_##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HtUP##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TYPE</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_TYPE</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TO_HASH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NULL_VALUE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HtName_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##UU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ht_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ht_uu_##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HtUU##name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TYPE</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_TYPE</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_TO_HASH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_NULL_VALUE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>


<typedef>typedef <function><type><name><name>struct</name> <name>Ht_</name></name></type>(<name>kv</name>) <block>{<block_content>
<type><name>KEY_TYPE</name></type> <name>key</name>;
<type><name>VALUE_TYPE</name></type> <name>value</name>;
<type><name>ut32</name></type> <name>key_len</name>;
<type><name>ut32</name></type> <name>value_len</name>;
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>KvFreeFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>KEY_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>DupKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>VALUE_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>DupValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>VALUE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>ut32</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>CalcSizeK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>ut32</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>CalcSizeV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>VALUE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>ut32</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>HashFunction</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>ListComparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>bool</name> <argument_list>(<argument><expr><operator>*</operator><call><name>HT_</name><argument_list>(<argument><expr><name>ForeachCallback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VALUE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<typedef>typedef <function><type><name><name>struct</name> <name>Ht_</name></name></type>(<name>bucket_t</name>) <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>arr</name></expr>;</expr_stmt>
<type><name>ut32</name></type> <name>count</name>;
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<typedef>typedef <function><type><name><name>struct</name> <name>Ht_</name></name></type>(<name>options_t</name>) <block>{<block_content>
<macro><name>HT_</name><argument_list>(<argument>ListComparator</argument>)</argument_list></macro> <expr_stmt><expr><name>cmp</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>HashFunction</argument>)</argument_list></macro> <expr_stmt><expr><name>hashfn</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>DupKey</argument>)</argument_list></macro> <expr_stmt><expr><name>dupkey</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>DupValue</argument>)</argument_list></macro> <expr_stmt><expr><name>dupvalue</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>CalcSizeK</argument>)</argument_list></macro> <expr_stmt><expr><name>calcsizeK</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>CalcSizeV</argument>)</argument_list></macro> <expr_stmt><expr><name>calcsizeV</name></expr>;</expr_stmt> 
<macro><name>HT_</name><argument_list>(<argument>KvFreeFunc</argument>)</argument_list></macro> <expr_stmt><expr><name>freefn</name></expr>;</expr_stmt> 
<type><name>size_t</name></type> <name>elem_size</name>; 
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<typedef>typedef <function><type><name><name>struct</name> <name>Ht_</name></name></type>(<name>t</name>) <block>{<block_content>
<type><name>ut32</name></type> <name>size</name>; 
<type><name>ut32</name></type> <name>count</name>; 
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call><operator>*</operator> <name>table</name></expr>;</expr_stmt> 
<type><name>ut32</name></type> <name>prime_idx</name>;
<macro><name>HT_</name><argument_list>(<argument>Options</argument>)</argument_list></macro> <expr_stmt><expr><name>opt</name></expr>;</expr_stmt>
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>SDB_API</name></type> <name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>new_opt</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call> <operator>*</operator><name>opt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>void</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>insert</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>VALUE_TYPE</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>VALUE_TYPE</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>update_key</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>old_key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>new_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>VALUE_TYPE</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>found</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>SDB_API</name> <name>void</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>foreach</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>ForeachCallback</argument>)</argument_list></macro> <name>cb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name></type> <name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>find_kv</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>found</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>insert_kv</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr></argument>, <argument><expr><name>bool</name> <name>update</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
