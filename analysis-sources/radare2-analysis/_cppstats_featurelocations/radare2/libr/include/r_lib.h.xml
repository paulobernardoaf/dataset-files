<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_lib.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_LIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_LIB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_list.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name> <argument_list>(<argument><expr><name>r_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_SEPARATOR</name></cpp:macro> <cpp:value>"."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_SYMNAME</name></cpp:macro> <cpp:value>"radare_plugin"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_SYMFUNC</name></cpp:macro> <cpp:value>"radare_plugin_function"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_ENV</name></cpp:macro> <cpp:value>"R2_LIBR_PLUGINS"</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_EXT</name></cpp:macro> <cpp:value>"dll"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_EXT</name></cpp:macro> <cpp:value>"dylib"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_EXT</name></cpp:macro> <cpp:value>"so"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>r_lib_plugin_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>r_lib_handler_t</name></name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dl_handler</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>RLibPlugin</name>;</typedef>


<typedef>typedef <type><struct>struct <name>r_lib_handler_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>desc</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>constructor</name>)<parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>RLibHandler</name>;</typedef>



<typedef>typedef <type><struct>struct <name>r_lib_struct_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pkgname</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RLibStruct</name>;</typedef>

<typedef>typedef <function_decl><type><name>RLibStruct</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RLibStructFunc</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<enum>enum <block>{
<decl><name>R_LIB_TYPE_IO</name></decl>, 
<decl><name>R_LIB_TYPE_DBG</name></decl>, 
<decl><name>R_LIB_TYPE_LANG</name></decl>, 
<decl><name>R_LIB_TYPE_ASM</name></decl>, 
<decl><name>R_LIB_TYPE_ANAL</name></decl>, 
<decl><name>R_LIB_TYPE_PARSE</name></decl>, 
<decl><name>R_LIB_TYPE_BIN</name></decl>, 
<decl><name>R_LIB_TYPE_BIN_XTR</name></decl>, 
<decl><name>R_LIB_TYPE_BIN_LDR</name></decl>, 
<decl><name>R_LIB_TYPE_BP</name></decl>, 
<decl><name>R_LIB_TYPE_SYSCALL</name></decl>, 
<decl><name>R_LIB_TYPE_FASTCALL</name></decl>,
<decl><name>R_LIB_TYPE_CRYPTO</name></decl>, 
<decl><name>R_LIB_TYPE_CORE</name></decl>, 
<decl><name>R_LIB_TYPE_EGG</name></decl>, 
<decl><name>R_LIB_TYPE_FS</name></decl>, 
<decl><name>R_LIB_TYPE_LAST</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>r_lib_t</name> <block>{



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symnamefunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>handlers</name></decl>;</decl_stmt>
}</block></struct></type> <name>RLib</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_lib_dl_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_lib_dl_sym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_dl_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RLibCallback</name>)<parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>R_API</name> <name>RLib</name> <modifier>*</modifier></type><name>r_lib_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symnamefunc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_lib_free</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_run_handler</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><name>RLibStruct</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RLibHandler</name> <modifier>*</modifier></type><name>r_lib_get_handler</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_open</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_lib_opendir</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_open_ptr</name> <parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>RLibStruct</name> <modifier>*</modifier></type><name>stru</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_lib_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_lib_list</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_lib_add_handler</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>RLibCallback</name></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>RLibCallback</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_lib_del_handler</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_close</name><parameter_list>(<parameter><decl><type><name>RLib</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_lib_types_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_lib_types_get_i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
