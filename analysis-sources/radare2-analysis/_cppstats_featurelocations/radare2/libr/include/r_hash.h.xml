<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_hash.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_HASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_mem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name> <argument_list>(<argument><expr><name>r_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIB_SSL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>MD5_CTX</name></type> <name>R_MD5_CTX</name>;</typedef>
<typedef>typedef <type><name>SHA_CTX</name></type> <name>R_SHA_CTX</name>;</typedef>
<typedef>typedef <type><name>SHA256_CTX</name></type> <name>R_SHA256_CTX</name>;</typedef>
<typedef>typedef <type><name>SHA512_CTX</name></type> <name>R_SHA384_CTX</name>;</typedef>
<typedef>typedef <type><name>SHA512_CTX</name></type> <name>R_SHA512_CTX</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>R_MD5_CTX</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>R_MD5_CTX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name><name>H</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>W</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lenW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>sizeHi</name></decl>, <name>sizeLo</name>;</decl_stmt>
}</block></struct></type> <name>R_SHA_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_BLOCK_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_SHA256_CTX</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bitcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><name>SHA256_BLOCK_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>R_SHA256_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA384_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA512_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_SHA512_CTX</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name><name>bitcount</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><name>SHA512_BLOCK_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>R_SHA512_CTX</name>;</typedef>
<typedef>typedef <type><name>R_SHA512_CTX</name></type> <name>R_SHA384_CTX</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HAVE_CRC15_EXTRA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HAVE_CRC24</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HAVE_CRC32_EXTRA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HAVE_CRC64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HAVE_CRC64_EXTRA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name> <operator>||</operator> <name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<typedef>typedef <type><name>ut64</name></type> <name>utcrc</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTCRCx</name></cpp:macro> <cpp:value>PFMT64x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>ut32</name></type> <name>utcrc</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTCRCx</name></cpp:macro> <cpp:value>PFMT32x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTCRC_C</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((utcrc)(x))</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>ut16</name></type> <name>r_hash_fletcher8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut16</name></type> <name>r_hash_fletcher16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut32</name></type> <name>r_hash_fletcher32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_hash_fletcher64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>utcrc</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reflect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>utcrc</name></type> <name>poly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>utcrc</name></type> <name>xout</name></decl>;</decl_stmt>
}</block></struct></type> <name>R_CRC_CTX</name>;</typedef>

<enum>enum <name>CRC_PRESETS</name> <block>{
<decl><name>CRC_PRESET_8_SMBUS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<decl><name>CRC_PRESET_CRC8_CDMA2000</name></decl>,
<decl><name>CRC_PRESET_CRC8_DARC</name></decl>,
<decl><name>CRC_PRESET_CRC8_DVB_S2</name></decl>,
<decl><name>CRC_PRESET_CRC8_EBU</name></decl>,
<decl><name>CRC_PRESET_CRC8_ICODE</name></decl>,
<decl><name>CRC_PRESET_CRC8_ITU</name></decl>,
<decl><name>CRC_PRESET_CRC8_MAXIM</name></decl>,
<decl><name>CRC_PRESET_CRC8_ROHC</name></decl>,
<decl><name>CRC_PRESET_CRC8_WCDMA</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<decl><name>CRC_PRESET_15_CAN</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>CRC_PRESET_16</name></decl>,
<decl><name>CRC_PRESET_16_CITT</name></decl>,
<decl><name>CRC_PRESET_16_USB</name></decl>,
<decl><name>CRC_PRESET_16_HDLC</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<decl><name>CRC_PRESET_CRC16_AUG_CCITT</name></decl>,
<decl><name>CRC_PRESET_CRC16_BUYPASS</name></decl>,
<decl><name>CRC_PRESET_CRC16_CDMA2000</name></decl>,
<decl><name>CRC_PRESET_CRC16_DDS110</name></decl>,
<decl><name>CRC_PRESET_CRC16_DECT_R</name></decl>,
<decl><name>CRC_PRESET_CRC16_DECT_X</name></decl>,
<decl><name>CRC_PRESET_CRC16_DNP</name></decl>,
<decl><name>CRC_PRESET_CRC16_EN13757</name></decl>,
<decl><name>CRC_PRESET_CRC16_GENIBUS</name></decl>,
<decl><name>CRC_PRESET_CRC16_MAXIM</name></decl>,
<decl><name>CRC_PRESET_CRC16_MCRF4XX</name></decl>,
<decl><name>CRC_PRESET_CRC16_RIELLO</name></decl>,
<decl><name>CRC_PRESET_CRC16_T10_DIF</name></decl>,
<decl><name>CRC_PRESET_CRC16_TELEDISK</name></decl>,
<decl><name>CRC_PRESET_CRC16_TMS37157</name></decl>,
<decl><name>CRC_PRESET_CRCA</name></decl>,
<decl><name>CRC_PRESET_CRC16_KERMIT</name></decl>,
<decl><name>CRC_PRESET_CRC16_MODBUS</name></decl>,
<decl><name>CRC_PRESET_CRC16_X25</name></decl>,
<decl><name>CRC_PRESET_CRC16_XMODEM</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<decl><name>CRC_PRESET_24</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>CRC_PRESET_32</name></decl>,
<decl><name>CRC_PRESET_32_ECMA_267</name></decl>,
<decl><name>CRC_PRESET_32C</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<decl><name>CRC_PRESET_CRC32_BZIP2</name></decl>,
<decl><name>CRC_PRESET_CRC32D</name></decl>,
<decl><name>CRC_PRESET_CRC32_MPEG2</name></decl>,
<decl><name>CRC_PRESET_CRC32_POSIX</name></decl>,
<decl><name>CRC_PRESET_CRC32Q</name></decl>,
<decl><name>CRC_PRESET_CRC32_JAMCRC</name></decl>,
<decl><name>CRC_PRESET_CRC32_XFER</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<decl><name>CRC_PRESET_CRC64</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<decl><name>CRC_PRESET_CRC64_ECMA182</name></decl>,
<decl><name>CRC_PRESET_CRC64_WE</name></decl>,
<decl><name>CRC_PRESET_CRC64_XZ</name></decl>,
<decl><name>CRC_PRESET_CRC64_ISO</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>CRC_PRESET_SIZE</name></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHash</name></cpp:macro> <cpp:value>struct r_hash_t</cpp:value></cpp:define>

<struct>struct <name>r_hash_t</name> <block>{
<decl_stmt><decl><type><name>R_MD5_CTX</name></type> <name>md5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_SHA_CTX</name></type> <name>sha1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_SHA256_CTX</name></type> <name>sha256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_SHA384_CTX</name></type> <name>sha384</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_SHA512_CTX</name></type> <name>sha512</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>entropy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>R_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list> <name><name>digest</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>r_hash_seed_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>RHashSeed</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_SMBUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_CDMA2000</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_DARC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_DVB_S2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_EBU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_ICODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_ITU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_MAXIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_ROHC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC8_WCDMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC15_CAN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_HDLC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_USB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_CITT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_AUG_CCITT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_BUYPASS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_CDMA2000</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_DDS110</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_DECT_R</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_DECT_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_DNP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_EN13757</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_GENIBUS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_MAXIM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_MCRF4XX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_RIELLO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_T10_DIF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_TELEDISK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_TMS37157</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRCA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_KERMIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_MODBUS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_X25</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC16_XMODEM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC24</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32C</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_ECMA_267</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_BZIP2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32D</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_MPEG2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_POSIX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32Q</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_JAMCRC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC32_XFER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC64</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC64_ECMA182</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC64_WE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC64_XZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_CRC64_ISO</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_XXHASH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_MD4</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_MD5</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_SHA1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_SHA256</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_SHA384</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_SHA512</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_ADLER32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_ENTROPY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_PCPRINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_MOD255</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_PARITY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_XOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_XORPAIR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_HAMDIST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_LUHN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_FLETCHER8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_FLETCHER16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_FLETCHER32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SIZE_FLETCHER64</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_NBITS</name></cpp:macro> <cpp:value>(8*sizeof(ut64))</cpp:value></cpp:define>

<enum>enum <name>HASH_INDICES</name> <block>{
<decl><name>R_HASH_IDX_MD5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>R_HASH_IDX_SHA1</name></decl>,
<decl><name>R_HASH_IDX_SHA256</name></decl>,
<decl><name>R_HASH_IDX_SHA384</name></decl>,
<decl><name>R_HASH_IDX_SHA512</name></decl>,
<decl><name>R_HASH_IDX_MD4</name></decl>,
<decl><name>R_HASH_IDX_XOR</name></decl>,
<decl><name>R_HASH_IDX_XORPAIR</name></decl>,
<decl><name>R_HASH_IDX_PARITY</name></decl>,
<decl><name>R_HASH_IDX_ENTROPY</name></decl>,
<decl><name>R_HASH_IDX_HAMDIST</name></decl>,
<decl><name>R_HASH_IDX_PCPRINT</name></decl>,
<decl><name>R_HASH_IDX_MOD255</name></decl>,
<decl><name>R_HASH_IDX_XXHASH</name></decl>,
<decl><name>R_HASH_IDX_ADLER32</name></decl>,
<decl><name>R_HASH_IDX_BASE64</name></decl>,
<decl><name>R_HASH_IDX_BASE91</name></decl>,
<decl><name>R_HASH_IDX_PUNYCODE</name></decl>,
<decl><name>R_HASH_IDX_LUHN</name></decl>,

<decl><name>R_HASH_IDX_CRC8_SMBUS</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC8_CDMA2000</name></decl>,
<decl><name>R_HASH_IDX_CRC8_DARC</name></decl>,
<decl><name>R_HASH_IDX_CRC8_DVB_S2</name></decl>,
<decl><name>R_HASH_IDX_CRC8_EBU</name></decl>,
<decl><name>R_HASH_IDX_CRC8_ICODE</name></decl>,
<decl><name>R_HASH_IDX_CRC8_ITU</name></decl>,
<decl><name>R_HASH_IDX_CRC8_MAXIM</name></decl>,
<decl><name>R_HASH_IDX_CRC8_ROHC</name></decl>,
<decl><name>R_HASH_IDX_CRC8_WCDMA</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC15_CAN</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>R_HASH_IDX_CRC16</name></decl>,
<decl><name>R_HASH_IDX_CRC16_HDLC</name></decl>,
<decl><name>R_HASH_IDX_CRC16_USB</name></decl>,
<decl><name>R_HASH_IDX_CRC16_CITT</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC16_AUG_CCITT</name></decl>,
<decl><name>R_HASH_IDX_CRC16_BUYPASS</name></decl>,
<decl><name>R_HASH_IDX_CRC16_CDMA2000</name></decl>,
<decl><name>R_HASH_IDX_CRC16_DDS110</name></decl>,
<decl><name>R_HASH_IDX_CRC16_DECT_R</name></decl>,
<decl><name>R_HASH_IDX_CRC16_DECT_X</name></decl>,
<decl><name>R_HASH_IDX_CRC16_DNP</name></decl>,
<decl><name>R_HASH_IDX_CRC16_EN13757</name></decl>,
<decl><name>R_HASH_IDX_CRC16_GENIBUS</name></decl>,
<decl><name>R_HASH_IDX_CRC16_MAXIM</name></decl>,
<decl><name>R_HASH_IDX_CRC16_MCRF4XX</name></decl>,
<decl><name>R_HASH_IDX_CRC16_RIELLO</name></decl>,
<decl><name>R_HASH_IDX_CRC16_T10_DIF</name></decl>,
<decl><name>R_HASH_IDX_CRC16_TELEDISK</name></decl>,
<decl><name>R_HASH_IDX_CRC16_TMS37157</name></decl>,
<decl><name>R_HASH_IDX_CRCA</name></decl>,
<decl><name>R_HASH_IDX_CRC16_KERMIT</name></decl>,
<decl><name>R_HASH_IDX_CRC16_MODBUS</name></decl>,
<decl><name>R_HASH_IDX_CRC16_X25</name></decl>,
<decl><name>R_HASH_IDX_CRC16_XMODEM</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC24</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>R_HASH_IDX_CRC32</name></decl>,
<decl><name>R_HASH_IDX_CRC32C</name></decl>,
<decl><name>R_HASH_IDX_CRC32_ECMA_267</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC32_BZIP2</name></decl>,
<decl><name>R_HASH_IDX_CRC32D</name></decl>,
<decl><name>R_HASH_IDX_CRC32_MPEG2</name></decl>,
<decl><name>R_HASH_IDX_CRC32_POSIX</name></decl>,
<decl><name>R_HASH_IDX_CRC32Q</name></decl>,
<decl><name>R_HASH_IDX_CRC32_JAMCRC</name></decl>,
<decl><name>R_HASH_IDX_CRC32_XFER</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC64</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<decl><name>R_HASH_IDX_CRC64_ECMA182</name></decl>,
<decl><name>R_HASH_IDX_CRC64_WE</name></decl>,
<decl><name>R_HASH_IDX_CRC64_XZ</name></decl>,
<decl><name>R_HASH_IDX_CRC64_ISO</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl><name>R_HASH_IDX_FLETCHER8</name></decl>,
<decl><name>R_HASH_IDX_FLETCHER16</name></decl>,
<decl><name>R_HASH_IDX_FLETCHER32</name></decl>,
<decl><name>R_HASH_IDX_FLETCHER64</name></decl>,
<decl><name>R_HASH_NUM_INDICES</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_MD5</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_MD5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SHA1</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_SHA1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SHA256</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_SHA256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SHA384</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_SHA384)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_SHA512</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_SHA512)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_MD4</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_MD4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_XOR</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_XOR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_XORPAIR</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_XORPAIR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_PARITY</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_PARITY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_ENTROPY</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_ENTROPY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_HAMDIST</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_HAMDIST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_PCPRINT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_PCPRINT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_MOD255</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_MOD255)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_XXHASH</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_XXHASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_ADLER32</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_ADLER32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_BASE64</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_BASE64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_BASE91</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_BASE91)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_PUNYCODE</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_PUNYCODE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_LUHN</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_LUHN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_FLETCHER8</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_FLETCHER8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_FLETCHER16</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_FLETCHER16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_FLETCHER32</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_FLETCHER32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_FLETCHER64</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_FLETCHER64)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_SMBUS</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_SMBUS)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_CDMA2000</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_CDMA2000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_DARC</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_DARC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_DVB_S2</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_DVB_S2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_EBU</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_EBU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_ICODE</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_ICODE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_ITU</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_ITU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_MAXIM</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_MAXIM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_ROHC</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_ROHC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC8_WCDMA</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC8_WCDMA)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC15_CAN</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC15_CAN)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_HDLC</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_HDLC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_USB</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_USB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_CITT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_CITT)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_AUG_CCITT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_AUG_CCITT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_BUYPASS</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_BUYPASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_CDMA2000</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_CDMA2000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_DDS110</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_DDS110)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_DECT_R</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_DECT_R)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_DECT_X</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_DECT_X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_DNP</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_DNP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_EN13757</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_EN13757)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_GENIBUS</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_GENIBUS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_MAXIM</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_MAXIM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_MCRF4XX</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_MCRF4XX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_RIELLO</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_RIELLO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_T10_DIF</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_T10_DIF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_TELEDISK</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_TELEDISK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_TMS37157</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_TMS37157)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRCA</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRCA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_KERMIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_KERMIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_MODBUS</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_MODBUS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_X25</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_X25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC16_XMODEM</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC16_XMODEM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC24</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC24)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32C</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32C)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_ECMA_267</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_ECMA_267)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_BZIP2</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_BZIP2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32D</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32D)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_MPEG2</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_MPEG2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_POSIX</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_POSIX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32Q</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32Q)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_JAMCRC</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_JAMCRC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC32_XFER</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC32_XFER)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC64</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC64_ECMA182</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC64_ECMA182)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC64_WE</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC64_WE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC64_XZ</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC64_XZ)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_CRC64_ISO</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; R_HASH_IDX_CRC64_ISO)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HASH_ALL</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; R_MIN(63, R_HASH_NUM_INDICES))-1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>R_API</name> <name>RHash</name> <modifier>*</modifier></type><name>r_hash_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>rst</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_hash_free</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_md4</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_md5</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_sha1</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_sha256</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_sha384</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_hash_do_sha512</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_hash_to_string</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_hash_name</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_hash_name_to_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_hash_size</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_hash_calculate</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>algobit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_deviation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut32</name></type> <name>r_hash_adler32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut32</name></type> <name>r_hash_xxhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_xor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut16</name></type> <name>r_hash_xorpair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_hash_parity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_mod255</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_hash_luhn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>utcrc</name></type> <name>r_hash_crc_preset</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>CRC_PRESETS</name></name></type> <name>preset</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_hamdist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_hash_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_hash_entropy_fraction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_hash_pcprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_hash_do_begin</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_hash_do_end</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_hash_do_spice</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>, <parameter><decl><type><name>RHashSeed</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
