<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_heap_glibc.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_HEAP_GLIBC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_HEAP_GLIBC_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_heap_glibc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_A</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter> , <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_printf (color fmt Color_RESET, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_YA</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PRINTF_A ("%s", fmt, pal-&gt;offset, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_GA</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PRINTF_A ("%s", fmt, pal-&gt;args, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_BA</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PRINTF_A ("%s", fmt, pal-&gt;num, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_RA</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PRINTF_A ("%s", fmt, pal-&gt;invalid, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_A</name><parameter_list>(<parameter><type><name>color</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_print (color msg Color_RESET)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_YA</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_printf ("%s" msg Color_RESET, pal-&gt;offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_GA</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_printf ("%s" msg Color_RESET, pal-&gt;args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_BA</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_printf ("%s" msg Color_RESET, pal-&gt;num)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_RA</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_printf ("%s" msg Color_RESET, pal-&gt;invalid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREV_INUSE</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MMAPPED</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_MAIN_ARENA</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBINS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSMALLBINS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFASTBINS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINMAPSHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name></cpp:macro> <cpp:value>core-&gt;dbg-&gt;bits</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTBIN_IDX_TO_SIZE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SZ * 4) + (SZ * 2) * (i - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSPERMAP</name></cpp:macro> <cpp:value>(1U &lt;&lt; BINMAPSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINMAPSIZE</name></cpp:macro> <cpp:value>(NBINS / BITSPERMAP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NPAD</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_MAX_BINS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_FILL_COUNT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_ALIGN_32</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_ALIGN_64</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_OFFSET</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDR_SZ_32</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDR_SZ_64</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_HDR_SZ</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_SZ_32</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_SZ_64</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>largebin_index_32</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((ut32)(size)) &gt;&gt; 6) &lt;= 38)? 56 + (((ut32)(size)) &gt;&gt; 6): ((((ut32)(size)) &gt;&gt; 9) &lt;= 20)? 91 + (((ut32)(size)) &gt;&gt; 9): ((((ut32)(size)) &gt;&gt; 12) &lt;= 10)? 110 + (((ut32)(size)) &gt;&gt; 12): ((((ut32)(size)) &gt;&gt; 15) &lt;= 4)? 119 + (((ut32)(size)) &gt;&gt; 15): ((((ut32)(size)) &gt;&gt; 18) &lt;= 2)? 124 + (((ut32)(size)) &gt;&gt; 18): 126)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>largebin_index_32_big</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((ut32)(size)) &gt;&gt; 6) &lt;= 45)? 49 + (((ut32)(size)) &gt;&gt; 6): ((((ut32)(size)) &gt;&gt; 9) &lt;= 20)? 91 + (((ut32)(size)) &gt;&gt; 9): ((((ut32)(size)) &gt;&gt; 12) &lt;= 10)? 110 + (((ut32)(size)) &gt;&gt; 12): ((((ut32)(size)) &gt;&gt; 15) &lt;= 4)? 119 + (((ut32)(size)) &gt;&gt; 15): ((((ut32)(size)) &gt;&gt; 18) &lt;= 2)? 124 + (((ut32)(size)) &gt;&gt; 18): 126)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>largebin_index_64</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((ut32)(size)) &gt;&gt; 6) &lt;= 48)? 48 + (((ut32)(size)) &gt;&gt; 6): ((((ut32)(size)) &gt;&gt; 9) &lt;= 20)? 91 + (((ut32)(size)) &gt;&gt; 9): ((((ut32)(size)) &gt;&gt; 12) &lt;= 10)? 110 + (((ut32)(size)) &gt;&gt; 12): ((((ut32)(size)) &gt;&gt; 15) &lt;= 4)? 119 + (((ut32)(size)) &gt;&gt; 15): ((((ut32)(size)) &gt;&gt; 18) &lt;= 2)? 124 + (((ut32)(size)) &gt;&gt; 18): 126)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>largebin_index</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SZ == 8 ? largebin_index_64 (size) : largebin_index_32 (size))</cpp:value></cpp:define>









<typedef>typedef <type><struct>struct <name>r_malloc_chunk_64</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>prev_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>bk</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>fd_nextsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>bk_nextsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>RHeapChunk_64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_malloc_chunk_32</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>prev_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>bk</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut32</name></type> <name>fd_nextsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>bk_nextsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>RHeapChunk_32</name>;</typedef>









<typedef>typedef <type><struct>struct <name>r_malloc_state_32</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name><name>fastbinsY</name><index>[<expr><name>NFASTBINS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>last_remainder</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name><name>bins</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>binmap</name><index>[<expr><name>BINMAPSIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next_free</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attached_threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>system_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>max_system_mem</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RHeap_MallocState_32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_malloc_state_64</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name><name>fastbinsY</name><index>[<expr><name>NFASTBINS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>last_remainder</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name><name>bins</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>binmap</name><index>[<expr><name>BINMAPSIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next_free</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attached_threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>system_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>max_system_mem</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RHeap_MallocState_64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_tcache_perthread_struct_32</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name><name>counts</name><index>[<expr><name>TCACHE_MAX_BINS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>entries</name><index>[<expr><name>TCACHE_MAX_BINS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RHeapTcache_32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_tcache_perthread_struct_64</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name><name>counts</name><index>[<expr><name>TCACHE_MAX_BINS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name><name>entries</name><index>[<expr><name>TCACHE_MAX_BINS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RHeapTcache_64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_malloc_state_tcache_32</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>have_fast_chunks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name><name>fastbinsY</name><index>[<expr><name>NFASTBINS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>last_remainder</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name><name>bins</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>binmap</name><index>[<expr><name>BINMAPSIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next_free</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attached_threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>system_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>max_system_mem</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RHeap_MallocState_tcache_32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_malloc_state_tcache_64</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>have_fast_chunks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name><name>fastbinsY</name><index>[<expr><name>NFASTBINS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>last_remainder</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name><name>bins</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>binmap</name><index>[<expr><name>BINMAPSIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next_free</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attached_threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>system_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>max_system_mem</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RHeap_MallocState_tcache_64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_malloc_state</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>binmap</name><index>[<expr><name>BINMAPSIZE</name></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>have_fast_chunks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attached_threads</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ut32</name></type> <name><name>fastbinsY_32</name><index>[<expr><name>NFASTBINS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>top_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>last_remainder_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name><name>bins_32</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>next_free_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>system_mem_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>max_system_mem_32</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ut64</name></type> <name><name>fastbinsY_64</name><index>[<expr><name>NFASTBINS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>top_64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>last_remainder_64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name><name>bins_64</name><index>[<expr><name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next_64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>next_free_64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>system_mem_64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>max_system_mem_64</name></decl>;</decl_stmt> 
}</block></struct></type> <name>MallocState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_heap_info_32</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>ar_ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>mprotect_size</name></decl>;</decl_stmt> 





}</block></struct></type> <name>RHeapInfo_32</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_heap_info_64</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>ar_ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>mprotect_size</name></decl>;</decl_stmt> 





}</block></struct></type> <name>RHeapInfo_64</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
