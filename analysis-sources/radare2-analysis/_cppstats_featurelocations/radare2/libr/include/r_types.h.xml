<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_types.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_TYPES_H</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_str_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__BSD__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__KFBSD__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__UNIX__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__WINDOWS__</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_PRINT</name></cpp:macro> <cpp:value>0x000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_RADARE</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_SET</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_SIMPLE</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_JSON</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_ARRAY</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_SIMPLEST</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_CLASSDUMP</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MODE_EQUAL</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IN</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_OUT</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_INOUT</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_OWN</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BORROW</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NONNULL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NULLABLE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEPRECATE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IFNULL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_UNUSED</name></cpp:macro> <cpp:value>__attribute__((__unused__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_UNUSED</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_NEW</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_NEW0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_NEW0</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_FREE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_NEWCOPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_NEWCOPY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_R</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_W</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_RW</name></cpp:macro> <cpp:value>(R_PERM_R|R_PERM_W)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_RX</name></cpp:macro> <cpp:value>(R_PERM_R|R_PERM_X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_RWX</name></cpp:macro> <cpp:value>(R_PERM_R|R_PERM_W|R_PERM_X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_WX</name></cpp:macro> <cpp:value>(R_PERM_W|R_PERM_X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_SHAR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_PRIV</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_ACCESS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PERM_CREAT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mips</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mips</name></cpp:macro> <cpp:value>mips</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__POWERPC__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__POWERPC__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__IPHONE_8_0</name> <operator>&amp;&amp;</operator> <name>TARGET_OS_IPHONE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_SYSTEM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_SYSTEM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APPLE_SDK_IPHONEOS</name> <operator>||</operator> <name>APPLE_SDK_APPLETVOS</name> <operator>||</operator> <name>APPLE_SDK_WATCHOS</name> <operator>||</operator> <name>APPLE_SDK_APPLETVSIMULATOR</name> <operator>||</operator> <name>APPLE_SDK_WATCHSIMULATOR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_PTRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_PTRACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FORK</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_FORK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_FORK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXCOMLEN</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OpenBSD__</name> <operator>&amp;&amp;</operator> <name>OpenBSD</name> <operator>&gt;=</operator> <literal type="number">201605</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_PLEDGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_PLEDGE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__unused__)) UNUSED_ ##x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNUSED_ ##x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNIX__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNIX__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KFBSD__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KFBSD__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restrict</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcasecmp</name></cpp:macro> <cpp:value>stricmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strncasecmp</name></cpp:macro> <cpp:value>strnicmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__WINDOWS__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>gmtime_s</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMSCRIPTEN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BSD__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNIX__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BSD__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNIX__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name> <operator>||</operator> <name>_WIN32</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_SOCKETS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__WINDOWS__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__UNIX__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__BSD__</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name> <operator>||</operator> <name>_WIN32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__addr_t_defined</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__arm__</name> <operator>||</operator> <name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_OS_IPHONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_OS_IPHONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_MALLOC</name></cpp:macro> <cpp:value>__attribute__((malloc))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((alloc_size(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_SIZE_PROD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((alloc_size(x,y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((alloc_align(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_PURE</name></cpp:macro> <cpp:value>__attribute__ ((pure))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_CONST</name></cpp:macro> <cpp:value>__attribute__((const))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_USED</name></cpp:macro> <cpp:value>__attribute__((used))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>__attribute__((warn_unused_result))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALWAYS_INLINE</name></cpp:macro> <cpp:value>__attribute__((always_inline))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_MALLOC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_SIZE_PROD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALLOC_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_PURE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_CONST</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_USED</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ATTR_ALWAYS_INLINE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types_base.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_FILE_OFFSET_BITS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GNU_SOURCE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_endian.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>eprintf(__func__" " x)</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FS</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS</name></cpp:macro> <cpp:value>"\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_DIR</name></cpp:macro> <cpp:value>"\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENVSEP</name></cpp:macro> <cpp:value>";"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_HOME</name></cpp:macro> <cpp:value>"USERPROFILE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_TMP</name></cpp:macro> <cpp:value>"TEMP"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_DIR</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENVSEP</name></cpp:macro> <cpp:value>":"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_HOME</name></cpp:macro> <cpp:value>"HOME"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_TMP</name></cpp:macro> <cpp:value>"TMPDIR"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_JOIN_2_PATHS</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p1 R_SYS_DIR p2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_JOIN_3_PATHS</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p1 R_SYS_DIR p2 R_SYS_DIR p3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_JOIN_4_PATHS</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p1 R_SYS_DIR p2 R_SYS_DIR p3 R_SYS_DIR p4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_JOIN_5_PATHS</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p1 R_SYS_DIR p2 R_SYS_DIR p3 R_SYS_DIR p4 R_SYS_DIR p5</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__packed</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__packed</name></cpp:macro> <cpp:value>__attribute__((__packed__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>PrintfCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTO</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) &amp;((y*)0)-&gt;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x+CTO(y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((size_t*)(CTA(x,y,z))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{t* _=(t*)CTA(x,y,z);*_=v;}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_IPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_IPI</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IPI</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_HEAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_HEAP</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_HEAP</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_API</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_SWIG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>export</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>R_INLINE</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_VERSION_HEADER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>R_API const char *x##_version(void)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LIB_VERSION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>R_API const char *x##_version() { return "" R2_GITTAP; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS2BYTES</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)/8)+(((x)%8)?1:0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO_FILL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset (&amp;x, 0, sizeof (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEWS0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)calloc(y,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEWS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)malloc(sizeof(x)*(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEW0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)calloc(1,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)malloc(sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEWCOPY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)r_new_copy(sizeof(x), y)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>r_new_copy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NEW_COPY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x=(void*)malloc(sizeof(y));memcpy(x,y,sizeof(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MEM_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(size_t)(((ut64)(size_t)x) &amp; 0xfffffffffffff000LL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARRAY_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof (x) / sizeof ((x)[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PTR_MOVE</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d=s;s=NULL;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PTR_ALIGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)(((size_t)(v) ) &amp; ~(t - 1)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PTR_ALIGN_NEXT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)(((size_t)(v) + (t - 1)) &amp; ~(t - 1)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIT_SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ut8*)x)[y&gt;&gt;4] |= (1&lt;&lt;(y&amp;0xf)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIT_UNSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ut8*)x)[y&gt;&gt;4] &amp;= ~(1&lt;&lt;(y&amp;0xf)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIT_TOGGLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( R_BIT_CHK (x, y) ? R_BIT_UNSET (x, y): R_BIT_SET (x, y))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIT_CHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(x) &amp; (1&lt;&lt;(y)))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1800</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__func__</name></cpp:macro> <cpp:value>__FUNCTION__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERROR_WITH_FILELINE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PERROR_WITH_FILELINE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_perror</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>line</name></type></parameter>,<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char buf[256]; snprintf(buf,sizeof(buf),"[%s:%d %s] %s",file,line,func,str); r_sys_perror_str(buf); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>perror</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_perror(x,__FILE__,__LINE__,__func__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_sys_perror</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_perror(x,__FILE__,__LINE__,__func__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_sys_perror</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_sys_perror_str(x);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_EPRINTF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>typeof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typeof</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__typeof__(arg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_offsetof</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(type, member)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SDB_WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_offsetof</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long) (ut64)&amp;((type*)0)-&gt;member)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_offsetof</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long) &amp;((type*)0)-&gt;member)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BETWEEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y)&gt;=(x)) &amp;&amp; ((y)&lt;=(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ROUND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)%(y))?(x)+((y)-((x)%(y))):(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DIM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;(y))?(y):((x)&gt;(z))?(z):(x))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_MAX_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&gt;(y))?(x):(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAX_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_MIN_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&gt;(y))?(y):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIN_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;0)?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BTW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&gt;=(y))&amp;&amp;((y)&lt;=(z)))?y:x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ free((void *)x); x = NULL; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_REGEXP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_REGEXP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64x</name></cpp:macro> <cpp:value>"I64x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64d</name></cpp:macro> <cpp:value>"I64d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64u</name></cpp:macro> <cpp:value>"I64u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64o</name></cpp:macro> <cpp:value>"I64o"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZx</name></cpp:macro> <cpp:value>"Ix"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZd</name></cpp:macro> <cpp:value>"Id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZu</name></cpp:macro> <cpp:value>"Iu"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZo</name></cpp:macro> <cpp:value>"Io"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBLFMT</name></cpp:macro> <cpp:value>"f"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HHXFMT</name></cpp:macro> <cpp:value>"x"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64x</name></cpp:macro> <cpp:value>"llx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64d</name></cpp:macro> <cpp:value>"lld"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64u</name></cpp:macro> <cpp:value>"llu"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT64o</name></cpp:macro> <cpp:value>"llo"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZx</name></cpp:macro> <cpp:value>"zx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZd</name></cpp:macro> <cpp:value>"zd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZu</name></cpp:macro> <cpp:value>"zu"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMTSZo</name></cpp:macro> <cpp:value>"zo"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBLFMT</name></cpp:macro> <cpp:value>"Lf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HHXFMT</name></cpp:macro> <cpp:value>"hhx"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT32x</name></cpp:macro> <cpp:value>"x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT32d</name></cpp:macro> <cpp:value>"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT32u</name></cpp:macro> <cpp:value>"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT32o</name></cpp:macro> <cpp:value>"o"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x1000)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x100000000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x1000)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x01001000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm64__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x4000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BASE</name></cpp:macro> <cpp:value>((ut64)0x8048000)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__EMSCRIPTEN__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"wasm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"ppc"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_LITTLE_ENDIAN__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"arm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"arm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arc__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"arc"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__sparc__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"sparc"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__mips__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"mips"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__EMSCRIPTEN__</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__riscv__</name> <operator>||</operator> <name>__riscv</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"riscv"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__riscv_xlen</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32 | R_SYS_BITS_64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__x86_64__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>(R_SYS_BITS_32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__i386__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ARCH</name></cpp:macro> <cpp:value>"unknown"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_BITS</name></cpp:macro> <cpp:value>R_SYS_BITS_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN_LITTLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN_BIG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_ENDIAN_BI</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>R_SYS_ARCH_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_X86</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_ARM</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_PPC</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_M68K</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_JAVA</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_MIPS</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_SPARC</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_XAP</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_MSIL</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_OBJD</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_BF</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_SH</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_AVR</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_DALVIK</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_Z80</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_ARC</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_I8080</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_RAR</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_8051</name> <init>= <expr><literal type="number">0x40000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_TMS320</name> <init>= <expr><literal type="number">0x80000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_EBC</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_H8300</name> <init>= <expr><literal type="number">0x200000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_CR16</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_V850</name> <init>= <expr><literal type="number">0x800000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_SYSZ</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_XCORE</name> <init>= <expr><literal type="number">0x2000000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_PROPELLER</name> <init>= <expr><literal type="number">0x4000000</literal></expr></init></decl>,
<decl><name>R_SYS_ARCH_MSP430</name> <init>= <expr><literal type="number">0x8000000LL</literal></expr></init></decl>, 
<decl><name>R_SYS_ARCH_CRIS</name> <init>= <expr><literal type="number">0x10000000LL</literal></expr></init></decl>, 
<decl><name>R_SYS_ARCH_HPPA</name> <init>= <expr><literal type="number">0x20000000LL</literal></expr></init></decl>, 
<decl><name>R_SYS_ARCH_V810</name> <init>= <expr><literal type="number">0x40000000LL</literal></expr></init></decl>, 
<decl><name>R_SYS_ARCH_LM32</name> <init>= <expr><literal type="number">0x80000000LL</literal></expr></init></decl>, 
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CLOCK_NANOSLEEP</name> <operator>&amp;&amp;</operator> <name>CLOCK_MONOTONIC</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__linux__</name> <operator>||</operator> <operator>(</operator><name>__FreeBSD__</name> <operator>&amp;&amp;</operator> <name>__FreeBSD_version</name> <operator>&gt;=</operator> <literal type="number">1101000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__NetBSD__</name> <operator>&amp;&amp;</operator> <name>__NetBSD_Version__</name> <operator>&gt;=</operator> <literal type="number">700000000</literal><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CLOCK_NANOSLEEP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CLOCK_NANOSLEEP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"qnx"</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"darwin"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"linux"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"windows"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"netbsd"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"openbsd"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"freebsd"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SYS_OS</name></cpp:macro> <cpp:value>"unknown"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator><operator>(</operator><name>arg1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator><operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator><operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call4</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator><operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call5</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator><operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call6</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg6</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator>
<operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>,</operator> <name>arg6</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call7</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg6</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg7</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator>
<operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>,</operator> <name>arg6</name><operator>,</operator> <name>arg7</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg6</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg7</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg8</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator>
<operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>,</operator> <name>arg6</name><operator>,</operator> <name>arg7</name><operator>,</operator> <name>arg8</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call9</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg6</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg7</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg8</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg9</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator>
<operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>,</operator> <name>arg6</name><operator>,</operator> <name>arg7</name><operator>,</operator> <name>arg8</name><operator>,</operator> <name>arg9</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_run_call10</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg5</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg6</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg7</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg8</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg9</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg10</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>fcn</name><operator>)</operator><operator>)</operator>
<operator>(</operator><name>arg1</name><operator>,</operator> <name>arg2</name><operator>,</operator> <name>arg3</name><operator>,</operator> <name>arg4</name><operator>,</operator> <name>arg5</name><operator>,</operator> <name>arg6</name><operator>,</operator> <name>arg7</name><operator>,</operator> <name>arg8</name><operator>,</operator> <name>arg9</name><operator>,</operator> <name>arg10</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>container_of</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>container_of</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)((char *)(ptr) - offsetof(type, member)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>container_of</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)((char *)(__typeof__(((type *)0)-&gt;member) *){ptr} - offsetof(type, member)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
