<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_pdb.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_PDB_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_R_LIST_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_NAME_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct_decl>struct <name>R_PDB</name>;</struct_decl>
<struct_decl>struct <name>R_PDB7_ROOT_STREAM</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>R_PDB</name> <block>{
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pdb_parse</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>R_PDB</name></name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>finish_pdb_parse</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>R_PDB</name></name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_types</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>R_PDB</name></name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>R_PDB7_ROOT_STREAM</name></name> <modifier>*</modifier></type><name>root_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pdb_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pdb_streams2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_gvars</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>R_PDB</name></name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>img_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>R_PDB</name>;</typedef>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>init_pdb_parser</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
