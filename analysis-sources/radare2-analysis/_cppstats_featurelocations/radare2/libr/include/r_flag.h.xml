<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_flag.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_FLAGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_FLAGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_skiplist.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_FLAG_NAME_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_FLAG_ZONE_USE_SDB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_flag_zone_item_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>to</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>RFlagZoneItem</name>;</typedef>



<typedef>typedef <type><struct>struct <name>r_flags_at_offset_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RFlagsAtOffset</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_flag_item_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>realname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>demangled</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RFlagItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_flag_t</name> <block>{
<decl_stmt><decl><type><name>RSpaces</name></type> <name>spaces</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>st64</name></type> <name>base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>realnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>by_off</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>zones</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>zones</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>RFlag</name>;</typedef>



<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagExistAt</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag_prefix</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>fp_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RFlagItem</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RFlagGet</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RFlagItem</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RFlagGetAtAddr</name>) <parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RFlagItem</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RFlagGetAt</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>closest</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RFlagItem</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RFlagSet</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagUnset</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagUnsetName</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagUnsetOff</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RSpace</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RFlagSetSpace</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagPopSpace</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagPushSpace</name>)<parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RFlagItemCb</name>)<parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_flag_bind_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagExistAt</name></type> <name>exist_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagGet</name></type> <name>get</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagGetAt</name></type> <name>get_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagSet</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagUnset</name></type> <name>unset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagUnsetName</name></type> <name>unset_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagUnsetOff</name></type> <name>unset_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagSetSpace</name></type> <name>set_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagPushSpace</name></type> <name>push_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagPopSpace</name></type> <name>pop_fs</name></decl>;</decl_stmt>
}</block></struct></type> <name>RFlagBind</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_flag_bind_init</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(&amp;x,0,sizeof(x))</cpp:value></cpp:define>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_bind</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RFlagBind</name> <modifier>*</modifier></type><name>bnd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>RFlag</name> <modifier>*</modifier></type> <name>r_flag_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlag</name> <modifier>*</modifier></type> <name>r_flag_free</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_exist_at</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag_prefix</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>fp_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_get</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_get_i</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_get_by_spaces</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_get_at</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>closest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_all_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>by_space</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>RList</name><modifier>*</modifier></type> <name>r_flag_get_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_flag_get_liststr</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_unset</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_unset_name</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_unset_off</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_unset_all</name> <parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_set</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_set_next</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_item_set_alias</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_item_free</name> <parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_item_set_comment</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_item_set_realname</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>realname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_flag_item_set_color</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_flag_item_clone</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_flag_unset_glob</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_flag_rename</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_flag_relocate</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off_mask</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_move</name> <parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_flag_color</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_flag_count</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach_prefix</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pfx_len</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach_range</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach_glob</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach_space</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_foreach_space_glob</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><name>RFlagItemCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>r_flag_space_get</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>r_flag_space_cur</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_flag_space_cur_name</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_current_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>r_flag_space_set</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_flag_space_unset</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_unset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_flag_space_rename</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_rename</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>oname</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_flag_space_push</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_flag_space_pop</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>r_flag_space_count</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_count</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_flag_space_is_empty</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_spaces_is_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_flag_space_foreach</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_spaces_foreach (&amp;(f)-&gt;spaces, (it), (s))</cpp:value></cpp:define>


<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_tags_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_tags_set</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>words</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_tags_reset</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_tags_get</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_flag_zone_item_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_add</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_del</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_around</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>fz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_reset</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_zone_barlist</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
