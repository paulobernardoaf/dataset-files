<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\sflib\common\sftypes.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SFTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTYPES_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>((void*)0)</cpp:value></cpp:define>



<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uint64_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>uint16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>int64_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>int32_t</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>int16_t</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>int8_t</name>;</typedef>


<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>ssize_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>size_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>off_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>mode_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>clock_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>uid_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>gid_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sighandler_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>dirent</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>d_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>d_reclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>d_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tms</name> <block>{
<decl_stmt><decl><type><name>clock_t</name></type> <name>tms_utime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>clock_t</name></type> <name>tms_stime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>clock_t</name></type> <name>tms_cutime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>clock_t</name></type> <name>tms_cstime</name></decl>;</decl_stmt> 
}</block>;</struct>
<typedef>typedef <type><name>int</name></type> <name>dev_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>caddr_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>sigset_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>cap_user_header_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>cap_user_data_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>time_t</name>;</typedef>
<struct>struct <name>vm86plus_struct</name> <block>{}</block>;</struct>
<typedef>typedef <type><name>int</name></type> <name>ptrdiff_t</name>;</typedef>
<struct>struct <name>utimbuf</name> <block>{}</block>;</struct>
<struct>struct <name>__sysctl_args</name> <block>{}</block>;</struct>
<struct>struct <name>timezone</name> <block>{}</block>;</struct>
<struct>struct <name>sysinfo</name><block>{}</block>;</struct>
<struct>struct <name>iovec</name> <block>{}</block>;</struct>
<struct>struct <name>statfs</name> <block>{}</block>;</struct>
<struct>struct <name>pollfd</name> <block>{}</block>;</struct>
<struct>struct <name>kernel_sym</name> <block>{}</block>;</struct>
<struct>struct <name>module</name> <block>{}</block>;</struct>
<struct>struct <name>utsname</name> <block>{}</block>;</struct>
<struct>struct <name>ustat</name> <block>{}</block>;</struct>
<struct>struct <name>stat</name> <block>{}</block>;</struct>
<struct>struct <name>sched_param</name> <block>{}</block>;</struct>
<struct>struct <name>timeval</name> 
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>tv_sec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>tv_usec</name></decl>;</decl_stmt> 
}</block>;</struct>
<struct>struct <name>timespec</name>
<block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>tv_sec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>tv_nsec</name></decl>;</decl_stmt> 
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROT_READ</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROT_WRITE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROT_EXEC</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROT_NONE</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_SHARED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_PRIVATE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_TYPE</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FIXED</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANONYMOUS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANON</name></cpp:macro> <cpp:value>MAP_ANONYMOUS</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPERM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOENT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESRCH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENXIO</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E2BIG</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOEXEC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBADF</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHILD</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGAIN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOMEM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACCES</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFAULT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTBLK</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBUSY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EEXIST</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXDEV</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENODEV</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTDIR</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EISDIR</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINVAL</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENFILE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMFILE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTTY</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETXTBSY</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFBIG</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOSPC</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESPIPE</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EROFS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMLINK</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPIPE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDOM</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERANGE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESTRPIPE</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EUSERS</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTSOCK</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDESTADDRREQ</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSGSIZE</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPROTOTYPE</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOPROTOOPT</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPROTONOSUPPORT</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESOCKTNOSUPPORT</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOPNOTSUPP</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPFNOSUPPORT</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAFNOSUPPORT</name></cpp:macro> <cpp:value>97</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EADDRINUSE</name></cpp:macro> <cpp:value>98</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EADDRNOTAVAIL</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETDOWN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETUNREACH</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETRESET</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNABORTED</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNRESET</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOBUFS</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EISCONN</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTCONN</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESHUTDOWN</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETOOMANYREFS</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETIMEDOUT</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNREFUSED</name></cpp:macro> <cpp:value>111</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EHOSTDOWN</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EHOSTUNREACH</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALREADY</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINPROGRESS</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESTALE</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EUCLEAN</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTNAM</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENAVAIL</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EISNAM</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EREMOTEIO</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDQUOT</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define> 





<typedef>typedef <type><name>long</name> <name>int</name></type> <name>fd_mask</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SETSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFDBITS</name></cpp:macro> <cpp:value>(8 * sizeof (fd_mask))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FDELT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) / NFDBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDMASK</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fd_mask) 1 &lt;&lt; ((d) % NFDBITS))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>fd_mask</name></type> <name><name>fds_bits</name><index>[<expr><name>FD_SETSIZE</name> <operator>/</operator> <name>NFDBITS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>fd_set</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FDS_BITS</name><parameter_list>(<parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((set)-&gt;fds_bits)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ZERO</name><parameter_list>(<parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned int __i; fd_set *__arr = (set); for (__i = 0; __i &lt; sizeof (fd_set) / sizeof (fd_mask); ++__i) __FDS_BITS (__arr)[__i] = 0; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SET</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__FDS_BITS (set)[__FDELT (d)] |= FDMASK (d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__FDS_BITS (set)[__FDELT (d)] &amp;= ~FDMASK (d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ISSET</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__FDS_BITS (set)[__FDELT (d)] &amp; FDMASK (d))</cpp:value></cpp:define>




<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>socklen_t</name>;</typedef>


<enum>enum <name>__socket_type</name>
<block>{
<decl><name>SOCK_STREAM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_STREAM</name></cpp:macro> <cpp:value>SOCK_STREAM</cpp:value></cpp:define>
<decl><name>SOCK_DGRAM</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_DGRAM</name></cpp:macro> <cpp:value>SOCK_DGRAM</cpp:value></cpp:define>
<decl><name>SOCK_RAW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_RAW</name></cpp:macro> <cpp:value>SOCK_RAW</cpp:value></cpp:define>
<decl><name>SOCK_RDM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_RDM</name></cpp:macro> <cpp:value>SOCK_RDM</cpp:value></cpp:define>
<decl><name>SOCK_SEQPACKET</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_SEQPACKET</name></cpp:macro> <cpp:value>SOCK_SEQPACKET</cpp:value></cpp:define>
<decl><name>SOCK_PACKET</name> <init>= <expr><literal type="number">10</literal></expr></init></decl> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_PACKET</name></cpp:macro> <cpp:value>SOCK_PACKET</cpp:value></cpp:define>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_UNSPEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_LOCAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_UNIX</name></cpp:macro> <cpp:value>PF_LOCAL</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_FILE</name></cpp:macro> <cpp:value>PF_LOCAL</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_INET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_AX25</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_IPX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_APPLETALK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_NETROM</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_BRIDGE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ATMPVC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_X25</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_INET6</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_INET6</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ROSE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_DECnet</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_NETBEUI</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_SECURITY</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_KEY</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_NETLINK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ROUTE</name></cpp:macro> <cpp:value>PF_NETLINK</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_PACKET</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ASH</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ECONET</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ATMSVC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_SNA</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_IRDA</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_PPPOX</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_WANPIPE</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_BLUETOOTH</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_UNSPEC</name></cpp:macro> <cpp:value>PF_UNSPEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_LOCAL</name></cpp:macro> <cpp:value>PF_LOCAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_UNIX</name></cpp:macro> <cpp:value>PF_UNIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_FILE</name></cpp:macro> <cpp:value>PF_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_INET</name></cpp:macro> <cpp:value>PF_INET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_AX25</name></cpp:macro> <cpp:value>PF_AX25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_IPX</name></cpp:macro> <cpp:value>PF_IPX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_APPLETALK</name></cpp:macro> <cpp:value>PF_APPLETALK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_NETROM</name></cpp:macro> <cpp:value>PF_NETROM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_BRIDGE</name></cpp:macro> <cpp:value>PF_BRIDGE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ATMPVC</name></cpp:macro> <cpp:value>PF_ATMPVC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_X25</name></cpp:macro> <cpp:value>PF_X25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_INET6</name></cpp:macro> <cpp:value>PF_INET6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ROSE</name></cpp:macro> <cpp:value>PF_ROSE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_DECnet</name></cpp:macro> <cpp:value>PF_DECnet</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_NETBEUI</name></cpp:macro> <cpp:value>PF_NETBEUI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_SECURITY</name></cpp:macro> <cpp:value>PF_SECURITY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_KEY</name></cpp:macro> <cpp:value>PF_KEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_NETLINK</name></cpp:macro> <cpp:value>PF_NETLINK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ROUTE</name></cpp:macro> <cpp:value>PF_ROUTE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_PACKET</name></cpp:macro> <cpp:value>PF_PACKET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ASH</name></cpp:macro> <cpp:value>PF_ASH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ECONET</name></cpp:macro> <cpp:value>PF_ECONET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ATMSVC</name></cpp:macro> <cpp:value>PF_ATMSVC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_SNA</name></cpp:macro> <cpp:value>PF_SNA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_IRDA</name></cpp:macro> <cpp:value>PF_IRDA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_PPPOX</name></cpp:macro> <cpp:value>PF_PPPOX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_WANPIPE</name></cpp:macro> <cpp:value>PF_WANPIPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_BLUETOOTH</name></cpp:macro> <cpp:value>PF_BLUETOOTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_MAX</name></cpp:macro> <cpp:value>PF_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_RAW</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_DECNET</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_X25</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_PACKET</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_ATM</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_AAL</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_IRDA</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>sa_family_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SOCKADDR_COMMON</name><parameter_list>(<parameter><type><name>sa_prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sa_family_t sa_prefix##family</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SOCKADDR_COMMON_SIZE</name></cpp:macro> <cpp:value>(sizeof (unsigned short int))</cpp:value></cpp:define>

<struct>struct <name>sockaddr</name>
<block>{
<expr_stmt><expr><call><name>__SOCKADDR_COMMON</name> <argument_list>(<argument><expr><name>sa_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>sa_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>in_addr_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>in_port_t</name>;</typedef>
<struct>struct <name>in_addr</name>
<block>{
<decl_stmt><decl><type><name>in_addr_t</name></type> <name>s_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sockaddr_in</name>
<block>{
<expr_stmt><expr><call><name>__SOCKADDR_COMMON</name> <argument_list>(<argument><expr><name>sin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>in_port_t</name></type> <name>sin_port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>sin_addr</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sin_zero</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<name>__SOCKADDR_COMMON_SIZE</name> <operator>-</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name>in_port_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<sizeof>sizeof <argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sockaddr_un</name>
<block>{
<expr_stmt><expr><call><name>__SOCKADDR_COMMON</name> <argument_list>(<argument><expr><name>sun_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sun_path</name><index>[<expr><literal type="number">108</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>in6_addr</name>
<block>{
<union>union
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>__u6_addr8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__in6_u</name></decl>;</union>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN6ADDR_ANY_INIT</name></cpp:macro> <cpp:value>{{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name></type> <name>in6addr_any</name> <init>= <expr><name>IN6ADDR_ANY_INIT</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>sockaddr_in6</name>
<block>{
<expr_stmt><expr><call><name>__SOCKADDR_COMMON</name> <argument_list>(<argument><expr><name>sin6_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>in_port_t</name></type> <name>sin6_port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sin6_flowinfo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>sin6_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sin6_scope_id</name></decl>;</decl_stmt> 
}</block>;</struct>



<enum>enum
<block>{
<decl><name>SCM_RIGHTS</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCM_RIGHTS</name></cpp:macro> <cpp:value>SCM_RIGHTS</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USE_BSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>SCM_CREDENTIALS</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCM_CREDENTIALS</name></cpp:macro> <cpp:value>SCM_CREDENTIALS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>__SCM_CONNECT</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl> 
}</block>;</enum>

<struct>struct <name>msghdr</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>socklen_t</name></type> <name>msg_namelen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>msg_iov</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>msg_iovlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg_control</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>msg_controllen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>msg_flags</name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>cmsghdr</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>cmsg_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cmsg_level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmsg_type</name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_DATA</name><parameter_list>(<parameter><type><name>cmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char *) ((struct cmsghdr *) (cmsg) + 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_NXTHDR</name><parameter_list>(<parameter><type><name>mhdr</name></type></parameter>, <parameter><type><name>cmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__cmsg_nxthdr (mhdr, cmsg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_FIRSTHDR</name><parameter_list>(<parameter><type><name>mhdr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) (mhdr)-&gt;msg_controllen &gt;= sizeof (struct cmsghdr) ? (struct cmsghdr *) (mhdr)-&gt;msg_control : (struct cmsghdr *) NULL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_ALIGN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((len) + sizeof (size_t) - 1) &amp; (size_t) ~(sizeof (size_t) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_SPACE</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CMSG_ALIGN (len) + CMSG_ALIGN (sizeof (struct cmsghdr)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_LEN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CMSG_ALIGN (sizeof (struct cmsghdr)) + (len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_SOCKET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_REUSEADDR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_TYPE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_ERROR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_DONTROUTE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_BROADCAST</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SNDBUF</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_RCVBUF</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_KEEPALIVE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_OOBINLINE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_NO_CHECK</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PRIORITY</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_LINGER</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_BSDCOMPAT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PASSCRED</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PEERCRED</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_RCVLOWAT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SNDLOWAT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_RCVTIMEO</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SNDTIMEO</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SECURITY_AUTHENTICATION</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SECURITY_ENCRYPTION_TRANSPORT</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SECURITY_ENCRYPTION_NETWORK</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_BINDTODEVICE</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_ATTACH_FILTER</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_DETACH_FILTER</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PEERNAME</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_TIMESTAMP</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCM_TIMESTAMP</name></cpp:macro> <cpp:value>SO_TIMESTAMP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_ACCEPTCONN</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)|(y)&lt;&lt;8|(z)&lt;&lt;16|(t)&lt;&lt;24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htons</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)|(y)&lt;&lt;8|(z)&lt;&lt;16|(t)&lt;&lt;24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htons</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;0xff)&lt;&lt;8)|(((x)&gt;&gt;8)&amp;0xff))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>htons(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_IN</name><parameter_list>(<parameter><type><name>sa</name></type></parameter>, <parameter><type><name>ip</name></type></parameter>, <parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ (sa).sin_family=PF_INET; (sa).sin_port=(htons(port)); (sa).sin_addr.s_addr=(ip); }while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ACCMODE</name></cpp:macro> <cpp:value>0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDONLY</name></cpp:macro> <cpp:value>00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_WRONLY</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDWR</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CREAT</name></cpp:macro> <cpp:value>0100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_EXCL</name></cpp:macro> <cpp:value>0200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NOCTTY</name></cpp:macro> <cpp:value>0400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_TRUNC</name></cpp:macro> <cpp:value>01000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_APPEND</name></cpp:macro> <cpp:value>02000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NONBLOCK</name></cpp:macro> <cpp:value>04000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NDELAY</name></cpp:macro> <cpp:value>O_NONBLOCK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_SYNC</name></cpp:macro> <cpp:value>010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASYNC</name></cpp:macro> <cpp:value>020000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DIRECT</name></cpp:macro> <cpp:value>040000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_LARGEFILE</name></cpp:macro> <cpp:value>0100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DIRECTORY</name></cpp:macro> <cpp:value>0200000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NOFOLLOW</name></cpp:macro> <cpp:value>0400000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DUPFD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETFD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETFD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETFL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETFL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETLK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETLK</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETLKW</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETOWN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETOWN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETSIG</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETSIG</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETLK64</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETLK64</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETLKW64</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLOEXEC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RDLCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_WRLCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_UNLCK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_EXLCK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SHLCK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_INPROGRESS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_SH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_EX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_NB</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_UN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_MAND</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_READ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_WRITE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_RW</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define> 





<enum>enum <name>__ptrace_request</name>
<block>{



<decl><name>PTRACE_TRACEME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_TRACE_ME</name></cpp:macro> <cpp:value>PTRACE_TRACEME</cpp:value></cpp:define>


<decl><name>PTRACE_PEEKTEXT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_READ_I</name></cpp:macro> <cpp:value>PTRACE_PEEKTEXT</cpp:value></cpp:define>


<decl><name>PTRACE_PEEKDATA</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_READ_D</name></cpp:macro> <cpp:value>PTRACE_PEEKDATA</cpp:value></cpp:define>


<decl><name>PTRACE_PEEKUSER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_READ_U</name></cpp:macro> <cpp:value>PTRACE_PEEKUSER</cpp:value></cpp:define>


<decl><name>PTRACE_POKETEXT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_WRITE_I</name></cpp:macro> <cpp:value>PTRACE_POKETEXT</cpp:value></cpp:define>


<decl><name>PTRACE_POKEDATA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_WRITE_D</name></cpp:macro> <cpp:value>PTRACE_POKEDATA</cpp:value></cpp:define>


<decl><name>PTRACE_POKEUSER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_WRITE_U</name></cpp:macro> <cpp:value>PTRACE_POKEUSER</cpp:value></cpp:define>


<decl><name>PTRACE_CONT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_CONTINUE</name></cpp:macro> <cpp:value>PTRACE_CONT</cpp:value></cpp:define>


<decl><name>PTRACE_KILL</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_KILL</name></cpp:macro> <cpp:value>PTRACE_KILL</cpp:value></cpp:define>



<decl><name>PTRACE_SINGLESTEP</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_STEP</name></cpp:macro> <cpp:value>PTRACE_SINGLESTEP</cpp:value></cpp:define>



<decl><name>PTRACE_GETREGS</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GETREGS</name></cpp:macro> <cpp:value>PTRACE_GETREGS</cpp:value></cpp:define>



<decl><name>PTRACE_SETREGS</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SETREGS</name></cpp:macro> <cpp:value>PTRACE_SETREGS</cpp:value></cpp:define>



<decl><name>PTRACE_GETFPREGS</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GETFPREGS</name></cpp:macro> <cpp:value>PTRACE_GETFPREGS</cpp:value></cpp:define>



<decl><name>PTRACE_SETFPREGS</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SETFPREGS</name></cpp:macro> <cpp:value>PTRACE_SETFPREGS</cpp:value></cpp:define>


<decl><name>PTRACE_ATTACH</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_ATTACH</name></cpp:macro> <cpp:value>PTRACE_ATTACH</cpp:value></cpp:define>


<decl><name>PTRACE_DETACH</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_DETACH</name></cpp:macro> <cpp:value>PTRACE_DETACH</cpp:value></cpp:define>



<decl><name>PTRACE_GETFPXREGS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GETFPXREGS</name></cpp:macro> <cpp:value>PTRACE_GETFPXREGS</cpp:value></cpp:define>



<decl><name>PTRACE_SETFPXREGS</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SETFPXREGS</name></cpp:macro> <cpp:value>PTRACE_SETFPXREGS</cpp:value></cpp:define>


<decl><name>PTRACE_SYSCALL</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SYSCALL</name></cpp:macro> <cpp:value>PTRACE_SYSCALL</cpp:value></cpp:define>
}</block>;</enum>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_NRBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_TYPEBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_SIZEBITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_DIRBITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_NRMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; _IOC_NRBITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_TYPEMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; _IOC_TYPEBITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_SIZEMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; _IOC_SIZEBITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_DIRMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; _IOC_DIRBITS)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_NRSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_TYPESHIFT</name></cpp:macro> <cpp:value>(_IOC_NRSHIFT+_IOC_NRBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_SIZESHIFT</name></cpp:macro> <cpp:value>(_IOC_TYPESHIFT+_IOC_TYPEBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_DIRSHIFT</name></cpp:macro> <cpp:value>(_IOC_SIZESHIFT+_IOC_SIZEBITS)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_NONE</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_WRITE</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_READ</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((dir) &lt;&lt; _IOC_DIRSHIFT) | ((type) &lt;&lt; _IOC_TYPESHIFT) | ((nr) &lt;&lt; _IOC_NRSHIFT) | ((size) &lt;&lt; _IOC_SIZESHIFT))</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>__invalid_size_argument_for_IOC</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_TYPECHECK</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(t) == sizeof(t[1]) &amp;&amp; sizeof(t) &lt; (1 &lt;&lt; _IOC_SIZEBITS)) ? sizeof(t) : __invalid_size_argument_for_IOC)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IO</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_NONE,(type),(nr),0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOW</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOWR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOR_BAD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_READ,(type),(nr),sizeof(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOW_BAD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_WRITE,(type),(nr),sizeof(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOWR_BAD</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_DIR</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; _IOC_DIRSHIFT) &amp; _IOC_DIRMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_TYPE</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; _IOC_TYPESHIFT) &amp; _IOC_TYPEMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_NR</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; _IOC_NRSHIFT) &amp; _IOC_NRMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IOC_SIZE</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; _IOC_SIZESHIFT) &amp; _IOC_SIZEMASK)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_IN</name></cpp:macro> <cpp:value>(_IOC_WRITE &lt;&lt; _IOC_DIRSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_OUT</name></cpp:macro> <cpp:value>(_IOC_READ &lt;&lt; _IOC_DIRSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_INOUT</name></cpp:macro> <cpp:value>((_IOC_WRITE|_IOC_READ) &lt;&lt; _IOC_DIRSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCSIZE_MASK</name></cpp:macro> <cpp:value>(_IOC_SIZEMASK &lt;&lt; _IOC_SIZESHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCSIZE_SHIFT</name></cpp:macro> <cpp:value>(_IOC_SIZESHIFT)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCGETS</name></cpp:macro> <cpp:value>0x5401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETS</name></cpp:macro> <cpp:value>0x5402</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETSW</name></cpp:macro> <cpp:value>0x5403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETSF</name></cpp:macro> <cpp:value>0x5404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCGETA</name></cpp:macro> <cpp:value>0x5405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETA</name></cpp:macro> <cpp:value>0x5406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETAW</name></cpp:macro> <cpp:value>0x5407</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETAF</name></cpp:macro> <cpp:value>0x5408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSBRK</name></cpp:macro> <cpp:value>0x5409</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCXONC</name></cpp:macro> <cpp:value>0x540A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCFLSH</name></cpp:macro> <cpp:value>0x540B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCEXCL</name></cpp:macro> <cpp:value>0x540C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCNXCL</name></cpp:macro> <cpp:value>0x540D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSCTTY</name></cpp:macro> <cpp:value>0x540E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGPGRP</name></cpp:macro> <cpp:value>0x540F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSPGRP</name></cpp:macro> <cpp:value>0x5410</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCOUTQ</name></cpp:macro> <cpp:value>0x5411</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSTI</name></cpp:macro> <cpp:value>0x5412</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGWINSZ</name></cpp:macro> <cpp:value>0x5413</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSWINSZ</name></cpp:macro> <cpp:value>0x5414</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCMGET</name></cpp:macro> <cpp:value>0x5415</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCMBIS</name></cpp:macro> <cpp:value>0x5416</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCMBIC</name></cpp:macro> <cpp:value>0x5417</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCMSET</name></cpp:macro> <cpp:value>0x5418</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGSOFTCAR</name></cpp:macro> <cpp:value>0x5419</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSSOFTCAR</name></cpp:macro> <cpp:value>0x541A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONREAD</name></cpp:macro> <cpp:value>0x541B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCINQ</name></cpp:macro> <cpp:value>FIONREAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCLINUX</name></cpp:macro> <cpp:value>0x541C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCCONS</name></cpp:macro> <cpp:value>0x541D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGSERIAL</name></cpp:macro> <cpp:value>0x541E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSSERIAL</name></cpp:macro> <cpp:value>0x541F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT</name></cpp:macro> <cpp:value>0x5420</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONBIO</name></cpp:macro> <cpp:value>0x5421</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCNOTTY</name></cpp:macro> <cpp:value>0x5422</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSETD</name></cpp:macro> <cpp:value>0x5423</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGETD</name></cpp:macro> <cpp:value>0x5424</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSBRKP</name></cpp:macro> <cpp:value>0x5425</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSBRK</name></cpp:macro> <cpp:value>0x5427</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCCBRK</name></cpp:macro> <cpp:value>0x5428</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGSID</name></cpp:macro> <cpp:value>0x5429</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGPTN</name></cpp:macro> <cpp:value>_IOR('T',0x30, unsigned int)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSPTLCK</name></cpp:macro> <cpp:value>_IOW('T',0x31, int)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONCLEX</name></cpp:macro> <cpp:value>0x5450</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIOCLEX</name></cpp:macro> <cpp:value>0x5451</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIOASYNC</name></cpp:macro> <cpp:value>0x5452</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERCONFIG</name></cpp:macro> <cpp:value>0x5453</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERGWILD</name></cpp:macro> <cpp:value>0x5454</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERSWILD</name></cpp:macro> <cpp:value>0x5455</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGLCKTRMIOS</name></cpp:macro> <cpp:value>0x5456</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSLCKTRMIOS</name></cpp:macro> <cpp:value>0x5457</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERGSTRUCT</name></cpp:macro> <cpp:value>0x5458</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERGETLSR</name></cpp:macro> <cpp:value>0x5459</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERGETMULTI</name></cpp:macro> <cpp:value>0x545A</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSERSETMULTI</name></cpp:macro> <cpp:value>0x545B</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCMIWAIT</name></cpp:macro> <cpp:value>0x545C</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGICOUNT</name></cpp:macro> <cpp:value>0x545D</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGHAYESESP</name></cpp:macro> <cpp:value>0x545E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSHAYESESP</name></cpp:macro> <cpp:value>0x545F</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIOQSIZE</name></cpp:macro> <cpp:value>0x5460</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_DATA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_FLUSHREAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_FLUSHWRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_STOP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_START</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_NOSTOP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_DOSTOP</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSER_TEMT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 






<struct>struct <name>winsize</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_xpixel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_ypixel</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<struct>struct <name>termio</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>c_iflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>c_oflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>c_cflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>c_lflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c_cc</name><index>[<expr><name>NCC</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_LE</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_DTR</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_RTS</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_ST</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_SR</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_CTS</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_CAR</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_RNG</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_DSR</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_CD</name></cpp:macro> <cpp:value>TIOCM_CAR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_RI</name></cpp:macro> <cpp:value>TIOCM_RNG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_OUT1</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_OUT2</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCM_LOOP</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SLIP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_MOUSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_PPP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_STRIP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_AX25</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_X25</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_6PACK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_MASC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_R3964</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_PROFIBUS_FDL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_IRDA</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SMSBLOCK</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_HDLC</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SYNC_PPP</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_HCI</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>cc_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>speed_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>tcflag_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCS</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<struct>struct <name>termios</name> <block>{
<decl_stmt><decl><type><name>tcflag_t</name></type> <name>c_iflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tcflag_t</name></type> <name>c_oflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tcflag_t</name></type> <name>c_cflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tcflag_t</name></type> <name>c_lflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cc_t</name></type> <name>c_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cc_t</name></type> <name><name>c_cc</name><index>[<expr><name>NCCS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VINTR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VQUIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERASE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKILL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTIME</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMIN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSWTC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTART</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTOP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUSP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOL</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VREPRINT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VDISCARD</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VWERASE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLNEXT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOL2</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNBRK</name></cpp:macro> <cpp:value>0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRKINT</name></cpp:macro> <cpp:value>0000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNPAR</name></cpp:macro> <cpp:value>0000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARMRK</name></cpp:macro> <cpp:value>0000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPCK</name></cpp:macro> <cpp:value>0000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISTRIP</name></cpp:macro> <cpp:value>0000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLCR</name></cpp:macro> <cpp:value>0000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNCR</name></cpp:macro> <cpp:value>0000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICRNL</name></cpp:macro> <cpp:value>0000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IUCLC</name></cpp:macro> <cpp:value>0001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IXON</name></cpp:macro> <cpp:value>0002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IXANY</name></cpp:macro> <cpp:value>0004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IXOFF</name></cpp:macro> <cpp:value>0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAXBEL</name></cpp:macro> <cpp:value>0020000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPOST</name></cpp:macro> <cpp:value>0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLCUC</name></cpp:macro> <cpp:value>0000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONLCR</name></cpp:macro> <cpp:value>0000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCRNL</name></cpp:macro> <cpp:value>0000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONOCR</name></cpp:macro> <cpp:value>0000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONLRET</name></cpp:macro> <cpp:value>0000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFILL</name></cpp:macro> <cpp:value>0000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFDEL</name></cpp:macro> <cpp:value>0000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLDLY</name></cpp:macro> <cpp:value>0000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL1</name></cpp:macro> <cpp:value>0000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRDLY</name></cpp:macro> <cpp:value>0003000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR1</name></cpp:macro> <cpp:value>0001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR2</name></cpp:macro> <cpp:value>0002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR3</name></cpp:macro> <cpp:value>0003000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABDLY</name></cpp:macro> <cpp:value>0014000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB1</name></cpp:macro> <cpp:value>0004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB2</name></cpp:macro> <cpp:value>0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB3</name></cpp:macro> <cpp:value>0014000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTABS</name></cpp:macro> <cpp:value>0014000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDLY</name></cpp:macro> <cpp:value>0020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS1</name></cpp:macro> <cpp:value>0020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTDLY</name></cpp:macro> <cpp:value>0040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT1</name></cpp:macro> <cpp:value>0040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFDLY</name></cpp:macro> <cpp:value>0100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF1</name></cpp:macro> <cpp:value>0100000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBAUD</name></cpp:macro> <cpp:value>0010017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B50</name></cpp:macro> <cpp:value>0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B75</name></cpp:macro> <cpp:value>0000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B110</name></cpp:macro> <cpp:value>0000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B134</name></cpp:macro> <cpp:value>0000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B150</name></cpp:macro> <cpp:value>0000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B200</name></cpp:macro> <cpp:value>0000006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B300</name></cpp:macro> <cpp:value>0000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B600</name></cpp:macro> <cpp:value>0000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1200</name></cpp:macro> <cpp:value>0000011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1800</name></cpp:macro> <cpp:value>0000012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B2400</name></cpp:macro> <cpp:value>0000013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B4800</name></cpp:macro> <cpp:value>0000014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B9600</name></cpp:macro> <cpp:value>0000015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B19200</name></cpp:macro> <cpp:value>0000016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B38400</name></cpp:macro> <cpp:value>0000017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTA</name></cpp:macro> <cpp:value>B19200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTB</name></cpp:macro> <cpp:value>B38400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIZE</name></cpp:macro> <cpp:value>0000060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS5</name></cpp:macro> <cpp:value>0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS6</name></cpp:macro> <cpp:value>0000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS7</name></cpp:macro> <cpp:value>0000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS8</name></cpp:macro> <cpp:value>0000060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTOPB</name></cpp:macro> <cpp:value>0000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREAD</name></cpp:macro> <cpp:value>0000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARENB</name></cpp:macro> <cpp:value>0000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARODD</name></cpp:macro> <cpp:value>0001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUPCL</name></cpp:macro> <cpp:value>0002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCAL</name></cpp:macro> <cpp:value>0004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBAUDEX</name></cpp:macro> <cpp:value>0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B57600</name></cpp:macro> <cpp:value>0010001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B115200</name></cpp:macro> <cpp:value>0010002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B230400</name></cpp:macro> <cpp:value>0010003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B460800</name></cpp:macro> <cpp:value>0010004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B500000</name></cpp:macro> <cpp:value>0010005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B576000</name></cpp:macro> <cpp:value>0010006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B921600</name></cpp:macro> <cpp:value>0010007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1000000</name></cpp:macro> <cpp:value>0010010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1152000</name></cpp:macro> <cpp:value>0010011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1500000</name></cpp:macro> <cpp:value>0010012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B2000000</name></cpp:macro> <cpp:value>0010013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B2500000</name></cpp:macro> <cpp:value>0010014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B3000000</name></cpp:macro> <cpp:value>0010015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B3500000</name></cpp:macro> <cpp:value>0010016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B4000000</name></cpp:macro> <cpp:value>0010017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIBAUD</name></cpp:macro> <cpp:value>002003600000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSPAR</name></cpp:macro> <cpp:value>010000000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRTSCTS</name></cpp:macro> <cpp:value>020000000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIG</name></cpp:macro> <cpp:value>0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICANON</name></cpp:macro> <cpp:value>0000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCASE</name></cpp:macro> <cpp:value>0000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHO</name></cpp:macro> <cpp:value>0000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOE</name></cpp:macro> <cpp:value>0000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOK</name></cpp:macro> <cpp:value>0000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHONL</name></cpp:macro> <cpp:value>0000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFLSH</name></cpp:macro> <cpp:value>0000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOSTOP</name></cpp:macro> <cpp:value>0000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOCTL</name></cpp:macro> <cpp:value>0001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOPRT</name></cpp:macro> <cpp:value>0002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOKE</name></cpp:macro> <cpp:value>0004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSHO</name></cpp:macro> <cpp:value>0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PENDIN</name></cpp:macro> <cpp:value>0040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEXTEN</name></cpp:macro> <cpp:value>0100000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCOOFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCOON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCIOFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCIFLUSH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCOFLUSH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCIOFLUSH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSANOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSADRAIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSAFLUSH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<typedef>typedef <type><name>uint16_t</name></type> <name>Elf32_Half</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>Elf64_Half</name>;</typedef>


<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Word</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>Elf32_Sword</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>Elf64_Word</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>Elf64_Sword</name>;</typedef>


<typedef>typedef <type><name>uint64_t</name></type> <name>Elf32_Xword</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>Elf32_Sxword</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Xword</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>Elf64_Sxword</name>;</typedef>


<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Addr</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Addr</name>;</typedef>


<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Off</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Off</name>;</typedef>


<typedef>typedef <type><name>uint16_t</name></type> <name>Elf32_Section</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>Elf64_Section</name>;</typedef>


<typedef>typedef <type><name>Elf32_Half</name></type> <name>Elf32_Versym</name>;</typedef>
<typedef>typedef <type><name>Elf64_Half</name></type> <name>Elf64_Versym</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_NIDENT</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>e_ident</name><index>[<expr><name>EI_NIDENT</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_machine</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>e_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>e_entry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>e_phoff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>e_shoff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>e_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_ehsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_phentsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_phnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shentsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shstrndx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Ehdr</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>e_ident</name><index>[<expr><name>EI_NIDENT</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_machine</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>e_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>e_entry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>e_phoff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>e_shoff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>e_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_ehsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_phentsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_phnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shentsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shstrndx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Ehdr</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG0</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG1</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG2</name></cpp:macro> <cpp:value>'L'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG3</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG</name></cpp:macro> <cpp:value>"\177ELF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELFMAG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_CLASS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASSNONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASS32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASS64</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASSNUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_DATA</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATANONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATA2LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATA2MSB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATANUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_OSABI</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_SYSV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_HPUX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_NETBSD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_LINUX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_SOLARIS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_AIX</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_IRIX</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_FREEBSD</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_TRU64</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_MODESTO</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_OPENBSD</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_ARM</name></cpp:macro> <cpp:value>97</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_STANDALONE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_ABIVERSION</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_PAD</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_REL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_EXEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_DYN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_CORE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_NUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_LOOS</name></cpp:macro> <cpp:value>0xfe00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_HIOS</name></cpp:macro> <cpp:value>0xfeff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_LOPROC</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_HIPROC</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_M32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_386</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68K</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_88K</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_860</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MIPS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_S370</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MIPS_RS3_LE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PARISC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VPP500</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARC32PLUS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_960</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PPC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PPC64</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_S390</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_V800</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FR20</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RH32</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RCE</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARM</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FAKE_ALPHA</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SH</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARCV9</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TRICORE</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARC</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_H8_300</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_H8_300H</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_H8S</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_H8_500</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_IA_64</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MIPS_X</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_COLDFIRE</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68HC12</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MMA</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PCP</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NCPU</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NDR1</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_STARCORE</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ME16</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ST100</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TINYJ</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_X86_64</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PDSP</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FX66</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ST9PLUS</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ST7</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68HC16</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68HC11</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68HC08</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_68HC05</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SVX</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ST19</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VAX</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CRIS</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_JAVELIN</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FIREPATH</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ZSP</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MMIX</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_HUANY</name></cpp:macro> <cpp:value>81</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PRISM</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_AVR</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FR30</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_D10V</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_D30V</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_V850</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_M32R</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MN10300</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MN10200</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PJ</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_OPENRISC</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARC_A5</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_XTENSA</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NUM</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ALPHA</name></cpp:macro> <cpp:value>0x9026</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_CURRENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>sh_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>sh_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_addralign</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_entsize</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Shdr</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>sh_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>sh_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>sh_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>sh_addralign</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>sh_entsize</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Shdr</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_UNDEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_LORESERVE</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_LOPROC</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_BEFORE</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_AFTER</name></cpp:macro> <cpp:value>0xff01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_HIPROC</name></cpp:macro> <cpp:value>0xff1f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_LOOS</name></cpp:macro> <cpp:value>0xff20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_HIOS</name></cpp:macro> <cpp:value>0xff3f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_ABS</name></cpp:macro> <cpp:value>0xfff1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_COMMON</name></cpp:macro> <cpp:value>0xfff2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_XINDEX</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_HIRESERVE</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_PROGBITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SYMTAB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_STRTAB</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_RELA</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_HASH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_DYNAMIC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_NOTE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_NOBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_REL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SHLIB</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_DYNSYM</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_INIT_ARRAY</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_FINI_ARRAY</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_PREINIT_ARRAY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_GROUP</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SYMTAB_SHNDX</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_NUM</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_LOOS</name></cpp:macro> <cpp:value>0x60000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_GNU_LIBLIST</name></cpp:macro> <cpp:value>0x6ffffff7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_CHECKSUM</name></cpp:macro> <cpp:value>0x6ffffff8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_LOSUNW</name></cpp:macro> <cpp:value>0x6ffffffa</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SUNW_move</name></cpp:macro> <cpp:value>0x6ffffffa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SUNW_COMDAT</name></cpp:macro> <cpp:value>0x6ffffffb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SUNW_syminfo</name></cpp:macro> <cpp:value>0x6ffffffc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_GNU_verdef</name></cpp:macro> <cpp:value>0x6ffffffd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_GNU_verneed</name></cpp:macro> <cpp:value>0x6ffffffe</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_GNU_versym</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_HISUNW</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_HIOS</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_LOPROC</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_HIPROC</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_LOUSER</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_HIUSER</name></cpp:macro> <cpp:value>0x8fffffff</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_WRITE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_ALLOC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_EXECINSTR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MERGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_STRINGS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_INFO_LINK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_LINK_ORDER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_OS_NONCONFORMING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_GROUP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_TLS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MASKOS</name></cpp:macro> <cpp:value>0x0ff00000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MASKPROC</name></cpp:macro> <cpp:value>0xf0000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_ORDERED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_EXCLUDE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 31)</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP_COMDAT</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>st_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>st_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>st_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>st_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>st_other</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Section</name></type> <name>st_shndx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Sym</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>st_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>st_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>st_other</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Section</name></type> <name>st_shndx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>st_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>st_size</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Sym</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>si_boundto</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>si_flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Syminfo</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>si_boundto</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>si_flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Syminfo</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_BT_SELF</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_BT_PARENT</name></cpp:macro> <cpp:value>0xfffe</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_BT_LOWRESERVE</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_FLG_DIRECT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_FLG_PASSTHRU</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_FLG_COPY</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_FLG_LAZYLOAD</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_CURRENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMINFO_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_ST_BIND</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned char) (val)) &gt;&gt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_ST_TYPE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) &amp; 0xf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_ST_INFO</name><parameter_list>(<parameter><type><name>bind</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_ST_BIND</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_ST_BIND (val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_ST_TYPE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_ST_TYPE (val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_ST_INFO</name><parameter_list>(<parameter><type><name>bind</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_ST_INFO ((bind), (type))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_LOCAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_GLOBAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_WEAK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_NUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_LOOS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_HIOS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_LOPROC</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_HIPROC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_NOTYPE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_OBJECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_FUNC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_SECTION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_FILE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_COMMON</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_TLS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_NUM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_LOOS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_HIOS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_LOPROC</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_HIPROC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STN_UNDEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_ST_VISIBILITY</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o) &amp; 0x03)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_ST_VISIBILITY</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_ST_VISIBILITY (o)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STV_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STV_INTERNAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STV_HIDDEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STV_PROTECTED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>r_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>r_info</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Rel</name>;</typedef>






<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>r_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Rel</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>r_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>r_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Sword</name></type> <name>r_addend</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Rela</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>r_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Sxword</name></type> <name>r_addend</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Rela</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_R_SYM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) &gt;&gt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_R_TYPE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_R_INFO</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_R_SYM</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &gt;&gt; 32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_R_TYPE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0xffffffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_R_INFO</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>p_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>p_vaddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>p_paddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_filesz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_memsz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_align</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Phdr</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>p_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>p_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>p_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>p_vaddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>p_paddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_filesz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_memsz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_align</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Phdr</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_DYNAMIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_INTERP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NOTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SHLIB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_PHDR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_TLS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOOS</name></cpp:macro> <cpp:value>0x60000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GNU_EH_FRAME</name></cpp:macro> <cpp:value>0x6474e550</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GNU_STACK</name></cpp:macro> <cpp:value>0x6474e551</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_GNU_RELRO</name></cpp:macro> <cpp:value>0x6474e552</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOSUNW</name></cpp:macro> <cpp:value>0x6ffffffa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SUNWBSS</name></cpp:macro> <cpp:value>0x6ffffffa</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SUNWSTACK</name></cpp:macro> <cpp:value>0x6ffffffb</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HISUNW</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HIOS</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOPROC</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HIPROC</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_X</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_W</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_R</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_MASKOS</name></cpp:macro> <cpp:value>0x0ff00000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_MASKPROC</name></cpp:macro> <cpp:value>0xf0000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRSTATUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_FPREGSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRPSINFO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRXREG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_TASKSTRUCT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PLATFORM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_AUXV</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_GWINDOWS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ASRS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PSTATUS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PSINFO</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRCRED</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_UTSNAME</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_LWPSTATUS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_LWPSINFO</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRFPXREG</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Sword</name></type> <name>d_tag</name></decl>;</decl_stmt> 
<union>union
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>d_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>d_ptr</name></decl>;</decl_stmt> 
}</block> <decl><name>d_un</name></decl>;</union>
}</block></struct></type> <name>Elf32_Dyn</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Sxword</name></type> <name>d_tag</name></decl>;</decl_stmt> 
<union>union
<block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>d_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>d_ptr</name></decl>;</decl_stmt> 
}</block> <decl><name>d_un</name></decl>;</union>
}</block></struct></type> <name>Elf64_Dyn</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NEEDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTRELSZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTGOT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HASH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STRTAB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMTAB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELASZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELAENT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STRSZ</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMENT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SONAME</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RPATH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMBOLIC</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_REL</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELSZ</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELENT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTREL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DEBUG</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_TEXTREL</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_JMPREL</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_BIND_NOW</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT_ARRAY</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI_ARRAY</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT_ARRAYSZ</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI_ARRAYSZ</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RUNPATH</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FLAGS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ENCODING</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PREINIT_ARRAY</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PREINIT_ARRAYSZ</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NUM</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LOOS</name></cpp:macro> <cpp:value>0x6000000d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HIOS</name></cpp:macro> <cpp:value>0x6ffff000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LOPROC</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HIPROC</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROCNUM</name></cpp:macro> <cpp:value>DT_MIPS_NUM</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VALRNGLO</name></cpp:macro> <cpp:value>0x6ffffd00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GNU_PRELINKED</name></cpp:macro> <cpp:value>0x6ffffdf5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GNU_CONFLICTSZ</name></cpp:macro> <cpp:value>0x6ffffdf6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GNU_LIBLISTSZ</name></cpp:macro> <cpp:value>0x6ffffdf7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_CHECKSUM</name></cpp:macro> <cpp:value>0x6ffffdf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTPADSZ</name></cpp:macro> <cpp:value>0x6ffffdf9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MOVEENT</name></cpp:macro> <cpp:value>0x6ffffdfa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MOVESZ</name></cpp:macro> <cpp:value>0x6ffffdfb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FEATURE_1</name></cpp:macro> <cpp:value>0x6ffffdfc</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_POSFLAG_1</name></cpp:macro> <cpp:value>0x6ffffdfd</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMINSZ</name></cpp:macro> <cpp:value>0x6ffffdfe</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMINENT</name></cpp:macro> <cpp:value>0x6ffffdff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VALRNGHI</name></cpp:macro> <cpp:value>0x6ffffdff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VALTAGIDX</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DT_VALRNGHI - (tag))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VALNUM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ADDRRNGLO</name></cpp:macro> <cpp:value>0x6ffffe00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GNU_CONFLICT</name></cpp:macro> <cpp:value>0x6ffffef8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GNU_LIBLIST</name></cpp:macro> <cpp:value>0x6ffffef9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_CONFIG</name></cpp:macro> <cpp:value>0x6ffffefa</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DEPAUDIT</name></cpp:macro> <cpp:value>0x6ffffefb</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_AUDIT</name></cpp:macro> <cpp:value>0x6ffffefc</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTPAD</name></cpp:macro> <cpp:value>0x6ffffefd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MOVETAB</name></cpp:macro> <cpp:value>0x6ffffefe</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMINFO</name></cpp:macro> <cpp:value>0x6ffffeff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ADDRRNGHI</name></cpp:macro> <cpp:value>0x6ffffeff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ADDRTAGIDX</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DT_ADDRRNGHI - (tag))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ADDRNUM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSYM</name></cpp:macro> <cpp:value>0x6ffffff0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELACOUNT</name></cpp:macro> <cpp:value>0x6ffffff9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELCOUNT</name></cpp:macro> <cpp:value>0x6ffffffa</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FLAGS_1</name></cpp:macro> <cpp:value>0x6ffffffb</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERDEF</name></cpp:macro> <cpp:value>0x6ffffffc</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERDEFNUM</name></cpp:macro> <cpp:value>0x6ffffffd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERNEED</name></cpp:macro> <cpp:value>0x6ffffffe</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERNEEDNUM</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSIONTAGIDX</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DT_VERNEEDNUM - (tag))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSIONTAGNUM</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_AUXILIARY</name></cpp:macro> <cpp:value>0x7ffffffd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FILTER</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_EXTRATAGIDX</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Elf32_Word)-((Elf32_Sword) (tag) &lt;&lt;1&gt;&gt;1)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_EXTRANUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_ORIGIN</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_SYMBOLIC</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_TEXTREL</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_BIND_NOW</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_STATIC_TLS</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOW</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_GLOBAL</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_GROUP</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODELETE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_LOADFLTR</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_INITFIRST</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOOPEN</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_ORIGIN</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DIRECT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_TRANS</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_INTERPOSE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODEFLIB</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODUMP</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_CONFALT</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_ENDFILTEE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DISPRELDNE</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DISPRELPND</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTF_1_PARINIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTF_1_CONFEXP</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_P1_LAZYLOAD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_P1_GROUPPERM</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vd_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vd_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vd_ndx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vd_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vd_hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vd_aux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vd_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf32_Verdef</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vd_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vd_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vd_ndx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vd_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vd_hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vd_aux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vd_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf64_Verdef</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_DEF_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_DEF_CURRENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_DEF_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_FLG_BASE</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_FLG_WEAK</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NDX_LOCAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NDX_GLOBAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NDX_LORESERVE</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NDX_ELIMINATE</name></cpp:macro> <cpp:value>0xff01</cpp:value></cpp:define> 



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vda_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vda_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf32_Verdaux</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vda_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vda_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf64_Verdaux</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vn_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vn_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vn_file</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vn_aux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vn_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf32_Verneed</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vn_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vn_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vn_file</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vn_aux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vn_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf64_Verneed</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NEED_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NEED_CURRENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NEED_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vna_hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vna_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>vna_other</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vna_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>vna_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf32_Vernaux</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vna_hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vna_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>vna_other</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vna_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>vna_next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Elf64_Vernaux</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_FLG_WEAK</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 











<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_type</name></decl>;</decl_stmt> 
<union>union
<block>{
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>a_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a_ptr</name></decl>;</decl_stmt> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>a_fcn</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block> <decl><name>a_un</name></decl>;</union>
}</block></struct></type> <name>Elf32_auxv_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>a_type</name></decl>;</decl_stmt> 
<union>union
<block>{
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>a_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a_ptr</name></decl>;</decl_stmt> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>a_fcn</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block> <decl><name>a_un</name></decl>;</union>
}</block></struct></type> <name>Elf64_auxv_t</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_IGNORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EXECFD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHDR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHNUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PAGESZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_BASE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FLAGS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_ENTRY</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_NOTELF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_UID</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EUID</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_GID</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EGID</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_CLKTCK</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PLATFORM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_HWCAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FPUCW</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_DCACHEBSIZE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_ICACHEBSIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_UCACHEBSIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_IGNOREPPC</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SECURE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYSINFO</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYSINFO_EHDR</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_L1I_CACHESHAPE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_L1D_CACHESHAPE</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_L2_CACHESHAPE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_L3_CACHESHAPE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_namesz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_descsz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_type</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Nhdr</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_namesz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_descsz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_type</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Nhdr</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_SOLARIS</name></cpp:macro> <cpp:value>"SUNW Solaris"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_GNU</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_PAGESIZE_HINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_ABI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_OS_LINUX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_OS_GNU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_OS_SOLARIS2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_NOTE_OS_FREEBSD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Xword</name></type> <name>m_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>m_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>m_poffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>m_repeat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>m_stride</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Move</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>m_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>m_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>m_poffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>m_repeat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>m_stride</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Move</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_M_SYM</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((info) &gt;&gt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_M_SIZE</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char) (info))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF32_M_INFO</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((sym) &lt;&lt; 8) + (unsigned char) (size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_M_SYM</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_M_SYM (info)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_M_SIZE</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_M_SIZE (info)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF64_M_INFO</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELF32_M_INFO (sym, size)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_CPU32</name></cpp:macro> <cpp:value>0x00810000</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_8</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PC32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PC16</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PC8</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT32</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT16</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT8</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT32O</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT16O</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GOT8O</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT32</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT16</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT8</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT32O</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT16O</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_PLT8O</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_COPY</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_GLOB_DAT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_JMP_SLOT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_RELATIVE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_68K_NUM</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_PC32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_GOT32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_PLT32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_COPY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_GLOB_DAT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_JMP_SLOT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_RELATIVE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_GOTOFF</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_GOTPC</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_32PLT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_TPOFF</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_IE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GOTIE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GD</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDM</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_16</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_PC16</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_8</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_PC8</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GD_32</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GD_PUSH</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GD_CALL</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_GD_POP</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDM_32</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDM_PUSH</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDM_CALL</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDM_POP</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LDO_32</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_IE_32</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_LE_32</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_DTPMOD32</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_DTPOFF32</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_TLS_TPOFF32</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_386_NUM</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_SPARC_REGISTER</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARCV9_MM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARCV9_TSO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARCV9_PSO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARCV9_RMO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_LEDATA</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_EXT_MASK</name></cpp:macro> <cpp:value>0xFFFF00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_32PLUS</name></cpp:macro> <cpp:value>0x000100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_SUN_US1</name></cpp:macro> <cpp:value>0x000200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_HAL_R1</name></cpp:macro> <cpp:value>0x000400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_SPARC_SUN_US3</name></cpp:macro> <cpp:value>0x000800</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_DISP8</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_DISP16</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_DISP32</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_WDISP30</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_WDISP22</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_HI22</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_22</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_13</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_LO10</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_GOT10</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_GOT13</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_GOT22</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PC10</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PC22</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_WPLT30</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_COPY</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_GLOB_DAT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_JMP_SLOT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_RELATIVE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_UA32</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PLT32</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_HIPLT22</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_LOPLT10</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PCPLT32</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PCPLT22</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PCPLT10</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_10</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_11</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_64</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_OLO10</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_HH22</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_HM10</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_LM22</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PC_HH22</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PC_HM10</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PC_LM22</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_WDISP16</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_WDISP19</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_7</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_5</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_6</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_DISP64</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_PLT64</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_HIX22</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_LOX10</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_H44</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_M44</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_L44</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_REGISTER</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_UA64</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_UA16</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_GD_HI22</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_GD_LO10</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_GD_ADD</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_GD_CALL</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDM_HI22</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDM_LO10</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDM_ADD</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDM_CALL</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDO_HIX22</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDO_LOX10</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LDO_ADD</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_IE_HI22</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_IE_LO10</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_IE_LD</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_IE_LDX</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_IE_ADD</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LE_HIX22</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_LE_LOX10</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_DTPMOD32</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_DTPMOD64</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_DTPOFF32</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_DTPOFF64</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_TPOFF32</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_TLS_TPOFF64</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPARC_NUM</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SPARC_REGISTER</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SPARC_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_FLUSH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_STBAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_SWAP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_MULDIV</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_V9</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_SPARC_ULTRA3</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_NOREORDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_PIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_CPIC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_XGOT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_64BIT_WHIRL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ABI2</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ABI_ON32</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH</name></cpp:macro> <cpp:value>0xf0000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_2</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_3</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_4</name></cpp:macro> <cpp:value>0x30000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_5</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_32</name></cpp:macro> <cpp:value>0x60000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_MIPS_ARCH_64</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_2</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_3</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_4</name></cpp:macro> <cpp:value>0x30000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_5</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_32</name></cpp:macro> <cpp:value>0x60000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_MIPS_ARCH_64</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_MIPS_ACOMMON</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_MIPS_TEXT</name></cpp:macro> <cpp:value>0xff01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_MIPS_DATA</name></cpp:macro> <cpp:value>0xff02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_MIPS_SCOMMON</name></cpp:macro> <cpp:value>0xff03</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_MIPS_SUNDEFINED</name></cpp:macro> <cpp:value>0xff04</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_LIBLIST</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_MSYM</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_CONFLICT</name></cpp:macro> <cpp:value>0x70000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_GPTAB</name></cpp:macro> <cpp:value>0x70000003</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_UCODE</name></cpp:macro> <cpp:value>0x70000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DEBUG</name></cpp:macro> <cpp:value>0x70000005</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_REGINFO</name></cpp:macro> <cpp:value>0x70000006</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_PACKAGE</name></cpp:macro> <cpp:value>0x70000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_PACKSYM</name></cpp:macro> <cpp:value>0x70000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_RELD</name></cpp:macro> <cpp:value>0x70000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_IFACE</name></cpp:macro> <cpp:value>0x7000000b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_CONTENT</name></cpp:macro> <cpp:value>0x7000000c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_OPTIONS</name></cpp:macro> <cpp:value>0x7000000d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_SHDR</name></cpp:macro> <cpp:value>0x70000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_FDESC</name></cpp:macro> <cpp:value>0x70000011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_EXTSYM</name></cpp:macro> <cpp:value>0x70000012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DENSE</name></cpp:macro> <cpp:value>0x70000013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_PDESC</name></cpp:macro> <cpp:value>0x70000014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_LOCSYM</name></cpp:macro> <cpp:value>0x70000015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_AUXSYM</name></cpp:macro> <cpp:value>0x70000016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_OPTSYM</name></cpp:macro> <cpp:value>0x70000017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_LOCSTR</name></cpp:macro> <cpp:value>0x70000018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_LINE</name></cpp:macro> <cpp:value>0x70000019</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_RFDESC</name></cpp:macro> <cpp:value>0x7000001a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DELTASYM</name></cpp:macro> <cpp:value>0x7000001b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DELTAINST</name></cpp:macro> <cpp:value>0x7000001c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DELTACLASS</name></cpp:macro> <cpp:value>0x7000001d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DWARF</name></cpp:macro> <cpp:value>0x7000001e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_DELTADECL</name></cpp:macro> <cpp:value>0x7000001f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_SYMBOL_LIB</name></cpp:macro> <cpp:value>0x70000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_EVENTS</name></cpp:macro> <cpp:value>0x70000021</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_TRANSLATE</name></cpp:macro> <cpp:value>0x70000022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_PIXIE</name></cpp:macro> <cpp:value>0x70000023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_XLATE</name></cpp:macro> <cpp:value>0x70000024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_XLATE_DEBUG</name></cpp:macro> <cpp:value>0x70000025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_WHIRL</name></cpp:macro> <cpp:value>0x70000026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_EH_REGION</name></cpp:macro> <cpp:value>0x70000027</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_XLATE_OLD</name></cpp:macro> <cpp:value>0x70000028</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_MIPS_PDR_EXCEPTION</name></cpp:macro> <cpp:value>0x70000029</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_GPREL</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_MERGE</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_ADDR</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_STRINGS</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_NOSTRIP</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_LOCAL</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_NAMES</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_MIPS_NODUPE</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_MIPS_DEFAULT</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_MIPS_INTERNAL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_MIPS_HIDDEN</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_MIPS_PROTECTED</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_MIPS_SC_ALIGN_UNUSED</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_MIPS_SPLIT_COMMON</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>



<typedef>typedef <type><union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>gt_current_g_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>gt_unused</name></decl>;</decl_stmt> 
}</block> <decl><name>gt_header</name></decl>;</struct> 
<struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>gt_g_value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>gt_bytes</name></decl>;</decl_stmt> 
}</block> <decl><name>gt_entry</name></decl>;</struct> 
}</block></union></type> <name>Elf32_gptab</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>ri_gprmask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name><name>ri_cprmask</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Sword</name></type> <name>ri_gp_value</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_RegInfo</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>kind</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Section</name></type> <name>section</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>info</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf_Options</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_REGINFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_EXCEPTIONS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_PAD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_HWPATCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_FILL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_TAGS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_HWAND</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODK_HWOR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_MIN</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_MAX</name></cpp:macro> <cpp:value>0x1f00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_PAGE0</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_SMM</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPDBUG</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_PRECISEFP</name></cpp:macro> <cpp:value>OEX_FPDBUG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_DISMISS</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_INVAL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_DIV0</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_OFLO</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_UFLO</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEX_FPU_INEX</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHW_R4KEOP</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHW_R8KPFETCH</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHW_R5KEOP</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHW_R5KCVTL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAD_PREFIX</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAD_POSTFIX</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAD_SYMBOL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>hwp_flags1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>hwp_flags2</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf_Options_Hw</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHWA0_R4KEOP_CHECKED</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OHWA1_R4KEOP_CLEAN</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_REL32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_26</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_HI16</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_LO16</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GPREL16</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_LITERAL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT16</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_PC16</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_CALL16</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GPREL32</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_SHIFT5</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_SHIFT6</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_64</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT_DISP</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT_PAGE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT_OFST</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT_HI16</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_GOT_LO16</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_SUB</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_INSERT_A</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_INSERT_B</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_DELETE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_HIGHER</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_HIGHEST</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_CALL_HI16</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_CALL_LO16</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_SCN_DISP</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_REL16</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_ADD_IMMEDIATE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_PJUMP</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_RELGOT</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_JALR</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MIPS_NUM</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_MIPS_REGINFO</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_MIPS_RTPROC</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_MIPS_OPTIONS</name></cpp:macro> <cpp:value>0x70000002</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_MIPS_LOCAL</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_RLD_VERSION</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_TIME_STAMP</name></cpp:macro> <cpp:value>0x70000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_ICHECKSUM</name></cpp:macro> <cpp:value>0x70000003</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_IVERSION</name></cpp:macro> <cpp:value>0x70000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_FLAGS</name></cpp:macro> <cpp:value>0x70000005</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_BASE_ADDRESS</name></cpp:macro> <cpp:value>0x70000006</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_MSYM</name></cpp:macro> <cpp:value>0x70000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_CONFLICT</name></cpp:macro> <cpp:value>0x70000008</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_LIBLIST</name></cpp:macro> <cpp:value>0x70000009</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_LOCAL_GOTNO</name></cpp:macro> <cpp:value>0x7000000a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_CONFLICTNO</name></cpp:macro> <cpp:value>0x7000000b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_LIBLISTNO</name></cpp:macro> <cpp:value>0x70000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_SYMTABNO</name></cpp:macro> <cpp:value>0x70000011</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_UNREFEXTNO</name></cpp:macro> <cpp:value>0x70000012</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_GOTSYM</name></cpp:macro> <cpp:value>0x70000013</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_HIPAGENO</name></cpp:macro> <cpp:value>0x70000014</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_RLD_MAP</name></cpp:macro> <cpp:value>0x70000016</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_CLASS</name></cpp:macro> <cpp:value>0x70000017</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_CLASS_NO</name></cpp:macro> <cpp:value>0x70000018</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_INSTANCE</name></cpp:macro> <cpp:value>0x70000019</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_INSTANCE_NO</name></cpp:macro> <cpp:value>0x7000001a</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_RELOC</name></cpp:macro> <cpp:value>0x7000001b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_RELOC_NO</name></cpp:macro> <cpp:value>0x7000001c</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_SYM</name></cpp:macro> <cpp:value>0x7000001d</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_SYM_NO</name></cpp:macro> <cpp:value>0x7000001e</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_CLASSSYM</name></cpp:macro> <cpp:value>0x70000020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DELTA_CLASSSYM_NO</name></cpp:macro> <cpp:value>0x70000021</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_CXX_FLAGS</name></cpp:macro> <cpp:value>0x70000022</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_PIXIE_INIT</name></cpp:macro> <cpp:value>0x70000023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_SYMBOL_LIB</name></cpp:macro> <cpp:value>0x70000024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_LOCALPAGE_GOTIDX</name></cpp:macro> <cpp:value>0x70000025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_LOCAL_GOTIDX</name></cpp:macro> <cpp:value>0x70000026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_HIDDEN_GOTIDX</name></cpp:macro> <cpp:value>0x70000027</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_PROTECTED_GOTIDX</name></cpp:macro> <cpp:value>0x70000028</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_OPTIONS</name></cpp:macro> <cpp:value>0x70000029</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_INTERFACE</name></cpp:macro> <cpp:value>0x7000002a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_DYNSTR_ALIGN</name></cpp:macro> <cpp:value>0x7000002b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_INTERFACE_SIZE</name></cpp:macro> <cpp:value>0x7000002c</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_RLD_TEXT_RESOLVE_ADDR</name></cpp:macro> <cpp:value>0x7000002d</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_PERF_SUFFIX</name></cpp:macro> <cpp:value>0x7000002e</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_COMPACT_SIZE</name></cpp:macro> <cpp:value>0x7000002f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_GP_VALUE</name></cpp:macro> <cpp:value>0x70000030</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_AUX_DYNAMIC</name></cpp:macro> <cpp:value>0x70000031</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MIPS_NUM</name></cpp:macro> <cpp:value>0x32</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_QUICKSTART</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_NOTPOT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_NO_LIBRARY_REPLACEMENT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_NO_MOVE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_SGI_ONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_GUARANTEE_INIT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_DELTA_C_PLUS_PLUS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_GUARANTEE_START_INIT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_PIXIE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_DEFAULT_DELAY_LOAD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_REQUICKSTART</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_REQUICKSTARTED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_CORD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_NO_UNRES_UNDEF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHF_RLD_ORDER_SAFE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>l_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>l_time_stamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>l_checksum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>l_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>l_flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf32_Lib</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>l_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>l_time_stamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>l_checksum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>l_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>l_flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Elf64_Lib</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_EXACT_MATCH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_IGNORE_INT_VER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_REQUIRE_MINOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_EXPORTS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELAY_LOAD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELTA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>



<typedef>typedef <type><name>Elf32_Addr</name></type> <name>Elf32_Conflict</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_TRAPNIL</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_EXT</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_LSB</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_WIDE</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_NO_KABP</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_LAZYSWAP</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PARISC_ARCH</name></cpp:macro> <cpp:value>0x0000ffff</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFA_PARISC_1_0</name></cpp:macro> <cpp:value>0x020b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFA_PARISC_1_1</name></cpp:macro> <cpp:value>0x0210</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFA_PARISC_2_0</name></cpp:macro> <cpp:value>0x0214</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_PARISC_ANSI_COMMON</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHN_PARISC_HUGE_COMMON</name></cpp:macro> <cpp:value>0xff01</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_PARISC_EXT</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_PARISC_UNWIND</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_PARISC_DOC</name></cpp:macro> <cpp:value>0x70000002</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_PARISC_SHORT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_PARISC_HUGE</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_PARISC_SBP</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_PARISC_MILLICODE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_HP_OPAQUE</name></cpp:macro> <cpp:value>(STT_LOOS + 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_HP_STUB</name></cpp:macro> <cpp:value>(STT_LOOS + 0x2)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR21L</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR17R</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR17F</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR14R</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL32</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL21L</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL17R</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL17F</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL14R</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DPREL21L</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DPREL14R</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL21L</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL14R</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF21L</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF14R</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_SECREL32</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_SEGBASE</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_SEGREL32</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF21L</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF14R</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR32</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR21L</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR14R</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_FPTR64</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLABEL32</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL64</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL22F</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL14WR</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL14DR</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL16F</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL16WF</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PCREL16DF</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR64</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR14WR</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR14DR</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR16F</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR16WF</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_DIR16DF</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL64</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL14WR</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL14DR</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL16F</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL16WF</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_GPREL16DF</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF64</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF14WR</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF14DR</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF16F</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF16WF</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF16DF</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_SECREL64</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_SEGREL64</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF14WR</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF14DR</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF16F</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF16WF</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_PLTOFF16DF</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR64</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR14WR</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR14DR</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR16F</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR16WF</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_FPTR16DF</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LORESERVE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_COPY</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_IPLT</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_EPLT</name></cpp:macro> <cpp:value>130</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL32</name></cpp:macro> <cpp:value>153</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL21L</name></cpp:macro> <cpp:value>154</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL14R</name></cpp:macro> <cpp:value>158</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP21L</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP14R</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP14F</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL64</name></cpp:macro> <cpp:value>216</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL14WR</name></cpp:macro> <cpp:value>219</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL14DR</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL16F</name></cpp:macro> <cpp:value>221</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL16WF</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_TPREL16DF</name></cpp:macro> <cpp:value>223</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP64</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP14WR</name></cpp:macro> <cpp:value>227</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP14DR</name></cpp:macro> <cpp:value>228</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP16F</name></cpp:macro> <cpp:value>229</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP16WF</name></cpp:macro> <cpp:value>230</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_LTOFF_TP16DF</name></cpp:macro> <cpp:value>231</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PARISC_HIRESERVE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_TLS</name></cpp:macro> <cpp:value>(PT_LOOS + 0x0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_NONE</name></cpp:macro> <cpp:value>(PT_LOOS + 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_VERSION</name></cpp:macro> <cpp:value>(PT_LOOS + 0x2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_KERNEL</name></cpp:macro> <cpp:value>(PT_LOOS + 0x3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_COMM</name></cpp:macro> <cpp:value>(PT_LOOS + 0x4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_PROC</name></cpp:macro> <cpp:value>(PT_LOOS + 0x5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_LOADABLE</name></cpp:macro> <cpp:value>(PT_LOOS + 0x6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_STACK</name></cpp:macro> <cpp:value>(PT_LOOS + 0x7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_SHM</name></cpp:macro> <cpp:value>(PT_LOOS + 0x8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_CORE_MMF</name></cpp:macro> <cpp:value>(PT_LOOS + 0x9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_PARALLEL</name></cpp:macro> <cpp:value>(PT_LOOS + 0x10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_FASTBIND</name></cpp:macro> <cpp:value>(PT_LOOS + 0x11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_OPT_ANNOT</name></cpp:macro> <cpp:value>(PT_LOOS + 0x12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_HSL_ANNOT</name></cpp:macro> <cpp:value>(PT_LOOS + 0x13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_HP_STACK</name></cpp:macro> <cpp:value>(PT_LOOS + 0x14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_PARISC_ARCHEXT</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_PARISC_UNWIND</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_PARISC_SBP</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_PAGE_SIZE</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_FAR_SHARED</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_NEAR_SHARED</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_CODE</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_MODIFY</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_LAZYSWAP</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_HP_SBP</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ALPHA_32BIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ALPHA_CANRELAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_ALPHA_DEBUG</name></cpp:macro> <cpp:value>0x70000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_ALPHA_REGINFO</name></cpp:macro> <cpp:value>0x70000002</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_ALPHA_GPREL</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_ALPHA_NOPV</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STO_ALPHA_STD_GPLOAD</name></cpp:macro> <cpp:value>0x88</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_REFLONG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_REFQUAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GPREL32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_LITERAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_LITUSE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GPDISP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_BRADDR</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_HINT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_SREL16</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_SREL32</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_SREL64</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GPRELHIGH</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GPRELLOW</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GPREL16</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_COPY</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GLOB_DAT</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_JMP_SLOT</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_RELATIVE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TLS_GD_HI</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TLSGD</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TLS_LDM</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_DTPMOD64</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GOTDTPREL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_DTPREL64</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_DTPRELHI</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_DTPRELLO</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_DTPREL16</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_GOTTPREL</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TPREL64</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TPRELHI</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TPRELLO</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_TPREL16</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALPHA_NUM</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_ADDR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_BASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_BYTOFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_JSR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_TLS_GD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITUSE_ALPHA_TLS_LDM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PPC_EMB</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PPC_RELOCATABLE</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_PPC_RELOCATABLE_LIB</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR24</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR16</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR16_LO</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR16_HI</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR16_HA</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR14</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR14_BRTAKEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_ADDR14_BRNTAKEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_REL24</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_REL14</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_REL14_BRTAKEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_REL14_BRNTAKEN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT16</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT16_LO</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT16_HI</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT16_HA</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLTREL24</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_COPY</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GLOB_DAT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_JMP_SLOT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_RELATIVE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_LOCAL24PC</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_UADDR32</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_UADDR16</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_REL32</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLT32</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLTREL32</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLT16_LO</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLT16_HI</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_PLT16_HA</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_SDAREL16</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_SECTOFF</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_SECTOFF_LO</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_SECTOFF_HI</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_SECTOFF_HA</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TLS</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPMOD32</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TPREL16</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TPREL16_LO</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TPREL16_HI</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TPREL16_HA</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TPREL32</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPREL16</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPREL16_LO</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPREL16_HI</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPREL16_HA</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DTPREL32</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSGD16</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSGD16_LO</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSGD16_HI</name></cpp:macro> <cpp:value>81</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSGD16_HA</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSLD16</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSLD16_LO</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSLD16_HI</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TLSLD16_HA</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TPREL16</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TPREL16_LO</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TPREL16_HI</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_TPREL16_HA</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_DTPREL16</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_DTPREL16_LO</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_DTPREL16_HI</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_GOT_DTPREL16_HA</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_NUM</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_NADDR32</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_NADDR16</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_NADDR16_LO</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_NADDR16_HI</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_NADDR16_HA</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_SDAI16</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_SDA2I16</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_SDA2REL</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_SDA21</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_MRKREF</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_RELSEC16</name></cpp:macro> <cpp:value>111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_RELST_LO</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_RELST_HI</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_RELST_HA</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_BIT_FLD</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_EMB_RELSDA</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_SDA21_LO</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_SDA21_HI</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_SDA21_HA</name></cpp:macro> <cpp:value>182</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_RELSDA_LO</name></cpp:macro> <cpp:value>183</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_RELSDA_HI</name></cpp:macro> <cpp:value>184</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_DIAB_RELSDA_HA</name></cpp:macro> <cpp:value>185</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC_TOC16</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_NONE</name></cpp:macro> <cpp:value>R_PPC_NONE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR32</name></cpp:macro> <cpp:value>R_PPC_ADDR32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR24</name></cpp:macro> <cpp:value>R_PPC_ADDR24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16</name></cpp:macro> <cpp:value>R_PPC_ADDR16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_LO</name></cpp:macro> <cpp:value>R_PPC_ADDR16_LO</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HI</name></cpp:macro> <cpp:value>R_PPC_ADDR16_HI</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HA</name></cpp:macro> <cpp:value>R_PPC_ADDR16_HA</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR14</name></cpp:macro> <cpp:value>R_PPC_ADDR14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR14_BRTAKEN</name></cpp:macro> <cpp:value>R_PPC_ADDR14_BRTAKEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR14_BRNTAKEN</name></cpp:macro> <cpp:value>R_PPC_ADDR14_BRNTAKEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL24</name></cpp:macro> <cpp:value>R_PPC_REL24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL14</name></cpp:macro> <cpp:value>R_PPC_REL14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL14_BRTAKEN</name></cpp:macro> <cpp:value>R_PPC_REL14_BRTAKEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL14_BRNTAKEN</name></cpp:macro> <cpp:value>R_PPC_REL14_BRNTAKEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16</name></cpp:macro> <cpp:value>R_PPC_GOT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16_LO</name></cpp:macro> <cpp:value>R_PPC_GOT16_LO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16_HI</name></cpp:macro> <cpp:value>R_PPC_GOT16_HI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16_HA</name></cpp:macro> <cpp:value>R_PPC_GOT16_HA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_COPY</name></cpp:macro> <cpp:value>R_PPC_COPY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GLOB_DAT</name></cpp:macro> <cpp:value>R_PPC_GLOB_DAT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_JMP_SLOT</name></cpp:macro> <cpp:value>R_PPC_JMP_SLOT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_RELATIVE</name></cpp:macro> <cpp:value>R_PPC_RELATIVE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_UADDR32</name></cpp:macro> <cpp:value>R_PPC_UADDR32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_UADDR16</name></cpp:macro> <cpp:value>R_PPC_UADDR16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL32</name></cpp:macro> <cpp:value>R_PPC_REL32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT32</name></cpp:macro> <cpp:value>R_PPC_PLT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTREL32</name></cpp:macro> <cpp:value>R_PPC_PLTREL32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT16_LO</name></cpp:macro> <cpp:value>R_PPC_PLT16_LO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT16_HI</name></cpp:macro> <cpp:value>R_PPC_PLT16_HI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT16_HA</name></cpp:macro> <cpp:value>R_PPC_PLT16_HA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF</name></cpp:macro> <cpp:value>R_PPC_SECTOFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF_LO</name></cpp:macro> <cpp:value>R_PPC_SECTOFF_LO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF_HI</name></cpp:macro> <cpp:value>R_PPC_SECTOFF_HI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF_HA</name></cpp:macro> <cpp:value>R_PPC_SECTOFF_HA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR30</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR64</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HIGHER</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HIGHERA</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HIGHEST</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_HIGHESTA</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_UADDR64</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_REL64</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT64</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTREL64</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16_LO</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16_HI</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16_HA</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16_LO</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16_HI</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16_HA</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_DS</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_ADDR16_LO_DS</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16_DS</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT16_LO_DS</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLT16_LO_DS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF_DS</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_SECTOFF_LO_DS</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16_DS</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TOC16_LO_DS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16_DS</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_PLTGOT16_LO_DS</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TLS</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPMOD64</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_LO</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HI</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HA</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL64</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_LO</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HI</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HA</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL64</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSGD16</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSGD16_LO</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSGD16_HI</name></cpp:macro> <cpp:value>81</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSGD16_HA</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSLD16</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSLD16_LO</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSLD16_HI</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TLSLD16_HA</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TPREL16_DS</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TPREL16_LO_DS</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TPREL16_HI</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_TPREL16_HA</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_DTPREL16_DS</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_DTPREL16_LO_DS</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_DTPREL16_HI</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_GOT_DTPREL16_HA</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_DS</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_LO_DS</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HIGHER</name></cpp:macro> <cpp:value>97</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HIGHERA</name></cpp:macro> <cpp:value>98</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HIGHEST</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_TPREL16_HIGHESTA</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_DS</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_LO_DS</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HIGHER</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HIGHERA</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HIGHEST</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_DTPREL16_HIGHESTA</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PPC64_NUM</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PPC64_GLINK</name></cpp:macro> <cpp:value>(DT_LOPROC + 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PPC64_OPD</name></cpp:macro> <cpp:value>(DT_LOPROC + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PPC64_OPDSZ</name></cpp:macro> <cpp:value>(DT_LOPROC + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PPC64_NUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_RELEXEC</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_HASENTRY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_INTERWORK</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_APCS_26</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_APCS_FLOAT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_PIC</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_ALIGN8</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_NEW_ABI</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_OLD_ABI</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_SYMSARESORTED</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_DYNSYMSUSESEGIDX</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_MAPSYMSFIRST</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_EABIMASK</name></cpp:macro> <cpp:value>0XFF000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_EABI_VERSION</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flags) &amp; EF_ARM_EABIMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_EABI_UNKNOWN</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_EABI_VER1</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_ARM_EABI_VER2</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STT_ARM_TFUNC</name></cpp:macro> <cpp:value>0xd</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_ARM_ENTRYSECT</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_ARM_COMDEF</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ARM_SB</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_PC24</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ABS32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_REL32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_PC13</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ABS16</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ABS12</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_ABS5</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ABS8</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_SBREL32</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_PC22</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_PC8</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_AMP_VCALL9</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_SWI24</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_SWI8</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_XPC25</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_XPC22</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_COPY</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GLOB_DAT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_JUMP_SLOT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RELATIVE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GOTOFF</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GOTPC</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GOT32</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_PLT32</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ALU_PCREL_7_0</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ALU_PCREL_15_8</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ALU_PCREL_23_15</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_LDR_SBREL_11_0</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ALU_SBREL_19_12</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_ALU_SBREL_27_20</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GNU_VTENTRY</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_GNU_VTINHERIT</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_PC11</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_PC9</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RXPC25</name></cpp:macro> <cpp:value>249</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RSBREL32</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_THM_RPC22</name></cpp:macro> <cpp:value>251</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RREL32</name></cpp:macro> <cpp:value>252</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RABS22</name></cpp:macro> <cpp:value>253</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RPC24</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_RBASE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARM_NUM</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_IA_64_MASKOS</name></cpp:macro> <cpp:value>0x0000000f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_IA_64_ABI64</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_IA_64_ARCH</name></cpp:macro> <cpp:value>0xff000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_IA_64_ARCHEXT</name></cpp:macro> <cpp:value>(PT_LOPROC + 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_IA_64_UNWIND</name></cpp:macro> <cpp:value>(PT_LOPROC + 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_IA_64_HP_OPT_ANOT</name></cpp:macro> <cpp:value>(PT_LOOS + 0x12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_IA_64_HP_HSL_ANOT</name></cpp:macro> <cpp:value>(PT_LOOS + 0x13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_IA_64_HP_STACK</name></cpp:macro> <cpp:value>(PT_LOOS + 0x14)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_IA_64_NORECOV</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_IA_64_EXT</name></cpp:macro> <cpp:value>(SHT_LOPROC + 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_IA_64_UNWIND</name></cpp:macro> <cpp:value>(SHT_LOPROC + 1)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_IA_64_SHORT</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF_IA_64_NORECOV</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IA_64_PLT_RESERVE</name></cpp:macro> <cpp:value>(DT_LOPROC + 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IA_64_NUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_NONE</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_IMM14</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_IMM22</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_IMM64</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DIR32MSB</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DIR32LSB</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DIR64MSB</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DIR64LSB</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL22</name></cpp:macro> <cpp:value>0x2a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL64I</name></cpp:macro> <cpp:value>0x2b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL32MSB</name></cpp:macro> <cpp:value>0x2c</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL32LSB</name></cpp:macro> <cpp:value>0x2d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL64MSB</name></cpp:macro> <cpp:value>0x2e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_GPREL64LSB</name></cpp:macro> <cpp:value>0x2f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF22</name></cpp:macro> <cpp:value>0x32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF64I</name></cpp:macro> <cpp:value>0x33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PLTOFF22</name></cpp:macro> <cpp:value>0x3a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PLTOFF64I</name></cpp:macro> <cpp:value>0x3b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PLTOFF64MSB</name></cpp:macro> <cpp:value>0x3e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PLTOFF64LSB</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_FPTR64I</name></cpp:macro> <cpp:value>0x43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_FPTR32MSB</name></cpp:macro> <cpp:value>0x44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_FPTR32LSB</name></cpp:macro> <cpp:value>0x45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_FPTR64MSB</name></cpp:macro> <cpp:value>0x46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_FPTR64LSB</name></cpp:macro> <cpp:value>0x47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL60B</name></cpp:macro> <cpp:value>0x48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL21B</name></cpp:macro> <cpp:value>0x49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL21M</name></cpp:macro> <cpp:value>0x4a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL21F</name></cpp:macro> <cpp:value>0x4b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL32MSB</name></cpp:macro> <cpp:value>0x4c</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL32LSB</name></cpp:macro> <cpp:value>0x4d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL64MSB</name></cpp:macro> <cpp:value>0x4e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL64LSB</name></cpp:macro> <cpp:value>0x4f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR22</name></cpp:macro> <cpp:value>0x52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR64I</name></cpp:macro> <cpp:value>0x53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR32MSB</name></cpp:macro> <cpp:value>0x54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR32LSB</name></cpp:macro> <cpp:value>0x55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR64MSB</name></cpp:macro> <cpp:value>0x56</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_FPTR64LSB</name></cpp:macro> <cpp:value>0x57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SEGREL32MSB</name></cpp:macro> <cpp:value>0x5c</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SEGREL32LSB</name></cpp:macro> <cpp:value>0x5d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SEGREL64MSB</name></cpp:macro> <cpp:value>0x5e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SEGREL64LSB</name></cpp:macro> <cpp:value>0x5f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SECREL32MSB</name></cpp:macro> <cpp:value>0x64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SECREL32LSB</name></cpp:macro> <cpp:value>0x65</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SECREL64MSB</name></cpp:macro> <cpp:value>0x66</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SECREL64LSB</name></cpp:macro> <cpp:value>0x67</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_REL32MSB</name></cpp:macro> <cpp:value>0x6c</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_REL32LSB</name></cpp:macro> <cpp:value>0x6d</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_REL64MSB</name></cpp:macro> <cpp:value>0x6e</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_REL64LSB</name></cpp:macro> <cpp:value>0x6f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTV32MSB</name></cpp:macro> <cpp:value>0x74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTV32LSB</name></cpp:macro> <cpp:value>0x75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTV64MSB</name></cpp:macro> <cpp:value>0x76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTV64LSB</name></cpp:macro> <cpp:value>0x77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL21BI</name></cpp:macro> <cpp:value>0x79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL22</name></cpp:macro> <cpp:value>0x7a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_PCREL64I</name></cpp:macro> <cpp:value>0x7b</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_IPLTMSB</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_IPLTLSB</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_COPY</name></cpp:macro> <cpp:value>0x84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_SUB</name></cpp:macro> <cpp:value>0x85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF22X</name></cpp:macro> <cpp:value>0x86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LDXMOV</name></cpp:macro> <cpp:value>0x87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_TPREL14</name></cpp:macro> <cpp:value>0x91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_TPREL22</name></cpp:macro> <cpp:value>0x92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_TPREL64I</name></cpp:macro> <cpp:value>0x93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_TPREL64MSB</name></cpp:macro> <cpp:value>0x96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_TPREL64LSB</name></cpp:macro> <cpp:value>0x97</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_TPREL22</name></cpp:macro> <cpp:value>0x9a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPMOD64MSB</name></cpp:macro> <cpp:value>0xa6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPMOD64LSB</name></cpp:macro> <cpp:value>0xa7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_DTPMOD22</name></cpp:macro> <cpp:value>0xaa</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL14</name></cpp:macro> <cpp:value>0xb1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL22</name></cpp:macro> <cpp:value>0xb2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL64I</name></cpp:macro> <cpp:value>0xb3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL32MSB</name></cpp:macro> <cpp:value>0xb4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL32LSB</name></cpp:macro> <cpp:value>0xb5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL64MSB</name></cpp:macro> <cpp:value>0xb6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_DTPREL64LSB</name></cpp:macro> <cpp:value>0xb7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IA64_LTOFF_DTPREL22</name></cpp:macro> <cpp:value>0xba</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_REL32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8WPN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_IND12W</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8WPL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8WPZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8BP</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8W</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DIR8L</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_SWITCH16</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_SWITCH32</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_USES</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_COUNT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_ALIGN</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_CODE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_DATA</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_LABEL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_SWITCH8</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GNU_VTINHERIT</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GNU_VTENTRY</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_GD_32</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_LD_32</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_LDO_32</name></cpp:macro> <cpp:value>146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_IE_32</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_LE_32</name></cpp:macro> <cpp:value>148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_DTPMOD32</name></cpp:macro> <cpp:value>149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_DTPOFF32</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_TLS_TPOFF32</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GOT32</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_PLT32</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_COPY</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GLOB_DAT</name></cpp:macro> <cpp:value>163</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_JMP_SLOT</name></cpp:macro> <cpp:value>164</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_RELATIVE</name></cpp:macro> <cpp:value>165</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GOTOFF</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_GOTPC</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SH_NUM</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_12</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_16</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PC32</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOT12</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOT32</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLT32</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_COPY</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GLOB_DAT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_JMP_SLOT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_RELATIVE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTOFF32</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPC</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOT16</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PC16</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PC16DBL</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLT16DBL</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PC32DBL</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLT32DBL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPCDBL</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_64</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PC64</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOT64</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLT64</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTENT</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTOFF16</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTOFF64</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLT12</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLT16</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLT32</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLT64</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLTENT</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLTOFF16</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLTOFF32</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_PLTOFF64</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LOAD</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GDCALL</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LDCALL</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GD32</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GD64</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GOTIE12</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GOTIE32</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GOTIE64</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LDM32</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LDM64</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_IE32</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_IE64</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_IEENT</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LE32</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LE64</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LDO32</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_LDO64</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_DTPMOD</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_DTPOFF</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_TPOFF</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_20</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOT20</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_GOTPLT20</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_TLS_GOTIE20</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_390_NUM</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_8_PCREL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_16_PCREL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_PCREL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_GNU_VTINHERIT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_GNU_VTENTRY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_COPY</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_GLOB_DAT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_JUMP_SLOT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_RELATIVE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_16_GOT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_GOT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_16_GOTPLT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_GOTPLT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_GOTREL</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_PLT_GOTREL</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_32_PLT_PCREL</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CRIS_NUM</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_PC32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_GOT32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_PLT32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_COPY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_GLOB_DAT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_JUMP_SLOT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_RELATIVE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_GOTPCREL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_32</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_32S</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_16</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_PC16</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_8</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_PC8</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_DTPMOD64</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_DTPOFF64</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_TPOFF64</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_TLSGD</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_TLSLD</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_DTPOFF32</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_GOTTPOFF</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_TPOFF32</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_X86_64_NUM</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_8</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_PCREL32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_PCREL16</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_PCREL8</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GNU_VTINHERIT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GNU_VTENTRY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_24</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOTPC32</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOTPC16</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOTOFF32</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOTOFF24</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOTOFF16</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_PLT32</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_PLT16</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOT32</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOT24</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GOT16</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_COPY</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_GLOB_DAT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_JMP_SLOT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_RELATIVE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MN10300_NUM</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_24</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_10_PCREL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_18_PCREL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_26_PCREL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_HI16_ULO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_HI16_SLO</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_LO16</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_SDA16</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GNU_VTINHERIT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GNU_VTENTRY</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_16_RELA</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_32_RELA</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_24_RELA</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_10_PCREL_RELA</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_18_PCREL_RELA</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_26_PCREL_RELA</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_HI16_ULO_RELA</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_HI16_SLO_RELA</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_LO16_RELA</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_SDA16_RELA</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_RELA_GNU_VTINHERIT</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_RELA_GNU_VTENTRY</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOT24</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_26_PLTREL</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_COPY</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GLOB_DAT</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_JMP_SLOT</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_RELATIVE</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTOFF</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTPC24</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOT16_HI_ULO</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOT16_HI_SLO</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOT16_LO</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTPC_HI_ULO</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTPC_HI_SLO</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTPC_LO</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTOFF_HI_ULO</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTOFF_HI_SLO</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_GOTOFF_LO</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_M32R_NUM</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 


<struct>struct <name>rusage</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ru_utime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ru_stime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_maxrss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_ixrss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_idrss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_isrss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_minflt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_majflt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_nswap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_inblock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_oublock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_msgsnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_msgrcv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_nsignals</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_nvcsw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ru_nivcsw</name></decl>;</decl_stmt> 
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXNAMLEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<struct>struct <name>bsd_dirent</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>d_fileno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>d_reclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d_namlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>d_name</name><index>[<expr><name>MAXNAMLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>sembuf</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sem_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>sem_op</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>sem_flg</name></decl>;</decl_stmt> 
}</block>;</struct>
</unit>
