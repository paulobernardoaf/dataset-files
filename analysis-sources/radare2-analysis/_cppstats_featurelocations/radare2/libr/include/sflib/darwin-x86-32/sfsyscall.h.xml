<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\sflib\darwin-x86-32\sfsyscall.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SFSYSCALL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFSYSCALL_H</name></cpp:macro></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_USE_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>errno</name></decl>;</decl_stmt>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SF_USER_ERRNO not supported yet"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__sfsyscall_return</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return (type) (res); } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(void) { long __res; __asm__ volatile ("int $0x80" : "=a" (__res) : "0" (__NR_##name)); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1) { long __res; __asm__ volatile ("pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $8, %%esp" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1,type2 arg2) { long __res; __asm__ volatile ("pushl %3\n\t" "pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $12, %%esp" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1,type2 arg2,type3 arg3) { long __res; __asm__ volatile ("pusha; pushl %4\n\t" "pushl %3\n\t" "pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $16, %%esp\n\t" "popa" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) { long __res; __asm__ volatile ("pushl %5\n\t" "pushl %4\n\t" "pushl %3\n\t" "pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $20, %%esp" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1)),"c" ((long)(arg2)), "d" ((long)(arg3)),"S" ((long)(arg4)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) { long __res; __asm__ volatile ("pushl %6\n\t" "pushl %5\n\t" "pushl %4\n\t" "pushl %3\n\t" "pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $24, %%esp" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)),"g" ((long)(arg4)),"g" ((long)(arg5))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5, type6 arg6) { long __res; __asm__ volatile ("pushl %7\n\t" "pushl %6\n\t" "pushl %5\n\t" "pushl %4\n\t" "pushl %3\n\t" "pushl %2\n\t" "pushl %%eax\n\t" "int $0x80\n\t" "add $28, %%esp" : "=a" (__res) : "0" (__NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)),"g" ((long)(arg4)),"g" ((long)(arg5)), "g" ((long)(arg6))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>






















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
