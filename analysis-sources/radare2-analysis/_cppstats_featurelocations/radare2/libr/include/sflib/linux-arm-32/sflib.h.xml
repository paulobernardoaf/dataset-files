<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\sflib\linux-arm-32\sflib.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SFLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFLIB_H</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sfsysnr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sfsyscall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/sftypes.h"</cpp:file></cpp:include>


<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>ssize_t</argument>, <argument>read</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>void *</argument>, <argument>buf</argument>, <argument>size_t</argument>, <argument>count</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>ssize_t</argument>, <argument>write</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>const void *</argument>, <argument>buf</argument>, <argument>size_t</argument>, <argument>count</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>open</argument>, <argument>const char *</argument>, <argument>pathname</argument>, <argument>int</argument>, <argument>flags</argument>, <argument>mode_t</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>close</argument>, <argument>int</argument>, <argument>fd</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>stat</argument>, <argument>const char *</argument>, <argument>file_name</argument>, <argument>struct stat *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>fstat</argument>, <argument>int</argument>, <argument>filedes</argument>, <argument>struct stat *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>lstat</argument>, <argument>const char *</argument>, <argument>file_name</argument>, <argument>struct stat *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>poll</argument>, <argument>struct pollfd *</argument>, <argument>ufds</argument>, <argument>unsigned int</argument>, <argument>nfds</argument>, <argument>int</argument>, <argument>timeout</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>off_t</argument>, <argument>lseek</argument>, <argument>int</argument>, <argument>fildes</argument>, <argument>off_t</argument>, <argument>offset</argument>, <argument>int</argument>, <argument>whence</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall6</name><argument_list>(<argument>void *</argument>,<argument>mmap</argument>, <argument>void *</argument>,<argument>start</argument>, <argument>size_t</argument>,<argument>length</argument>, <argument>int</argument>,<argument>prot</argument> , <argument>int</argument>,<argument>flags</argument>, <argument>int</argument>,<argument>fd</argument>, <argument>off_t</argument>,<argument>offset</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>mprotect</argument>, <argument>const void *</argument>, <argument>addr</argument>, <argument>size_t</argument>, <argument>len</argument>, <argument>int</argument>, <argument>prot</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>munmap</argument>, <argument>void *</argument>, <argument>start</argument>, <argument>size_t</argument>, <argument>length</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>brk</argument>, <argument>void *</argument>, <argument>end_data_segment</argument> )</argument_list></macro>



<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall4</name><argument_list>(<argument>int</argument>, <argument>ioctl</argument>, <argument>int</argument>,<argument>d</argument>, <argument>int</argument>,<argument>request</argument>, <argument>char *</argument>,<argument>argp</argument>, <argument>int</argument>,<argument>len</argument>)</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>readv</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>const struct iovec *</argument>, <argument>vector</argument>, <argument>int</argument>, <argument>count</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>writev</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>const struct iovec *</argument>, <argument>vector</argument>, <argument>int</argument>, <argument>count</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>access</argument>, <argument>const char *</argument>, <argument>pathname</argument>, <argument>int</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>pipe</argument>, <argument>unsigned long *</argument>, <argument>filedes</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall5</name><argument_list>( <argument>int</argument>, <argument>select</argument>, <argument>int</argument>, <argument>n</argument>, <argument>fd_set *</argument>, <argument>readfds</argument>, <argument>fd_set *</argument>, <argument>writefds</argument>, <argument>fd_set *</argument>, <argument>exceptfds</argument>, <argument>struct timeval *</argument>, <argument>timeout</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>int</argument>, <argument>sched_yield</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>msync</argument>, <argument>const void *</argument>, <argument>start</argument>, <argument>size_t</argument>, <argument>length</argument>, <argument>int</argument>, <argument>flags</argument> )</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>shmget</argument>, <argument>long</argument>, <argument>key</argument>, <argument>int</argument>, <argument>size</argument>, <argument>int</argument>, <argument>flags</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>void *</argument>, <argument>shmat</argument>, <argument>int</argument>, <argument>shmid</argument>, <argument>const void *</argument>, <argument>shmaddr</argument>, <argument>int</argument>, <argument>shmflg</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>dup</argument>, <argument>int</argument>, <argument>oldfd</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>dup2</argument>, <argument>int</argument>, <argument>oldfd</argument>, <argument>int</argument>, <argument>newfd</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>int</argument>, <argument>pause</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>nanosleep</argument>, <argument>const struct timespec *</argument>, <argument>req</argument>, <argument>struct timespec *</argument>, <argument>rem</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>unsigned int</argument>, <argument>alarm</argument>, <argument>unsigned int</argument>, <argument>seconds</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>getpid</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>socket</argument>, <argument>int</argument>,<argument>domain</argument>, <argument>int</argument>,<argument>type</argument>, <argument>int</argument>,<argument>protocol</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>,<argument>connect</argument>, <argument>int</argument>,<argument>sockfd</argument>, <argument>const struct sockaddr *</argument>,<argument>serv_addr</argument>, <argument>socklen_t</argument>,<argument>addrlen</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <call><name>_sfsyscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>accept</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,<argument><expr><name>s</name></expr></argument>, <argument><expr>struct <name>sockaddr</name> <operator>*</operator></expr></argument>,<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>socklen_t</name> <operator>*</operator></expr></argument>,<argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall6</name><argument_list>(<argument>ssize_t</argument>, <argument>sendto</argument>, <argument>int</argument>, <argument>s</argument>, <argument>const void *</argument>, <argument>msg</argument>, <argument>size_t</argument>, <argument>len</argument>, <argument>int</argument>, <argument>flags</argument>, <argument>const struct sockaddr *</argument>, <argument>to</argument>, <argument>socklen_t</argument>, <argument>tolen</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall6</name><argument_list>(<argument>ssize_t</argument>, <argument>recvfrom</argument>, <argument>int</argument>, <argument>s</argument>, <argument>void *</argument> , <argument>buf</argument>, <argument>size_t</argument>, <argument>len</argument>, <argument>int</argument>, <argument>flags</argument>, <argument>struct sockaddr *</argument> , <argument>from</argument>, <argument>socklen_t *</argument> , <argument>fromlen</argument>)</argument_list></macro>



<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>bind</argument>, <argument>int</argument>,<argument>sockfd</argument>, <argument>struct sockaddr *</argument>,<argument>my_addr</argument>, <argument>socklen_t</argument>,<argument>addrlen</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>(<argument>int</argument>,<argument>listen</argument>,<argument>int</argument>,<argument>s</argument>, <argument>int</argument>,<argument>backlog</argument>)</argument_list></macro>



<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall5</name><argument_list>(<argument>int</argument>, <argument>setsockopt</argument>, <argument>int</argument>, <argument>s</argument>, <argument>int</argument>, <argument>level</argument>, <argument>int</argument>, <argument>optname</argument>, <argument>void *</argument>, <argument>optval</argument>, <argument>socklen_t</argument>, <argument>optlen</argument>)</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>fork</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>vfork</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>execve</argument>, <argument>char *</argument>, <argument>s</argument>, <argument>char **</argument>, <argument>argv</argument>, <argument>char **</argument>,<argument>envp</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>(<argument>int</argument>, <argument>exit</argument>, <argument>int</argument>, <argument>status</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall4</name><argument_list>(<argument>pid_t</argument>, <argument>wait4</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>int *</argument>, <argument>status</argument>, <argument>int</argument>, <argument>options</argument>, <argument>struct rusage *</argument>, <argument>rusage</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>kill</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>int</argument>, <argument>sig</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>uname</argument>, <argument>struct utsname *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>semget</argument>, <argument>long</argument>, <argument>key</argument>, <argument>int</argument>, <argument>nsems</argument>, <argument>int</argument>, <argument>semflg</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>(<argument>int</argument>, <argument>semop</argument>, <argument>int</argument>, <argument>semid</argument>, <argument>struct sembuf *</argument>, <argument>sops</argument>, <argument>unsigned</argument>, <argument>nsops</argument>)</argument_list></macro>






<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>fcntl</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>int</argument>, <argument>cmd</argument>, <argument>long</argument>, <argument>arg</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>fsync</argument>, <argument>int</argument>, <argument>fd</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>fdatasync</argument>, <argument>int</argument>, <argument>fd</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>truncate</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>off_t</argument>, <argument>length</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>ftruncate</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>off_t</argument>, <argument>length</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>getdents</argument>, <argument>unsigned int</argument>, <argument>fd</argument>, <argument>struct dirent *</argument>, <argument>dirp</argument>, <argument>unsigned int</argument>, <argument>count</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>chdir</argument>, <argument>const char *</argument>, <argument>path</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>rename</argument>, <argument>const char *</argument>, <argument>oldpath</argument>, <argument>const char *</argument>, <argument>newpath</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>mkdir</argument>, <argument>const char *</argument>, <argument>pathname</argument>, <argument>mode_t</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>rmdir</argument>, <argument>const char *</argument>, <argument>pathname</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>creat</argument>, <argument>const char *</argument>, <argument>pathname</argument>, <argument>mode_t</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>link</argument>, <argument>const char *</argument>, <argument>oldpath</argument>, <argument>const char *</argument>, <argument>newpath</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>unlink</argument>, <argument>const char *</argument>, <argument>pathname</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>symlink</argument>, <argument>const char *</argument>, <argument>oldpath</argument>, <argument>const char *</argument>, <argument>newpath</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>readlink</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>char *</argument>, <argument>buf</argument>, <argument>size_t</argument>, <argument>bufsiz</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>chmod</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>mode_t</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>fchmod</argument>, <argument>int</argument>, <argument>fildes</argument>, <argument>mode_t</argument>, <argument>mode</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>chown</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>uid_t</argument>, <argument>owner</argument>, <argument>gid_t</argument>, <argument>group</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>fchown</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>uid_t</argument>, <argument>owner</argument>, <argument>gid_t</argument>, <argument>group</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>lchown</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>uid_t</argument>, <argument>owner</argument>, <argument>gid_t</argument>, <argument>group</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>mode_t</argument>, <argument>umask</argument>, <argument>mode_t</argument>, <argument>mask</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>gettimeofday</argument>, <argument>struct timeval *</argument>, <argument>tv</argument>, <argument>struct timezone *</argument>, <argument>tz</argument> )</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>sysinfo</argument>, <argument>struct sysinfo *</argument>, <argument>info</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>clock_t</argument>, <argument>times</argument>, <argument>struct tms *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall4</name><argument_list>(<argument>long</argument>, <argument>ptrace</argument>, <argument>int</argument>, <argument>request</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>void *</argument>,<argument>addr</argument>, <argument>void *</argument>,<argument>data</argument>)</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>uid_t</argument>, <argument>getuid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>syslog</argument>, <argument>int</argument>, <argument>type</argument>, <argument>char *</argument>, <argument>bufp</argument>, <argument>int</argument>, <argument>len</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>gid_t</argument>, <argument>getgid</argument> )</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>uid_t</argument>, <argument>geteuid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>gid_t</argument>, <argument>getegid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>setpgid</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>pid_t</argument>, <argument>pgid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>getppid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>getpgrp</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>pid_t</argument>, <argument>setsid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>setreuid</argument>, <argument>uid_t</argument>, <argument>ruid</argument>, <argument>uid_t</argument>, <argument>euid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>setregid</argument>, <argument>gid_t</argument>, <argument>rgid</argument>, <argument>gid_t</argument>, <argument>egid</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>setgroups</argument>, <argument>size_t</argument>, <argument>size</argument>, <argument>const gid_t *</argument>, <argument>list</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>setresuid</argument>, <argument>uid_t</argument>, <argument>ruid</argument>, <argument>uid_t</argument>, <argument>euid</argument>, <argument>uid_t</argument>, <argument>suid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>getresuid</argument>, <argument>uid_t *</argument>, <argument>ruid</argument>, <argument>uid_t *</argument>, <argument>euid</argument>, <argument>uid_t *</argument>, <argument>suid</argument> )</argument_list></macro>


<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>pid_t</argument>, <argument>getpgid</argument>, <argument>pid_t</argument>, <argument>pid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>setfsuid</argument>, <argument>uid_t</argument>, <argument>fsuid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>setfsgid</argument>, <argument>uid_t</argument>, <argument>fsgid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>pid_t</argument>, <argument>getsid</argument>, <argument>pid_t</argument>, <argument>pid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>capget</argument>, <argument>cap_user_header_t</argument>, <argument>header</argument>, <argument>cap_user_data_t</argument>, <argument>data</argument> )</argument_list></macro>






<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>utime</argument>, <argument>const char *</argument>, <argument>filename</argument>, <argument>struct utimbuf *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>mknod</argument>, <argument>const char *</argument>, <argument>pathname</argument>, <argument>mode_t</argument>, <argument>mode</argument>, <argument>dev_t</argument>, <argument>dev</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>uselib</argument>, <argument>const char *</argument>, <argument>library</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>personality</argument>, <argument>unsigned long</argument>, <argument>persona</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>ustat</argument>, <argument>dev_t</argument>, <argument>dev</argument>, <argument>struct ustat *</argument>, <argument>ubuf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>statfs</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>struct statfs *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>fstatfs</argument>, <argument>int</argument>, <argument>fd</argument>, <argument>struct statfs *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>sysfs</argument>, <argument>int</argument>, <argument>option</argument>, <argument>unsigned int</argument>, <argument>fs_index</argument>, <argument>char *</argument>, <argument>buf</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>getpriority</argument>, <argument>int</argument>, <argument>which</argument>, <argument>int</argument>, <argument>who</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>setpriority</argument>, <argument>int</argument>, <argument>which</argument>, <argument>int</argument>, <argument>who</argument>, <argument>int</argument>, <argument>prio</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>sched_setparam</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>const struct sched_param *</argument>, <argument>p</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>sched_getparam</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>struct sched_param *</argument>, <argument>p</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>sched_getscheduler</argument>, <argument>pid_t</argument>, <argument>pid</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>sched_get_priority_max</argument>, <argument>int</argument>, <argument>policy</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>sched_get_priority_min</argument>, <argument>int</argument>, <argument>policy</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>sched_rr_get_interval</argument>, <argument>pid_t</argument>, <argument>pid</argument>, <argument>struct timespec *</argument>, <argument>tp</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>mlock</argument>, <argument>const void *</argument>, <argument>addr</argument>, <argument>size_t</argument>, <argument>len</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>munlock</argument>, <argument>const void *</argument>, <argument>addr</argument>, <argument>size_t</argument>, <argument>len</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>mlockall</argument>, <argument>int</argument>, <argument>flags</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>int</argument>, <argument>munlockall</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>int</argument>, <argument>vhangup</argument> )</argument_list></macro>






<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>chroot</argument>, <argument>const char *</argument>, <argument>path</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall0</name><argument_list>( <argument>int</argument>, <argument>sync</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>acct</argument>, <argument>const char *</argument>, <argument>filename</argument> )</argument_list></macro>



<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>swapon</argument>, <argument>const char *</argument>, <argument>path</argument>, <argument>int</argument>, <argument>swapflags</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>swapoff</argument>, <argument>const char *</argument>, <argument>path</argument> )</argument_list></macro>

<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>sethostname</argument>, <argument>const char *</argument>, <argument>name</argument>, <argument>size_t</argument>, <argument>len</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>setdomainname</argument>, <argument>const char *</argument>, <argument>name</argument>, <argument>size_t</argument>, <argument>len</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>iopl</argument>, <argument>int</argument>, <argument>level</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall3</name><argument_list>( <argument>int</argument>, <argument>ioperm</argument>, <argument>unsigned long</argument>, <argument>from</argument>, <argument>unsigned long</argument>, <argument>num</argument>, <argument>int</argument>, <argument>turn_on</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>caddr_t</argument>, <argument>create_module</argument>, <argument>const char *</argument>, <argument>name</argument>, <argument>size_t</argument>, <argument>size</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall2</name><argument_list>( <argument>int</argument>, <argument>init_module</argument>, <argument>const char *</argument>, <argument>name</argument>, <argument>struct module *</argument>, <argument>image</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>delete_module</argument>, <argument>const char *</argument>, <argument>name</argument> )</argument_list></macro>
<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>int</argument>, <argument>get_kernel_syms</argument>, <argument>struct kernel_sym *</argument>, <argument>table</argument> )</argument_list></macro>























<specifier>static</specifier> <specifier>inline</specifier> <macro><name>_sfsyscall1</name><argument_list>( <argument>time_t</argument>, <argument>time</argument>, <argument>time_t *</argument>, <argument>t</argument> )</argument_list></macro></expr>





































































































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
