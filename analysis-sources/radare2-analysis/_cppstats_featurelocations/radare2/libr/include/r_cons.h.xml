<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_cons.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_CONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_CONS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/pj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_graph.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_hex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_num.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_panels.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_sandbox.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_stack.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_str.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_str_constpool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_sys.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb/ht_up.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winuser.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONS_MAX_USER</name></cpp:macro> <cpp:value>102400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONS_BUFSZ</name></cpp:macro> <cpp:value>0x4f00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_IS_NULL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!x || !x[0])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONS_PALETTE_SIZE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONS_COLORS_SIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_GREP_WORDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_GREP_WORD_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_GREP_TOKENS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CMD_DEPTH</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RConsGetSize</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RConsGetCursor</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RConsIsBreaked</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsFlush</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsGrepCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grep</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_cons_bind_t</name> <block>{
<decl_stmt><decl><type><name>RConsGetSize</name></type> <name>get_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsGetCursor</name></type> <name>get_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsIsBreaked</name></type> <name>is_breaked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsFlush</name></type> <name>cb_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsGrepCallback</name></type> <name>cb_grep</name></decl>;</decl_stmt>
}</block></struct></type> <name>RConsBind</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_cons_grep_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>strings</name><index>[<expr><name>R_CONS_GREP_WORDS</name></expr>]</index><index>[<expr><name>R_CONS_GREP_WORD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nstrings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>charCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>less</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>human</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>json</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sort_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sort_invert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>l_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>tokens</name><index>[<expr><name>R_CONS_GREP_TOKENS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tokens_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zoom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zoomy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icase</name></decl>;</decl_stmt>
}</block></struct></type> <name>RConsGrep</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


enum {
R_CONS_PAL_0x00 = 0,
R_CONS_PAL_0x7f,
R_CONS_PAL_0xff,
R_CONS_PAL_ARGS,
R_CONS_PAL_BIN,
R_CONS_PAL_BTEXT,
R_CONS_PAL_CALL,
R_CONS_PAL_CJMP,
R_CONS_PAL_CMP,
R_CONS_PAL_COMMENT,
R_CONS_PAL_CREG,
R_CONS_PAL_FLAG,
R_CONS_PAL_FLINE,
R_CONS_PAL_FLOC,
R_CONS_PAL_FLOW,
R_CONS_PAL_FLOW2,
R_CONS_PAL_FNAME,
R_CONS_PAL_HELP,
R_CONS_PAL_INPUT,
R_CONS_PAL_INVALID,
R_CONS_PAL_JMP,
R_CONS_PAL_LABEL,
R_CONS_PAL_MATH,
R_CONS_PAL_MOV,
R_CONS_PAL_NOP,
R_CONS_PAL_NUM,
R_CONS_PAL_OFFSET,
R_CONS_PAL_OTHER,
R_CONS_PAL_POP,
R_CONS_PAL_PROMPT,
R_CONS_PAL_PUSH,
R_CONS_PAL_CRYPTO,
R_CONS_PAL_REG,
R_CONS_PAL_RESET,
R_CONS_PAL_RET,
R_CONS_PAL_SWI,
R_CONS_PAL_TRAP,
R_CONS_PAL_AI_READ,
R_CONS_PAL_AI_WRITE,
R_CONS_PAL_AI_EXEC,
R_CONS_PAL_AI_SEQ,
R_CONS_PAL_AI_ASCII,
R_CONS_PAL_AI_UNMAP,
R_CONS_PAL_GUI_CFLOW,
R_CONS_PAL_GUI_DATAOFFSET,
R_CONS_PAL_GUI_BACKGROUND,
R_CONS_PAL_GUI_ALT_BACKGROUND,
R_CONS_PAL_GUI_BORDER,
R_CONS_PAL_LINEHL,
R_CONS_PAL_GRAPH_BOX,
R_CONS_PAL_GRAPH_BOX2,
R_CONS_PAL_GRAPH_BOX3,
R_CONS_PAL_GRAPH_BOX4,
R_CONS_PAL_GRAPH_TRUE,
R_CONS_PAL_GRAPH_FALSE,
R_CONS_PAL_GRAPH_TRUFAE,
R_CONS_PAL_GRAPH_TRACED,
R_CONS_PAL_GRAPH_CURRENT,
R_CONS_PAL_LAST
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{ <decl><name>ALPHA_RESET</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>, <decl><name>ALPHA_FG</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, <decl><name>ALPHA_BG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, <decl><name>ALPHA_FGBG</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl> }</block>;</enum>
<enum>enum <block>{ <decl><name>R_CONS_ATTR_BOLD</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>R_CONS_ATTR_DIM</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>R_CONS_ATTR_ITALIC</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>R_CONS_ATTR_UNDERLINE</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>R_CONS_ATTR_BLINK</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>rcolor_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>r2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>g2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>b2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st8</name></type> <name>id16</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RColor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_cons_palette_t</name> <block>{
<decl_stmt><decl><type><name>RColor</name></type> <name>b0x00</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>b0x7f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>b0xff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>btext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>cjmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>usercomment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>creg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>fline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>floc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>flow2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>jmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>math</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>mov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>nop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>pop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>push</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>crypto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>reset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>swi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>trap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ucall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ujmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ai_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ai_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ai_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ai_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>ai_ascii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>gui_cflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>gui_dataoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>gui_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>gui_alt_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>gui_border</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>wordhl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>linehl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>func_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>func_var_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>func_var_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>widget_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>widget_sel</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RColor</name></type> <name>graph_box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_box2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_box3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_box4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_true</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_false</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_trufae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_traced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_diff_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_diff_unmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_diff_unknown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RColor</name></type> <name>graph_diff_new</name></decl>;</decl_stmt>
}</block></struct></type> <name>RConsPalette</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_cons_printable_palette_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b0x00</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b0x7f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b0xff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>btext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cjmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usercomment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>creg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>floc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flow2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>math</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>push</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>crypto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>swi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ucall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ujmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_ascii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_unmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gui_cflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gui_dataoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gui_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gui_alt_background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gui_border</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wordhl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linehl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func_var_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func_var_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>widget_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>widget_sel</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_box2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_box3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_box4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_diff_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_diff_unmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_diff_unknown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_diff_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_true</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_false</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_trufae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_traced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rainbow</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rainbow_sz</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RConsPrintablePalette</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsEvent</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONS_MAX_ATTR_SZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_cons_canvas_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>blen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>attrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RStrConstPool</name></type> <name>constpool</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linemode</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RConsCanvas</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_MIN</name></cpp:macro> <cpp:value>0xc8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_LINE_VERT</name></cpp:macro> <cpp:value>0xc8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_LINE_CROSS</name></cpp:macro> <cpp:value>0xc9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CORNER_BR</name></cpp:macro> <cpp:value>0xca</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CORNER_BL</name></cpp:macro> <cpp:value>0xcb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_ARROW_RIGHT</name></cpp:macro> <cpp:value>0xcc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_ARROW_LEFT</name></cpp:macro> <cpp:value>0xcd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_LINE_HORIZ</name></cpp:macro> <cpp:value>0xce</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CORNER_TL</name></cpp:macro> <cpp:value>0xcf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CORNER_TR</name></cpp:macro> <cpp:value>0xd0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_LINE_UP</name></cpp:macro> <cpp:value>0xd1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CURVE_CORNER_TL</name></cpp:macro> <cpp:value>0xd2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CURVE_CORNER_TR</name></cpp:macro> <cpp:value>0xd3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CURVE_CORNER_BR</name></cpp:macro> <cpp:value>0xd4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_CURVE_CORNER_BL</name></cpp:macro> <cpp:value>0xd5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODE_MAX</name></cpp:macro> <cpp:value>0xd6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_MIN</name></cpp:macro> <cpp:value>0xc8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_LINE_VERT</name></cpp:macro> <cpp:value>"\xc8"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_LINE_CROSS</name></cpp:macro> <cpp:value>"\xc9"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CORNER_BR</name></cpp:macro> <cpp:value>"\xca"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CORNER_BL</name></cpp:macro> <cpp:value>"\xcb"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_ARROW_RIGHT</name></cpp:macro> <cpp:value>"\xcc"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_ARROW_LEFT</name></cpp:macro> <cpp:value>"\xcd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_LINE_HORIZ</name></cpp:macro> <cpp:value>"\xce"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CORNER_TL</name></cpp:macro> <cpp:value>"\xcf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CORNER_TR</name></cpp:macro> <cpp:value>"\xd0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_LINE_UP</name></cpp:macro> <cpp:value>"\xd1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CURVE_CORNER_TL</name></cpp:macro> <cpp:value>"\xd2"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CURVE_CORNER_TR</name></cpp:macro> <cpp:value>"\xd3"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CURVE_CORNER_BR</name></cpp:macro> <cpp:value>"\xd4"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_CURVE_CORNER_BL</name></cpp:macro> <cpp:value>"\xd5"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNECODESTR_MAX</name></cpp:macro> <cpp:value>0xd5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_LINE_VERT</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_LINE_CROSS</name></cpp:macro> <cpp:value>"â¼"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_LINE_HORIZ</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_LINE_UP</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CORNER_BR</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CORNER_BL</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CORNER_TL</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CORNER_TR</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_ARROW_RIGHT</name></cpp:macro> <cpp:value>"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_ARROW_LEFT</name></cpp:macro> <cpp:value>"&lt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CURVE_CORNER_TL</name></cpp:macro> <cpp:value>"â­"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CURVE_CORNER_TR</name></cpp:macro> <cpp:value>"â®"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CURVE_CORNER_BR</name></cpp:macro> <cpp:value>"â¯"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_CURVE_CORNER_BL</name></cpp:macro> <cpp:value>"â°"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNE_LONG_LINE_HORIZ</name></cpp:macro> <cpp:value>"â"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF_CIRCLE</name></cpp:macro> <cpp:value>"\u25EF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF_BLOCK</name></cpp:macro> <cpp:value>"\u2588"</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RConsEditorCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RConsClickCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsBreakCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>RConsSleepBeginCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsSleepEndCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsQueueTaskOneshot</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsFunctionKey</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fkey</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>COLOR_MODE_DISABLED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>COLOR_MODE_16</name></decl>, <decl><name>COLOR_MODE_256</name></decl>, <decl><name>COLOR_MODE_16M</name></decl> }</block></enum></type> <name>RConsColorMode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_cons_context_t</name> <block>{
<decl_stmt><decl><type><name>RConsGrep</name></type> <name>grep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>cons_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>breaked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>break_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsEvent</name></type> <name>event_interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>event_interrupt_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_depth</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RLogCallback</name></type> <name>log_callback</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastOutput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lastMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lastEnabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pageable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPalette</name></type> <name>cpal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPrintablePalette</name></type> <name>pal</name></decl>;</decl_stmt>
}</block></struct></type> <name>RConsContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUD_BUF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_cons_t</name> <block>{
<decl_stmt><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_html</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>echo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fix_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fix_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>break_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noflush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_autocomplete_widget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fdin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fdout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>teefile</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>user_fgets</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>RConsEvent</name></type> <name>event_resize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>event_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsEditorCallback</name></type> <name>cb_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsBreakCallback</name></type> <name>cb_break</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsSleepBeginCallback</name></type> <name>cb_sleep_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsSleepEndCallback</name></type> <name>cb_sleep_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsClickCallback</name></type> <name>cb_click</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsQueueTaskOneshot</name></type> <name>cb_task_oneshot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsFunctionKey</name></type> <name>cb_fkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>term_raw</name></decl>, <name>term_buf</name>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>DWORD</name></type> <name>term_raw</name></decl>, <name>term_buf</name>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blankline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>highlight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enable_highlight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>null</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_wine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_line_t</name></name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_DEPRECATE</name> <name>bool</name></type> <name>newline</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ansicon</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_utf8</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>use_utf8_curvy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>dotted_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesleep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pagesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>break_word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>break_word_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>grep_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>grep_highlight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_tts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>filter</name></decl>;</decl_stmt>
<function_decl><type><name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>rgbstr</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>click_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>click_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>click_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_vals</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RCons</name>;</typedef>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F1</name></cpp:macro> <cpp:value>0xf1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F2</name></cpp:macro> <cpp:value>0xf2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F3</name></cpp:macro> <cpp:value>0xf3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F4</name></cpp:macro> <cpp:value>0xf4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F5</name></cpp:macro> <cpp:value>0xf5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F6</name></cpp:macro> <cpp:value>0xf6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F7</name></cpp:macro> <cpp:value>0xf7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F8</name></cpp:macro> <cpp:value>0xf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F9</name></cpp:macro> <cpp:value>0xf9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F10</name></cpp:macro> <cpp:value>0xfa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F11</name></cpp:macro> <cpp:value>0xfb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_F12</name></cpp:macro> <cpp:value>0xfc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_KEY_ESC</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CLEAR_LINE</name></cpp:macro> <cpp:value>"\x1b[2K\r"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CLEAR_SCREEN</name></cpp:macro> <cpp:value>"\x1b[2J\r"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CLEAR_FROM_CURSOR_TO_END</name></cpp:macro> <cpp:value>"\x1b[0J\r"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CURSOR_SAVE</name></cpp:macro> <cpp:value>"\x1b[s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_CURSOR_RESTORE</name></cpp:macro> <cpp:value>"\x1b[u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_GET_CURSOR_POSITION</name></cpp:macro> <cpp:value>"\x1b[6n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BLINK</name></cpp:macro> <cpp:value>"\x1b[5m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_INVERT</name></cpp:macro> <cpp:value>"\x1b[7m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_INVERT_RESET</name></cpp:macro> <cpp:value>"\x1b[27m"</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RESET_TERMINAL</name></cpp:macro> <cpp:value>"\x1b" "c\x1b(K\x1b[0m\x1b[J\x1b[?25h"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RESET</name></cpp:macro> <cpp:value>"\x1b[0m"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RESET_NOBG</name></cpp:macro> <cpp:value>"\x1b[27;22;24;25;28;39m"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RESET_BG</name></cpp:macro> <cpp:value>"\x1b[49m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RESET_ALL</name></cpp:macro> <cpp:value>"\x1b[0m\x1b[49m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BLACK</name></cpp:macro> <cpp:value>"\x1b[30m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGBLACK</name></cpp:macro> <cpp:value>"\x1b[40m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_RED</name></cpp:macro> <cpp:value>"\x1b[31m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGRED</name></cpp:macro> <cpp:value>"\x1b[41m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_WHITE</name></cpp:macro> <cpp:value>"\x1b[37m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGWHITE</name></cpp:macro> <cpp:value>"\x1b[47m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_GREEN</name></cpp:macro> <cpp:value>"\x1b[32m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGGREEN</name></cpp:macro> <cpp:value>"\x1b[42m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_MAGENTA</name></cpp:macro> <cpp:value>"\x1b[35m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGMAGENTA</name></cpp:macro> <cpp:value>"\x1b[45m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_YELLOW</name></cpp:macro> <cpp:value>"\x1b[33m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGYELLOW</name></cpp:macro> <cpp:value>"\x1b[43m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_CYAN</name></cpp:macro> <cpp:value>"\x1b[36m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGCYAN</name></cpp:macro> <cpp:value>"\x1b[46m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BLUE</name></cpp:macro> <cpp:value>"\x1b[34m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGBLUE</name></cpp:macro> <cpp:value>"\x1b[44m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_GRAY</name></cpp:macro> <cpp:value>"\x1b[90m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGGRAY</name></cpp:macro> <cpp:value>"\x1b[100m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBLACK</name></cpp:macro> <cpp:value>Color_GRAY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGBLACK</name></cpp:macro> <cpp:value>Color_BGGRAY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BRED</name></cpp:macro> <cpp:value>"\x1b[91m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGRED</name></cpp:macro> <cpp:value>"\x1b[101m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BWHITE</name></cpp:macro> <cpp:value>"\x1b[97m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGWHITE</name></cpp:macro> <cpp:value>"\x1b[107m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BGREEN</name></cpp:macro> <cpp:value>"\x1b[92m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGGREEN</name></cpp:macro> <cpp:value>"\x1b[102m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BMAGENTA</name></cpp:macro> <cpp:value>"\x1b[95m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGMAGENTA</name></cpp:macro> <cpp:value>"\x1b[105m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BYELLOW</name></cpp:macro> <cpp:value>"\x1b[93m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGYELLOW</name></cpp:macro> <cpp:value>"\x1b[103m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BCYAN</name></cpp:macro> <cpp:value>"\x1b[96m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGCYAN</name></cpp:macro> <cpp:value>"\x1b[106m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBLUE</name></cpp:macro> <cpp:value>"\x1b[94m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Color_BBGBLUE</name></cpp:macro> <cpp:value>"\x1b[104m"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCOLOR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>bgr</name></type></parameter>, <parameter><type><name>bgg</name></type></parameter>, <parameter><type><name>bgb</name></type></parameter>, <parameter><type><name>id16</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{0, a, r, g, b, bgr, bgg, bgb, id16}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCOLOR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>bgr</name></type></parameter>, <parameter><type><name>bgg</name></type></parameter>, <parameter><type><name>bgb</name></type></parameter>, <parameter><type><name>id16</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RColor) {0, a, r, g, b, bgr, bgg, bgb, id16}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_NULL</name></cpp:macro> <cpp:value>RCOLOR(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, -1)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_RED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_WHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_GREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_MAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_YELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_CYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 12)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 12, 12, 12, 0x00, 0x00, 0x00, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 12, 12, 12, 0x00, 0x00, 0x00, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_RED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 197, 15, 31, 0x00, 0x00, 0x00, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 197, 15, 31, 0x00, 0x00, 0x00, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_WHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 204, 204, 204, 0x00, 0x00, 0x00, 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 204, 204, 204, 0x00, 0x00, 0x00, 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_GREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 19, 161, 14, 0x00, 0x00, 0x00, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 19, 161, 14, 0x00, 0x00, 0x00, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_MAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 136, 23, 152, 0x00, 0x00, 0x00, 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 136, 23, 152, 0x00, 0x00, 0x00, 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_YELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 193, 156, 0, 0x00, 0x00, 0x00, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 193, 156, 0, 0x00, 0x00, 0x00, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_CYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 58, 150, 221, 0x00, 0x00, 0x00, 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 58, 150, 221, 0x00, 0x00, 0x00, 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 0, 55, 218, 0x00, 0x00, 0x00, 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 0, 55, 218, 0x00, 0x00, 0x00, 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 118, 118, 118, 0x00, 0x00, 0x00, 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGBLACK</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 118, 118, 118, 0x00, 0x00, 0x00, 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 231, 72, 86, 0x00, 0x00, 0x00, 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGRED</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 231, 72, 86, 0x00, 0x00, 0x00, 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 242, 242, 242, 0x00, 0x00, 0x00, 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGWHITE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 242, 242, 242, 0x00, 0x00, 0x00, 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 22, 198, 12, 0x00, 0x00, 0x00, 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGGREEN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 22, 198, 12, 0x00, 0x00, 0x00, 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 180, 0, 158, 0x00, 0x00, 0x00, 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGMAGENTA</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 180, 0, 158, 0x00, 0x00, 0x00, 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 249, 241, 165, 0x00, 0x00, 0x00, 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGYELLOW</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 249, 241, 165, 0x00, 0x00, 0x00, 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 97, 214, 214, 0x00, 0x00, 0x00, 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGCYAN</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 97, 214, 214, 0x00, 0x00, 0x00, 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_FG, 59, 120, 255, 0x00, 0x00, 0x00, 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BBGBLUE</name></cpp:macro> <cpp:value>RCOLOR(ALPHA_BG, 59, 120, 255, 0x00, 0x00, 0x00, 12)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_GRAY</name></cpp:macro> <cpp:value>RColor_BBLACK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RColor_BGGRAY</name></cpp:macro> <cpp:value>RColor_BBGBLACK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Colors_PLAIN</name></cpp:macro> <cpp:value>{ Color_BLACK, Color_RED, Color_WHITE, Color_GREEN, Color_MAGENTA, Color_YELLOW, Color_CYAN, Color_BLUE, Color_GRAY}</cpp:value></cpp:define>




<enum>enum <block>{
<decl><name>PAL_PROMPT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PAL_ADDRESS</name></decl>,
<decl><name>PAL_DEFAULT</name></decl>,
<decl><name>PAL_CHANGED</name></decl>,
<decl><name>PAL_JUMP</name></decl>,
<decl><name>PAL_CALL</name></decl>,
<decl><name>PAL_PUSH</name></decl>,
<decl><name>PAL_TRAP</name></decl>,
<decl><name>PAL_CMP</name></decl>,
<decl><name>PAL_RET</name></decl>,
<decl><name>PAL_NOP</name></decl>,
<decl><name>PAL_METADATA</name></decl>,
<decl><name>PAL_HEADER</name></decl>,
<decl><name>PAL_PRINTABLE</name></decl>,
<decl><name>PAL_LINES0</name></decl>,
<decl><name>PAL_LINES1</name></decl>,
<decl><name>PAL_LINES2</name></decl>,
<decl><name>PAL_00</name></decl>,
<decl><name>PAL_7F</name></decl>,
<decl><name>PAL_FF</name></decl>
}</block>;</enum>


<enum>enum <block>{
<decl><name>LINE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LINE_TRUE</name></decl>,
<decl><name>LINE_FALSE</name></decl>,
<decl><name>LINE_UNCJMP</name></decl>,
<decl><name>LINE_NOSYM_VERT</name></decl>,
<decl><name>LINE_NOSYM_HORIZ</name></decl>
}</block>;</enum>

<typedef>typedef <type><enum>enum <block>{
<decl><name>INSERT_MODE</name> <init>= <expr><literal type="char">'i'</literal></expr></init></decl>,
<decl><name>CONTROL_MODE</name> <init>= <expr><literal type="char">'c'</literal></expr></init></decl>
}</block></enum></type> <name>RViMode</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOT_STYLE_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOT_STYLE_CONDITIONAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOT_STYLE_BACKEDGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_cons_canvas_line_style_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dot_style</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCanvasLineStyle</name>;</typedef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_VERT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_CROSS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_HORIZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_UP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_BR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_BL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_TL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_TR</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROW_RIGHT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROW_LEFT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_VERT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_CROSS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_HORIZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_UP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_TL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_BR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_BL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORNER_TR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROW_RIGHT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROW_LEFT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RConsCanvas</name><modifier>*</modifier></type> <name>r_cons_canvas_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_free</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_clear</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_print_region</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_canvas_to_string</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_attr</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_write</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_canvas_gotoxy</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_goto_write</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_box</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_circle</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_diagonal</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_square</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_canvas_resize</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_fill</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_square_defined</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bendpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isvert</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line_back_edge</name> <parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ybendpoint1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xbendpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ybendpoint2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isvert</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_singleton</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_lastline</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_lastline_utf8_ansi_len</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_click</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_get_click</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RConsBreak</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_breaked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_interactive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_default_context_is_interactive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_cons_sleep_begin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_sleep_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_push</name><parameter_list>(<parameter><decl><type><name>RConsBreak</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_breakword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_pipe_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>append</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pipe_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_ansicon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_w32_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_w32_gotoxy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_w32_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vmode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_win_printf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>vmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_win_eprintf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>vmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_win_vhprintf</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>hdl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RConsContext</name> <modifier>*</modifier></type><name>r_cons_context_new</name><parameter_list>(<parameter><decl><type><name>R_NULLABLE</name> <name>RConsContext</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_load</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_context_is_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break_push</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RConsBreak</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break_pop</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_editor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_reset_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_print_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_echo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear00</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_fill_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_stdout_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>append</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_stdout_set_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_gotoxy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_cur_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_show_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_swap_ground</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_drop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_chop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_raw</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_interactive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_last_interactive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_utf8</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grep</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_printf_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_cons_print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_strcat (x)</cpp:value></cpp:define>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_println</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat_justify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_memcat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_newline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_filter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_print_fps</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_last</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_less_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exitkeys</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_less</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_2048</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_memset</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_visual_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_visual_write</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_utf8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_cmd_help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>help</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_log_stub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_controlz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_readchar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_readpush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_readflush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_switchbuf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_readchar_timeout</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>usec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_any_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_eof</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_palette_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_pal_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_update_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_init</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_copy</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_pal_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>outcol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_pal_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_pal_get_i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_cons_pal_get_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_pal_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_rgb_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_tostring</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_pal_show</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_isatty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_cursor</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_arrow_to_hjkl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_html_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rainbow_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_rainbow_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_rainbow_new</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_cons_get_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_buffer_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_parsecmd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotestr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type> <name>r_cons_grep_strip</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotestr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_process</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>grep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_grep_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_grepbuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_rgb</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_rgb_fgbg</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>B</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_rgb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str_mode</name><parameter_list>(<parameter><decl><type><name>RConsColorMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RColor</name> <modifier>*</modifier></type><name>rcolor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_rgb_str_off</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_color_random</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_invert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_yesno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_cup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_column</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_column</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_title</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_cons_enable_mouse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_enable_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cons_bind</name><parameter_list>(<parameter><decl><type><name>RConsBind</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_cons_get_rune</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LINE_BUFSIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_LINE_HISTSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_EDGES_X_INC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SELWIDGET_MAXH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SELWIDGET_MAXW</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SELWIDGET_DIR_UP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SELWIDGET_DIR_DOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_selection_widget_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>selection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>complete_common</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>direction</name></decl>;</decl_stmt>
}</block></struct></type> <name>RSelWidget</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_line_hist_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>autosave</name></decl>;</decl_stmt>
}</block></struct></type> <name>RLineHistory</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_line_buffer_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>R_LINE_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>RLineBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_hud_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>current_entry_n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_entry_n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>activate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vi</name></decl>;</decl_stmt>
}</block></struct></type> <name>RLineHud</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>r_line_t</name></name></type> <name>RLine</name>;</typedef> 
<typedef>typedef <type><name><name>struct</name> <name>r_line_comp_t</name></name></type> <name>RLineCompletion</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>R_LINE_PROMPT_DEFAULT</name></decl>, <decl><name>R_LINE_PROMPT_OFFSET</name></decl>, <decl><name>R_LINE_PROMPT_FILE</name></decl> }</block></enum></type> <name>RLinePromptType</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RLineCompletionCb</name>)<parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RLinePromptType</name></type> <name>prompt_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>r_line_comp_t</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>args_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPVector</name></type> <name>args</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RLineCompletionCb</name></type> <name>run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>run_user</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>RLineEditorCb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RLineHistoryUpCb</name>)<parameter_list>(<parameter><decl><type><name>RLine</name><modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RLineHistoryDownCb</name>)<parameter_list>(<parameter><decl><type><name>RLine</name><modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>r_line_t</name> <block>{
<decl_stmt><decl><type><name>RLineCompletion</name></type> <name>completion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineHistory</name></type> <name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSelWidget</name> <modifier>*</modifier></type><name>sel_widget</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLineHistoryUpCb</name></type> <name>cb_history_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineHistoryDownCb</name></type> <name>cb_history_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineEditorCb</name></type> <name>cb_editor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsFunctionKey</name></type> <name>cb_fkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>echo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_echo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>kill_ring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kill_ring_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clipboard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hist_up</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hist_down</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zerosep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enable_vi_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vi_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prompt_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLinePromptType</name></type> <name>prompt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_hist_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file_hist_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineHud</name> <modifier>*</modifier></type><name>hud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sdbshell_hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>sdbshell_hist_iter</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ansicon</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>R_API</name> <name>RLine</name> <modifier>*</modifier></type><name>r_line_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RLine</name> <modifier>*</modifier></type><name>r_line_singleton</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_line_get_prompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_set_prompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_dietline_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_clipboard_push</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_hist_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>RLineReadCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_readline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_readline_cb</name><parameter_list>(<parameter><decl><type><name>RLineReadCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_label_show</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_line_hist_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_set_hist_callback</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>RLineHistoryUpCb</name></type> <name>cb_up</name></decl></parameter>, <parameter><decl><type><name>RLineHistoryDownCb</name></type> <name>cb_down</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_cmd_up</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_line_hist_cmd_down</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_completion_init</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>args_limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_completion_fini</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_completion_push</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_completion_set</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_line_completion_clear</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_INVERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y? (x?Color_INVERT: Color_INVERT_RESET): (x?"[":"]"))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RPanelsMenuCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>r_panels_menu_item</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n_sub</name></decl>, <name>selectedIndex</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_panels_menu_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsMenuCallback</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPanelsMenuItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panels_menu_t</name> <block>{
<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>refreshPanels</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPanelsMenu</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PANEL_MODE_DEFAULT</name></decl>,
<decl><name>PANEL_MODE_MENU</name></decl>,
<decl><name>PANEL_MODE_ZOOM</name></decl>,
<decl><name>PANEL_MODE_WINDOW</name></decl>,
<decl><name>PANEL_MODE_HELP</name></decl>
}</block></enum></type> <name>RPanelsMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PANEL_FUN_SNOW</name></decl>,
<decl><name>PANEL_FUN_SAKURA</name></decl>,
<decl><name>PANEL_FUN_NOFUN</name></decl>
}</block></enum></type> <name>RPanelsFun</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PANEL_LAYOUT_DEFAULT_STATIC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PANEL_LAYOUT_DEFAULT_DYNAMIC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>RPanelsLayout</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPanelsSnow</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>RModal</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panels_t</name> <block>{
<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>panel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_panels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columnWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_orig_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_orig_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>autoUpdate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mouse_on_edge_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mouse_on_edge_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>panels_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>rotate_db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>almighty_db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>mht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsMode</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsFun</name></type> <name>fun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsMode</name></type> <name>prevMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsLayout</name></type> <name>layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>snows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPanels</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>DEFAULT</name></decl>,
<decl><name>ROTATE</name></decl>,
<decl><name>DEL</name></decl>,
<decl><name>QUIT</name></decl>,
}</block></enum></type> <name>RPanelsRootState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panels_root_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n_panels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_panels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>pdc_caches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>cur_pdc_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier><modifier>*</modifier></type><name>panels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPanelsRootState</name></type> <name>root_state</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPanelsRoot</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
