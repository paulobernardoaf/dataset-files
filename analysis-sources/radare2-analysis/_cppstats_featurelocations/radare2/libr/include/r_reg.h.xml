<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_reg.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_REG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_REG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_hex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name> <argument_list>(<argument><expr><name>r_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<typedef>typedef <type><enum>enum <block>{
<decl><name>R_REG_TYPE_GPR</name></decl>,
<decl><name>R_REG_TYPE_DRX</name></decl>,
<decl><name>R_REG_TYPE_FPU</name></decl>,
<decl><name>R_REG_TYPE_MMX</name></decl>,
<decl><name>R_REG_TYPE_XMM</name></decl>,
<decl><name>R_REG_TYPE_YMM</name></decl>,
<decl><name>R_REG_TYPE_FLG</name></decl>,
<decl><name>R_REG_TYPE_SEG</name></decl>,
<decl><name>R_REG_TYPE_LAST</name></decl>,
<decl><name>R_REG_TYPE_ALL</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
}</block></enum></type> <name>RRegisterType</name>;</typedef>





<typedef>typedef <type><enum>enum <block>{
<decl><name>R_REG_NAME_PC</name></decl>, 
<decl><name>R_REG_NAME_SP</name></decl>, 
<decl><name>R_REG_NAME_SR</name></decl>, 
<decl><name>R_REG_NAME_BP</name></decl>, 
<decl><name>R_REG_NAME_LR</name></decl>, 

<decl><name>R_REG_NAME_A0</name></decl>, 
<decl><name>R_REG_NAME_A1</name></decl>,
<decl><name>R_REG_NAME_A2</name></decl>,
<decl><name>R_REG_NAME_A3</name></decl>,
<decl><name>R_REG_NAME_A4</name></decl>,
<decl><name>R_REG_NAME_A5</name></decl>,
<decl><name>R_REG_NAME_A6</name></decl>,
<decl><name>R_REG_NAME_A7</name></decl>,
<decl><name>R_REG_NAME_A8</name></decl>,
<decl><name>R_REG_NAME_A9</name></decl>,

<decl><name>R_REG_NAME_R0</name></decl>, 
<decl><name>R_REG_NAME_R1</name></decl>,
<decl><name>R_REG_NAME_R2</name></decl>,
<decl><name>R_REG_NAME_R3</name></decl>,

<decl><name>R_REG_NAME_ZF</name></decl>,
<decl><name>R_REG_NAME_SF</name></decl>,
<decl><name>R_REG_NAME_CF</name></decl>,
<decl><name>R_REG_NAME_OF</name></decl>,

<decl><name>R_REG_NAME_SN</name></decl>,
<decl><name>R_REG_NAME_LAST</name></decl>,
}</block></enum></type> <name>RRegisterId</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_EQ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_NE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_CF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_CARRY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_NEG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_NEGATIVE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_OF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_OVERFLOW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_HI</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_HE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_LO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_LOE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_GE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_GT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_LT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_LE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_COND_LAST</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_reg_item_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>packed_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>is_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arena</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RRegItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_reg_arena_t</name> <block>{
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRegArena</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_reg_set_t</name> <block>{
<decl_stmt><decl><type><name>RRegArena</name> <modifier>*</modifier></type><name>arena</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht_regs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maskregstype</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RRegSet</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_reg_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_profile_cmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_profile_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>name</name><index>[<expr><name>R_REG_NAME_LAST</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RRegSet</name></type> <name><name>regset</name><index>[<expr><name>R_REG_TYPE_LAST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>allregs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>roregs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_thumb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>big_endian</name></decl>;</decl_stmt>
}</block></struct></type> <name>RReg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_reg_flags_t</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>s</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>z</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>a</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>c</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>o</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>p</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RRegFlags</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_free</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_free_internal</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RReg</name> <modifier>*</modifier></type><name>r_reg_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_name</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_profile_string</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_profile</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_parse_gdb_profile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_is_readonly</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RRegSet</name> <modifier>*</modifier></type><name>r_reg_regset_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_getv</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_setv</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_32_to_64</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rreg32</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_64_to_32</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rreg64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_name</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_role</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_reg_get_list</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_get_at</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_next_diff</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>prev_ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_reindex</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_index_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_item_free</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_type_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_get_name_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_cond_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_cond_apply</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_cond_set</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_get_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_cond_bits_set</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_bits</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegFlags</name> <modifier>*</modifier></type><name>r_reg_cond_retrieve</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value_big</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>utX</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value_by_role</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegisterId</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_value_by_role</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegisterId</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>float</name></type> <name>r_reg_get_float</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_float</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>double</name></type> <name>r_reg_get_double</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_double</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>long</name> <name>double</name></type> <name>r_reg_get_longdouble</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_longdouble</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_bvalue</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_set_bvalue</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_set_pack</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packbits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_pack</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packbits</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_reg_get_bytes</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_bytes</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_reg_read_regs</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_arena_set_bytes</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RRegArena</name> <modifier>*</modifier></type><name>r_reg_arena_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_free</name><parameter_list>(<parameter><decl><type><name>RRegArena</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_fit_arena</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_swap</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_arena_push</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_pop</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_zero</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_reg_arena_peek</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_poke</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_reg_arena_dup</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_cond_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_reg_arena_shrink</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
