<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\include\r_types_base.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_TYPES_BASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_TYPES_BASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cut8</name></cpp:macro> <cpp:value>const unsigned char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut64</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st64</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut32</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st32</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut16</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st16</name></cpp:macro> <cpp:value>short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st8</name></cpp:macro> <cpp:value>signed char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boolt</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALIGNED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALIGNED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(x)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>ut16</name></type> <name>uut16</name>;</typedef>
<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>ut32</name></type> <name>uut32</name>;</typedef>
<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>ut64</name></type> <name>uut64</name>;</typedef>
<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>st16</name></type> <name>ust16</name>;</typedef>
<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>st32</name></type> <name>ust32</name>;</typedef>
<typedef>typedef <macro><name>R_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>st64</name></type> <name>ust64</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>v8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>v16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>v32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>v64</name></decl>;</decl_stmt>
}</block></union></type> <name>utAny</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_ut80</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>High</name></decl>;</decl_stmt>
}</block></struct></type> <name>ut80</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_ut96</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>High</name></decl>;</decl_stmt>
}</block></struct></type> <name>ut96</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_ut128</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>High</name></decl>;</decl_stmt>
}</block></struct></type> <name>ut128</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_ut256</name> <block>{
<decl_stmt><decl><type><name>ut128</name></type> <name>Low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut128</name></type> <name>High</name></decl>;</decl_stmt>
}</block></struct></type> <name>ut256</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_utX</name><block>{
<decl_stmt><decl><type><name>ut80</name></type> <name>v80</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut96</name></type> <name>v96</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut128</name></type> <name>v128</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut256</name></type> <name>v256</name></decl>;</decl_stmt>
}</block></struct></type> <name>utX</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_EMPTY</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_EMPTY2</name></cpp:macro> <cpp:value>{{ 0 }}</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT64_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT64_GT0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT64_LT0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT64_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT32_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UT32_MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST64_MAX</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST64_MIN</name></cpp:macro> <cpp:value>(-ST64_MAX-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_GT0</name></cpp:macro> <cpp:value>0x8000000000000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_LT0</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_MIN</name></cpp:macro> <cpp:value>0ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_32U</name></cpp:macro> <cpp:value>0xFFFFFFFF00000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_16U</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFF0000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_8U</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFF00ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_MIN</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_GT0</name></cpp:macro> <cpp:value>0x80000000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_LT0</name></cpp:macro> <cpp:value>0x7FFFFFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST32_MAX</name></cpp:macro> <cpp:value>0x7FFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST32_MIN</name></cpp:macro> <cpp:value>(-ST32_MAX-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_MIN</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST16_MAX</name></cpp:macro> <cpp:value>0x7FFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST16_MIN</name></cpp:macro> <cpp:value>(-ST16_MAX-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT16_GT0</name></cpp:macro> <cpp:value>0x8000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT16_MAX</name></cpp:macro> <cpp:value>0xFFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST8_MAX</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST8_MIN</name></cpp:macro> <cpp:value>(-ST8_MAX-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT8_GT0</name></cpp:macro> <cpp:value>0x80U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT8_MAX</name></cpp:macro> <cpp:value>0xFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT8_MIN</name></cpp:macro> <cpp:value>0x00U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x + (x - (x % sizeof (ut64))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x + (x - (x % sizeof (ut32))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT16_ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x + (x - (x % sizeof (ut16))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_LO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)((x)&amp;UT32_MAX))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_HI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)(((ut64)(x))&gt;&gt;32)&amp;UT32_MAX)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SZT_ADD_OVFCHK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZT_ADD_OVFCHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SIZE_MAX - (x)) &lt; (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT64_ADD_OVFCHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UT64_MAX - (x)) &lt; (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT32_ADD_OVFCHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UT32_MAX - (x)) &lt; (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT16_ADD_OVFCHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UT16_MAX - (x)) &lt; (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UT8_ADD_OVFCHK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UT8_MAX - (x)) &lt; (y))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_IS_SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (1ULL&lt;&lt;(n)))?1:0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) |= (1ULL&lt;&lt;(n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_EVEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;1)==0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_ODD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!B_EVEN((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_UNSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp;= ~(1ULL&lt;&lt;(n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_TOGGLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ^= (1ULL&lt;&lt;(n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1111</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1110</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1101</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1100</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1011</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1010</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1001</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1000</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0111</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0110</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0101</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0100</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0011</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0010</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0001</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0000</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a&lt;&lt;12)|(b&lt;&lt;8)|(c&lt;&lt;4)|(d))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFINITY</name></cpp:macro> <cpp:value>(1.0f/0.0f)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN</name></cpp:macro> <cpp:value>(0.0f/0.0f)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PACKED</name><parameter_list>( <parameter><type><name>__Declaration__</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__pragma( pack(push, 1) ) __Declaration__ __pragma( pack(pop) )</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INFINITY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NAN</name></cpp:undef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PACKED</name><parameter_list>( <parameter><type><name>__Declaration__</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__Declaration__ __attribute__((__packed__))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APPLE_SDK_IPHONESIMULATOR</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIBC_HAVE_FORK</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBC_HAVE_FORK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUGGER</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
