<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\parse\p\parse_ppc_pseudo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PFMT32x</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFMT32x</name></cpp:macro> <cpp:value>"lx"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_MQ</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_XER</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_RTCU</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_RTCL</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_LR</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_CTR</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DSISR</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DAR</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DEC</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SDR1</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SRR0</name></cpp:macro> <cpp:value>0x1a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SRR1</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_VRSAVE</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_TBRL</name></cpp:macro> <cpp:value>0x10c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_TBRU</name></cpp:macro> <cpp:value>0x10d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SPRG0</name></cpp:macro> <cpp:value>0x110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SPRG1</name></cpp:macro> <cpp:value>0x111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SPRG2</name></cpp:macro> <cpp:value>0x112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SPRG3</name></cpp:macro> <cpp:value>0x113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_EAR</name></cpp:macro> <cpp:value>0x11a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_TBL</name></cpp:macro> <cpp:value>0x11c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_TBU</name></cpp:macro> <cpp:value>0x11d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PVR</name></cpp:macro> <cpp:value>0x11f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SPEFSCR</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT0U</name></cpp:macro> <cpp:value>0x210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT0L</name></cpp:macro> <cpp:value>0x211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT1U</name></cpp:macro> <cpp:value>0x212</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT1L</name></cpp:macro> <cpp:value>0x213</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT2U</name></cpp:macro> <cpp:value>0x214</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT2L</name></cpp:macro> <cpp:value>0x215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT3U</name></cpp:macro> <cpp:value>0x216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IBAT3L</name></cpp:macro> <cpp:value>0x217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT0U</name></cpp:macro> <cpp:value>0x218</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT0L</name></cpp:macro> <cpp:value>0x219</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT1U</name></cpp:macro> <cpp:value>0x21a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT1L</name></cpp:macro> <cpp:value>0x21b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT2U</name></cpp:macro> <cpp:value>0x21c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT2L</name></cpp:macro> <cpp:value>0x21d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT3U</name></cpp:macro> <cpp:value>0x21e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DBAT3L</name></cpp:macro> <cpp:value>0x21f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UMMCR0</name></cpp:macro> <cpp:value>0x3a8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UMMCR1</name></cpp:macro> <cpp:value>0x3ac</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UPMC1</name></cpp:macro> <cpp:value>0x3a9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UPMC2</name></cpp:macro> <cpp:value>0x3aa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_USIA</name></cpp:macro> <cpp:value>0x3ab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UPMC3</name></cpp:macro> <cpp:value>0x3ad</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_UPMC4</name></cpp:macro> <cpp:value>0x3ae</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_MMCR0</name></cpp:macro> <cpp:value>0x3b8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PMC1</name></cpp:macro> <cpp:value>0x3b9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PMC2</name></cpp:macro> <cpp:value>0x3ba</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SIA</name></cpp:macro> <cpp:value>0x3bb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_MMCR1</name></cpp:macro> <cpp:value>0x3bc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PMC3</name></cpp:macro> <cpp:value>0x3bd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PMC4</name></cpp:macro> <cpp:value>0x3be</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_SDA</name></cpp:macro> <cpp:value>0x3bf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DMISS</name></cpp:macro> <cpp:value>0x3d0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DCMP</name></cpp:macro> <cpp:value>0x3d1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HASH1</name></cpp:macro> <cpp:value>0x3d2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HASH2</name></cpp:macro> <cpp:value>0x3d3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IMISS</name></cpp:macro> <cpp:value>0x3d4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_ICMP</name></cpp:macro> <cpp:value>0x3d5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_RPA</name></cpp:macro> <cpp:value>0x3d6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID0</name></cpp:macro> <cpp:value>0x3f0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID1</name></cpp:macro> <cpp:value>0x3f1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_IABR</name></cpp:macro> <cpp:value>0x3f2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID2</name></cpp:macro> <cpp:value>0x3f3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID4</name></cpp:macro> <cpp:value>0x3f4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_DABR</name></cpp:macro> <cpp:value>0x3f5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID5</name></cpp:macro> <cpp:value>0x3f6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_HID6</name></cpp:macro> <cpp:value>0x3f9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_ICTC</name></cpp:macro> <cpp:value>0x3fb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_THRM1</name></cpp:macro> <cpp:value>0x3fc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_THRM2</name></cpp:macro> <cpp:value>0x3fd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_THRM3</name></cpp:macro> <cpp:value>0x3fe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPR_PIR</name></cpp:macro> <cpp:value>0x3ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPC_UT64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strtol(x, NULL, 16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPC_UT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ut32)PPC_UT64(x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>mask64</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>mb</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>me</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>maskmb</name> <init>= <expr><name>UT64_MAX</name> <operator>&gt;&gt;</operator> <name>mb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>maskme</name> <init>= <expr><name>UT64_MAX</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>me</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>mb</name> <operator>&lt;=</operator> <name>me</name><operator>)</operator></expr> ?</condition><then> <expr><name>maskmb</name> <operator>&amp;</operator> <name>maskme</name></expr> </then><else>: <expr><name>maskmb</name> <operator>|</operator> <name>maskme</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>mask32</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>mb</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>me</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>maskmb</name> <init>= <expr><name>UT32_MAX</name> <operator>&gt;&gt;</operator> <name>mb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>maskme</name> <init>= <expr><name>UT32_MAX</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>me</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>mb</name> <operator>&lt;=</operator> <name>me</name><operator>)</operator></expr> ?</condition><then> <expr><name>maskmb</name> <operator>&amp;</operator> <name>maskme</name></expr> </then><else>: <expr><name>maskmb</name> <operator>|</operator> <name>maskme</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>can_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_operands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'J'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\x00'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'J'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">0x41</literal><operator>)</operator> <operator>&gt;</operator> <name>max_operands</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getspr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cspr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>spr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spr</name> <operator>&gt;</operator> <literal type="number">9999</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>spr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SPR_MQ</name></expr>:</case>
<return>return <expr><literal type="string">"mq"</literal></expr>;</return>
<case>case <expr><name>SPR_XER</name></expr>:</case>
<return>return <expr><literal type="string">"xer"</literal></expr>;</return>
<case>case <expr><name>SPR_RTCU</name></expr>:</case>
<return>return <expr><literal type="string">"rtcu"</literal></expr>;</return>
<case>case <expr><name>SPR_RTCL</name></expr>:</case>
<return>return <expr><literal type="string">"rtcl"</literal></expr>;</return>
<case>case <expr><name>SPR_LR</name></expr>:</case>
<return>return <expr><literal type="string">"lr"</literal></expr>;</return>
<case>case <expr><name>SPR_CTR</name></expr>:</case>
<return>return <expr><literal type="string">"ctr"</literal></expr>;</return>
<case>case <expr><name>SPR_DSISR</name></expr>:</case>
<return>return <expr><literal type="string">"dsisr"</literal></expr>;</return>
<case>case <expr><name>SPR_DAR</name></expr>:</case>
<return>return <expr><literal type="string">"dar"</literal></expr>;</return>
<case>case <expr><name>SPR_DEC</name></expr>:</case>
<return>return <expr><literal type="string">"dec"</literal></expr>;</return>
<case>case <expr><name>SPR_SDR1</name></expr>:</case>
<return>return <expr><literal type="string">"sdr1"</literal></expr>;</return>
<case>case <expr><name>SPR_SRR0</name></expr>:</case>
<return>return <expr><literal type="string">"srr0"</literal></expr>;</return>
<case>case <expr><name>SPR_SRR1</name></expr>:</case>
<return>return <expr><literal type="string">"srr1"</literal></expr>;</return>
<case>case <expr><name>SPR_VRSAVE</name></expr>:</case>
<return>return <expr><literal type="string">"vrsave"</literal></expr>;</return>
<case>case <expr><name>SPR_TBRL</name></expr>:</case>
<return>return <expr><literal type="string">"tbrl"</literal></expr>;</return>
<case>case <expr><name>SPR_TBRU</name></expr>:</case>
<return>return <expr><literal type="string">"tbru"</literal></expr>;</return>
<case>case <expr><name>SPR_SPRG0</name></expr>:</case>
<return>return <expr><literal type="string">"sprg0"</literal></expr>;</return>
<case>case <expr><name>SPR_SPRG1</name></expr>:</case>
<return>return <expr><literal type="string">"sprg1"</literal></expr>;</return>
<case>case <expr><name>SPR_SPRG2</name></expr>:</case>
<return>return <expr><literal type="string">"sprg2"</literal></expr>;</return>
<case>case <expr><name>SPR_SPRG3</name></expr>:</case>
<return>return <expr><literal type="string">"sprg3"</literal></expr>;</return>
<case>case <expr><name>SPR_EAR</name></expr>:</case>
<return>return <expr><literal type="string">"ear"</literal></expr>;</return>
<case>case <expr><name>SPR_TBL</name></expr>:</case>
<return>return <expr><literal type="string">"tbl"</literal></expr>;</return>
<case>case <expr><name>SPR_TBU</name></expr>:</case>
<return>return <expr><literal type="string">"tbu"</literal></expr>;</return>
<case>case <expr><name>SPR_PVR</name></expr>:</case>
<return>return <expr><literal type="string">"pvr"</literal></expr>;</return>
<case>case <expr><name>SPR_SPEFSCR</name></expr>:</case>
<return>return <expr><literal type="string">"spefscr"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT0U</name></expr>:</case>
<return>return <expr><literal type="string">"ibat0u"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT0L</name></expr>:</case>
<return>return <expr><literal type="string">"ibat0l"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT1U</name></expr>:</case>
<return>return <expr><literal type="string">"ibat1u"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT1L</name></expr>:</case>
<return>return <expr><literal type="string">"ibat1l"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT2U</name></expr>:</case>
<return>return <expr><literal type="string">"ibat2u"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT2L</name></expr>:</case>
<return>return <expr><literal type="string">"ibat2l"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT3U</name></expr>:</case>
<return>return <expr><literal type="string">"ibat3u"</literal></expr>;</return>
<case>case <expr><name>SPR_IBAT3L</name></expr>:</case>
<return>return <expr><literal type="string">"ibat3l"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT0U</name></expr>:</case>
<return>return <expr><literal type="string">"dbat0u"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT0L</name></expr>:</case>
<return>return <expr><literal type="string">"dbat0l"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT1U</name></expr>:</case>
<return>return <expr><literal type="string">"dbat1u"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT1L</name></expr>:</case>
<return>return <expr><literal type="string">"dbat1l"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT2U</name></expr>:</case>
<return>return <expr><literal type="string">"dbat2u"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT2L</name></expr>:</case>
<return>return <expr><literal type="string">"dbat2l"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT3U</name></expr>:</case>
<return>return <expr><literal type="string">"dbat3u"</literal></expr>;</return>
<case>case <expr><name>SPR_DBAT3L</name></expr>:</case>
<return>return <expr><literal type="string">"dbat3l"</literal></expr>;</return>
<case>case <expr><name>SPR_UMMCR0</name></expr>:</case>
<return>return <expr><literal type="string">"ummcr0"</literal></expr>;</return>
<case>case <expr><name>SPR_UMMCR1</name></expr>:</case>
<return>return <expr><literal type="string">"ummcr1"</literal></expr>;</return>
<case>case <expr><name>SPR_UPMC1</name></expr>:</case>
<return>return <expr><literal type="string">"upmc1"</literal></expr>;</return>
<case>case <expr><name>SPR_UPMC2</name></expr>:</case>
<return>return <expr><literal type="string">"upmc2"</literal></expr>;</return>
<case>case <expr><name>SPR_USIA</name></expr>:</case>
<return>return <expr><literal type="string">"usia"</literal></expr>;</return>
<case>case <expr><name>SPR_UPMC3</name></expr>:</case>
<return>return <expr><literal type="string">"upmc3"</literal></expr>;</return>
<case>case <expr><name>SPR_UPMC4</name></expr>:</case>
<return>return <expr><literal type="string">"upmc4"</literal></expr>;</return>
<case>case <expr><name>SPR_MMCR0</name></expr>:</case>
<return>return <expr><literal type="string">"mmcr0"</literal></expr>;</return>
<case>case <expr><name>SPR_PMC1</name></expr>:</case>
<return>return <expr><literal type="string">"pmc1"</literal></expr>;</return>
<case>case <expr><name>SPR_PMC2</name></expr>:</case>
<return>return <expr><literal type="string">"pmc2"</literal></expr>;</return>
<case>case <expr><name>SPR_SIA</name></expr>:</case>
<return>return <expr><literal type="string">"sia"</literal></expr>;</return>
<case>case <expr><name>SPR_MMCR1</name></expr>:</case>
<return>return <expr><literal type="string">"mmcr1"</literal></expr>;</return>
<case>case <expr><name>SPR_PMC3</name></expr>:</case>
<return>return <expr><literal type="string">"pmc3"</literal></expr>;</return>
<case>case <expr><name>SPR_PMC4</name></expr>:</case>
<return>return <expr><literal type="string">"pmc4"</literal></expr>;</return>
<case>case <expr><name>SPR_SDA</name></expr>:</case>
<return>return <expr><literal type="string">"sda"</literal></expr>;</return>
<case>case <expr><name>SPR_DMISS</name></expr>:</case>
<return>return <expr><literal type="string">"dmiss"</literal></expr>;</return>
<case>case <expr><name>SPR_DCMP</name></expr>:</case>
<return>return <expr><literal type="string">"dcmp"</literal></expr>;</return>
<case>case <expr><name>SPR_HASH1</name></expr>:</case>
<return>return <expr><literal type="string">"hash1"</literal></expr>;</return>
<case>case <expr><name>SPR_HASH2</name></expr>:</case>
<return>return <expr><literal type="string">"hash2"</literal></expr>;</return>
<case>case <expr><name>SPR_IMISS</name></expr>:</case>
<return>return <expr><literal type="string">"imiss"</literal></expr>;</return>
<case>case <expr><name>SPR_ICMP</name></expr>:</case>
<return>return <expr><literal type="string">"icmp"</literal></expr>;</return>
<case>case <expr><name>SPR_RPA</name></expr>:</case>
<return>return <expr><literal type="string">"rpa"</literal></expr>;</return>
<case>case <expr><name>SPR_HID0</name></expr>:</case>
<return>return <expr><literal type="string">"hid0"</literal></expr>;</return>
<case>case <expr><name>SPR_HID1</name></expr>:</case>
<return>return <expr><literal type="string">"hid1"</literal></expr>;</return>
<case>case <expr><name>SPR_IABR</name></expr>:</case>
<return>return <expr><literal type="string">"iabr"</literal></expr>;</return>
<case>case <expr><name>SPR_HID2</name></expr>:</case>
<return>return <expr><literal type="string">"hid2"</literal></expr>;</return>
<case>case <expr><name>SPR_HID4</name></expr>:</case>
<return>return <expr><literal type="string">"hid4"</literal></expr>;</return>
<case>case <expr><name>SPR_DABR</name></expr>:</case>
<return>return <expr><literal type="string">"dabr"</literal></expr>;</return>
<case>case <expr><name>SPR_HID5</name></expr>:</case>
<return>return <expr><literal type="string">"hid5"</literal></expr>;</return>
<case>case <expr><name>SPR_HID6</name></expr>:</case>
<return>return <expr><literal type="string">"hid6"</literal></expr>;</return>


<case>case <expr><name>SPR_ICTC</name></expr>:</case>
<return>return <expr><literal type="string">"ictc"</literal></expr>;</return>
<case>case <expr><name>SPR_THRM1</name></expr>:</case>
<return>return <expr><literal type="string">"thrm1"</literal></expr>;</return>
<case>case <expr><name>SPR_THRM2</name></expr>:</case>
<return>return <expr><literal type="string">"thrm2"</literal></expr>;</return>
<case>case <expr><name>SPR_THRM3</name></expr>:</case>
<return>return <expr><literal type="string">"thrm3"</literal></expr>;</return>
<case>case <expr><name>SPR_PIR</name></expr>:</case>
<return>return <expr><literal type="string">"pir"</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cspr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cspr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"spr_%u"</literal></expr></argument>, <argument><expr><name>spr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>cspr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_operands</name></decl>;</decl_stmt>
}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cmpb"</literal></expr>, <expr><literal type="string">"A = ((byte) B == (byte) C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"cmpd"</literal></expr>, <expr><literal type="string">"A = (B == C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpdi"</literal></expr>, <expr><literal type="string">"A = (B == C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpld"</literal></expr>, <expr><literal type="string">"A = ((unsigned) B == (unsigned) C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpldi"</literal></expr>, <expr><literal type="string">"A = ((unsigned) B == (unsigned) C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmplw"</literal></expr>, <expr><literal type="string">"A = ((unsigned) B == (unsigned) C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmplwi"</literal></expr>, <expr><literal type="string">"A = ((unsigned) B == (unsigned) C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpw"</literal></expr>, <expr><literal type="string">"A = (B == C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpwi"</literal></expr>, <expr><literal type="string">"A = (B == C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"beq"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_EQ) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"beq-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_EQ) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"beq+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_EQ) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bge"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bge-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bge+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bgt"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bgt-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bgt+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ble"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ble-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ble+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blt"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blt-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blt+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LT) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bne"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_NE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bne-"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_NE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bne+"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_NE) goto B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldic"</literal></expr>, <expr><literal type="string">"A = rol64(B, C) &amp; D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldcl"</literal></expr>, <expr><literal type="string">"A = rol64(B, C) &amp; D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldicl"</literal></expr>, <expr><literal type="string">"A = rol64(B, C) &amp; D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldcr"</literal></expr>, <expr><literal type="string">"A = rol64(B, C) &amp; D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldicr"</literal></expr>, <expr><literal type="string">"A = rol64(B, C) &amp; D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rldimi"</literal></expr>, <expr><literal type="string">"A = (rol64(B, C) &amp; D) | (A &amp; E)"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwimi"</literal></expr>, <expr><literal type="string">"A = (rol32(B, C) &amp; D) | (A &amp; E)"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwimi."</literal></expr>, <expr><literal type="string">"A = (rol32(B, C) &amp; D) | (A &amp; E)"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwinm"</literal></expr>, <expr><literal type="string">"A = rol32(B, C) &amp; D"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwinm."</literal></expr>, <expr><literal type="string">"A = rol32(B, C) &amp; D"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwnm"</literal></expr>, <expr><literal type="string">"A = rol32(B, C) &amp; D"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"rlwnm."</literal></expr>, <expr><literal type="string">"A = rol32(B, C) &amp; D"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"td"</literal></expr>, <expr><literal type="string">"if (B A C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"tdi"</literal></expr>, <expr><literal type="string">"if (B A C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdu"</literal></expr>, <expr><literal type="string">"if (B A C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdui"</literal></expr>, <expr><literal type="string">"if (B A C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tw"</literal></expr>, <expr><literal type="string">"if ((word) B A (word) C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twi"</literal></expr>, <expr><literal type="string">"if ((word) B A (word) C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twu"</literal></expr>, <expr><literal type="string">"if ((word) B A (word) C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twui"</literal></expr>, <expr><literal type="string">"if ((word) B A (word) C) trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"mfspr"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"mtspr"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addc"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"adde"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addi"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addic"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addis"</literal></expr>, <expr><literal type="string">"A = B + (C &lt;&lt; 16)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addme"</literal></expr>, <expr><literal type="string">"A = B - A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addze"</literal></expr>, <expr><literal type="string">"A = zero extended(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andc"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andi"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andis"</literal></expr>, <expr><literal type="string">"A = B &amp; (C &lt;&lt; 16)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"attn"</literal></expr>, <expr><literal type="string">"attention A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ba"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,








<expr><block>{ <expr><literal type="string">"bct"</literal></expr>, <expr><literal type="string">"goto ct"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bctr"</literal></expr>, <expr><literal type="string">"goto ctr"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bctrl"</literal></expr>, <expr><literal type="string">"call ctr"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnz"</literal></expr>, <expr><literal type="string">"if (ctr != 0) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnza"</literal></expr>, <expr><literal type="string">"if (ctr != 0) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzf"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; !cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzfa"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; !cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzfl"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzfla"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzflrl"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzl"</literal></expr>, <expr><literal type="string">"if (ctr != 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzla"</literal></expr>, <expr><literal type="string">"if (ctr != 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzlr"</literal></expr>, <expr><literal type="string">"if (ctr != 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzlrl"</literal></expr>, <expr><literal type="string">"if (ctr != 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzt"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnzta"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnztl"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnztla"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnztlr"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdnztlrl"</literal></expr>, <expr><literal type="string">"if (ctr != 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdz"</literal></expr>, <expr><literal type="string">"if (ctr == 0) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdza"</literal></expr>, <expr><literal type="string">"if (ctr == 0) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzf"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzfa"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzfl"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzfla"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzflr"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzflrl"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; !cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzl"</literal></expr>, <expr><literal type="string">"if (ctr == 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzla"</literal></expr>, <expr><literal type="string">"if (ctr == 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzlr"</literal></expr>, <expr><literal type="string">"if (ctr == 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzlrl"</literal></expr>, <expr><literal type="string">"if (ctr == 0) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzt"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdzta"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdztl"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdztla"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdztlr"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bdztlrl"</literal></expr>, <expr><literal type="string">"if (ctr == 0 &amp;&amp; cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"if (!cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bfa"</literal></expr>, <expr><literal type="string">"if (!cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bfctr"</literal></expr>, <expr><literal type="string">"if (!cond) goto ctr"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bfctrl"</literal></expr>, <expr><literal type="string">"if (!cond) call ctr"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bfl"</literal></expr>, <expr><literal type="string">"if (!cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bfla"</literal></expr>, <expr><literal type="string">"if (!cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bflr"</literal></expr>, <expr><literal type="string">"if (!cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bflrl"</literal></expr>, <expr><literal type="string">"if (!cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bl"</literal></expr>, <expr><literal type="string">"call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bla"</literal></expr>, <expr><literal type="string">"call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blr"</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blrl"</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bltlr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LT) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blelr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_LE) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bgtlr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GT) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bgelr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_GE) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bnelr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_NE) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"beqlr"</literal></expr>, <expr><literal type="string">"if (A &amp; FLG_EQ) return"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brinc"</literal></expr>, <expr><literal type="string">"A = bit_revese(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bt"</literal></expr>, <expr><literal type="string">"if (cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bta"</literal></expr>, <expr><literal type="string">"if (cond) goto A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btctr"</literal></expr>, <expr><literal type="string">"if (cond) goto ctr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btctrl"</literal></expr>, <expr><literal type="string">"if (cond) call ctr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btl"</literal></expr>, <expr><literal type="string">"if (cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btla"</literal></expr>, <expr><literal type="string">"if (cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btlr"</literal></expr>, <expr><literal type="string">"if (cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"btlrl"</literal></expr>, <expr><literal type="string">"if (cond) call A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clrldi"</literal></expr>, <expr><literal type="string">"A = B &amp; mask(0, C)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clrlwi"</literal></expr>, <expr><literal type="string">"A = B &amp; mask(0, C)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzd"</literal></expr>, <expr><literal type="string">"A = cnt_leading_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cntlzw"</literal></expr>, <expr><literal type="string">"A = cnt_leading_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crand"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crandc"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crclr"</literal></expr>, <expr><literal type="string">"A = A ^ A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"creqv"</literal></expr>, <expr><literal type="string">"A = B == C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crmove"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crnand"</literal></expr>, <expr><literal type="string">"A = B &amp; !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crnor"</literal></expr>, <expr><literal type="string">"A = B | !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crnot"</literal></expr>, <expr><literal type="string">"A = !B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cror"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crorc"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crset"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crxor"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcba"</literal></expr>, <expr><literal type="string">"dcb_alloc(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbf"</literal></expr>, <expr><literal type="string">"dcb_flush(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbi"</literal></expr>, <expr><literal type="string">"dcb_inval(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbst"</literal></expr>, <expr><literal type="string">"dcb_store(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbt"</literal></expr>, <expr><literal type="string">"dcb_touch(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbtst"</literal></expr>, <expr><literal type="string">"dcb_touch_store(A, B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbz"</literal></expr>, <expr><literal type="string">"dcb_zero(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dcbzl"</literal></expr>, <expr><literal type="string">"dcb_zero_line(A, B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dccci"</literal></expr>, <expr><literal type="string">"dcc_inval(A, B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="string">"divd"</literal></expr>, <expr><literal type="string">"A = B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divdu"</literal></expr>, <expr><literal type="string">"A = (unsigned) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divw"</literal></expr>, <expr><literal type="string">"A = (word) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"divwu"</literal></expr>, <expr><literal type="string">"A = (word unsigned) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dss"</literal></expr>, <expr><literal type="string">"altivec_ds_stop(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dssall"</literal></expr>, <expr><literal type="string">"altivec_ds_stop_all"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dst"</literal></expr>, <expr><literal type="string">"altivec_ds_touch(A,B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dstst"</literal></expr>, <expr><literal type="string">"altivec_ds_touch_store(A, B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dststt"</literal></expr>, <expr><literal type="string">"altivec_ds_touch_store_tran(A, B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dstt"</literal></expr>, <expr><literal type="string">"altivec_ds_touch_tran(A, B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"eieio"</literal></expr>, <expr><literal type="string">"enforce_in_order_exec_io"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"eqv"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evabs"</literal></expr>, <expr><literal type="string">"A = (vector) abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddiw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddsmiaaw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddssiaaw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddumiaaw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddusiaaw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evaddw"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evand"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evandc"</literal></expr>, <expr><literal type="string">"A = (vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcmpeq"</literal></expr>, <expr><literal type="string">"A = (vector) B == C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcmpgts"</literal></expr>, <expr><literal type="string">"A = (vector) B &gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcmpgtu"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B &gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcmplts"</literal></expr>, <expr><literal type="string">"A = (vector) B &lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcmpltu"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B &lt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcntlsw"</literal></expr>, <expr><literal type="string">"A = (vector) cnt_sign_bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evcntlzw"</literal></expr>, <expr><literal type="string">"A = (vector) cnt_zero_bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evdivws"</literal></expr>, <expr><literal type="string">"A = (vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evdivwu"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"eveqv"</literal></expr>, <expr><literal type="string">"A = (vector) B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,


<expr><block>{ <expr><literal type="string">"evldd"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlddx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evldh"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evldhx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evldw"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evldwx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,









<expr><block>{ <expr><literal type="string">"evlwhe"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlwhex"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlwhos"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlwhosx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlwhou"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"evlwhoux"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,






































































































































<expr><block>{ <expr><literal type="string">"extsb"</literal></expr>, <expr><literal type="string">"A = extend_sign(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsh"</literal></expr>, <expr><literal type="string">"A = extend_sign(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extsw"</literal></expr>, <expr><literal type="string">"A = extend_sign(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fabs"</literal></expr>, <expr><literal type="string">"A = abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fadd"</literal></expr>, <expr><literal type="string">"A = B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fadds"</literal></expr>, <expr><literal type="string">"A = (float) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcfid"</literal></expr>, <expr><literal type="string">"A = (double) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcfids"</literal></expr>, <expr><literal type="string">"A = (float) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcfidu"</literal></expr>, <expr><literal type="string">"A = (double) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcfidus"</literal></expr>, <expr><literal type="string">"A = (float) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcmpu"</literal></expr>, <expr><literal type="string">"A = B == C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fcpsgn"</literal></expr>, <expr><literal type="string">"A = flt_copy_sign(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctid"</literal></expr>, <expr><literal type="string">"A = (int64) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctiduz"</literal></expr>, <expr><literal type="string">"A = (uint64) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctidz"</literal></expr>, <expr><literal type="string">"A = (int64) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctiw"</literal></expr>, <expr><literal type="string">"A = (int32) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctiwuz"</literal></expr>, <expr><literal type="string">"A = (uint32) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fctiwz"</literal></expr>, <expr><literal type="string">"A = (int32) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fdiv"</literal></expr>, <expr><literal type="string">"A = B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fdivs"</literal></expr>, <expr><literal type="string">"A = (float) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmadd"</literal></expr>, <expr><literal type="string">"A = (B * C) + D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmadds"</literal></expr>, <expr><literal type="string">"A = (float) (B * C) + D"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmr"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmsub"</literal></expr>, <expr><literal type="string">"A = (B * C) - d"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmsubs"</literal></expr>, <expr><literal type="string">"A = (float) (B * C) - D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmul"</literal></expr>, <expr><literal type="string">"A = B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmuls"</literal></expr>, <expr><literal type="string">"A = (float) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fnabs"</literal></expr>, <expr><literal type="string">"A = - abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fneg"</literal></expr>, <expr><literal type="string">"A = - B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fnmadd"</literal></expr>, <expr><literal type="string">"A = -((B * C) + D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fnmadds"</literal></expr>, <expr><literal type="string">"A = (float) -((B * C) + D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fnmsub"</literal></expr>, <expr><literal type="string">"A = -((B * C) - D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fnmsubs"</literal></expr>, <expr><literal type="string">"A = (float) -((B * C) - D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fre"</literal></expr>, <expr><literal type="string">"A = 1/B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fres"</literal></expr>, <expr><literal type="string">"A = (float) 1/B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frim"</literal></expr>, <expr><literal type="string">"A = trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frin"</literal></expr>, <expr><literal type="string">"A = floor(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frip"</literal></expr>, <expr><literal type="string">"A = ceil(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"friz"</literal></expr>, <expr><literal type="string">"A = trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frsp"</literal></expr>, <expr><literal type="string">"A = (float) B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frsqrte"</literal></expr>, <expr><literal type="string">"A = 1/sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frsqrtes"</literal></expr>, <expr><literal type="string">"A = (float) 1/sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsel"</literal></expr>, <expr><literal type="string">"if (B &gt;= 0.0) A = C; else A = D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsqrt"</literal></expr>, <expr><literal type="string">"A = sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsqrts"</literal></expr>, <expr><literal type="string">"A = (float) sqrt(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsub"</literal></expr>, <expr><literal type="string">"A = B - C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsubs"</literal></expr>, <expr><literal type="string">"A = (float) B - C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbi"</literal></expr>, <expr><literal type="string">"inst_cache_block_inval"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icbt"</literal></expr>, <expr><literal type="string">"inst_cache_block_touch"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"iccci"</literal></expr>, <expr><literal type="string">"inst_cache_inval(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,




<expr><block>{ <expr><literal type="string">"isync"</literal></expr>, <expr><literal type="string">"sync_instr_cache"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"la"</literal></expr>, <expr><literal type="string">"A = C + B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbz"</literal></expr>, <expr><literal type="string">"A = byte[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzcix"</literal></expr>, <expr><literal type="string">"A = byte[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzu"</literal></expr>, <expr><literal type="string">"A = byte[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzux"</literal></expr>, <expr><literal type="string">"A = Byte[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lbzx"</literal></expr>, <expr><literal type="string">"A = byte[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="string">"A = [C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,




<expr><block>{ <expr><literal type="string">"ldu"</literal></expr>, <expr><literal type="string">"A = [C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldux"</literal></expr>, <expr><literal type="string">"A = [C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldx"</literal></expr>, <expr><literal type="string">"A = [C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfd"</literal></expr>, <expr><literal type="string">"A = double[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfdu"</literal></expr>, <expr><literal type="string">"A = double[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfdux"</literal></expr>, <expr><literal type="string">"A = double[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfdx"</literal></expr>, <expr><literal type="string">"A = double[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfiwax"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"lfiwzx"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfs"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfsu"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfsux"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lfsx"</literal></expr>, <expr><literal type="string">"A = float[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lha"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhau"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhaux"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhax"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhbrx"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhz"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzcix"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzu"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzux"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lhzx"</literal></expr>, <expr><literal type="string">"A = half[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"li"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lis"</literal></expr>, <expr><literal type="string">"A = (B &lt;&lt; 16)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lmw"</literal></expr>, <expr><literal type="string">"A = multiple word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lswi"</literal></expr>, <expr><literal type="string">"A = string word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvebx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvehx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvewx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvsl"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvsr"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lvxl"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwa"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwarx"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwaux"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwax"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwbrx"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwsync"</literal></expr>, <expr><literal type="string">"sync_load_store"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwz"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzcix"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzu"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzux"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lwzx"</literal></expr>, <expr><literal type="string">"A = word[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lxvdbx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lxvdsx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lxvwdx"</literal></expr>, <expr><literal type="string">"A = vector[C + B]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mbar"</literal></expr>, <expr><literal type="string">"memory_barrier(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mcrf"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mcrfs"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfamr"</literal></expr>, <expr><literal type="string">"A = amr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfasr"</literal></expr>, <expr><literal type="string">"A = asr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbr0"</literal></expr>, <expr><literal type="string">"A = br0"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbra"</literal></expr>, <expr><literal type="string">"A = br1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbrb"</literal></expr>, <expr><literal type="string">"A = br2"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbrc"</literal></expr>, <expr><literal type="string">"A = br3"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbrd"</literal></expr>, <expr><literal type="string">"A = br4"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbr5"</literal></expr>, <expr><literal type="string">"A = br5"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbr6"</literal></expr>, <expr><literal type="string">"A = br6"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfbr7"</literal></expr>, <expr><literal type="string">"A = br7"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfcfar"</literal></expr>, <expr><literal type="string">"A = cfar"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfcr"</literal></expr>, <expr><literal type="string">"A = crB"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfctr"</literal></expr>, <expr><literal type="string">"A = ctr"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdar"</literal></expr>, <expr><literal type="string">"A = dar"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdbatl"</literal></expr>, <expr><literal type="string">"A = dbatBl"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdbatu"</literal></expr>, <expr><literal type="string">"A = dbatBu"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdccr"</literal></expr>, <expr><literal type="string">"A = dccr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdcr"</literal></expr>, <expr><literal type="string">"A = dcr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdear"</literal></expr>, <expr><literal type="string">"A = dear"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdscr"</literal></expr>, <expr><literal type="string">"A = dscr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfdsisr"</literal></expr>, <expr><literal type="string">"A = dsisr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfesr"</literal></expr>, <expr><literal type="string">"A = esr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mffs"</literal></expr>, <expr><literal type="string">"A = fs"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfibatl"</literal></expr>, <expr><literal type="string">"A = ibatBl"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfibatu"</literal></expr>, <expr><literal type="string">"A = ibatBu"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mficcr"</literal></expr>, <expr><literal type="string">"A = iccr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mflr"</literal></expr>, <expr><literal type="string">"A = lr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfmsr"</literal></expr>, <expr><literal type="string">"A = msr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfocrf"</literal></expr>, <expr><literal type="string">"A = ocrf"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfpid"</literal></expr>, <expr><literal type="string">"A = pid"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfpvr"</literal></expr>, <expr><literal type="string">"A = pvr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfrtcl"</literal></expr>, <expr><literal type="string">"A = rtc_lo"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfrtcu"</literal></expr>, <expr><literal type="string">"A = rtc_hi"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfspefscr"</literal></expr>, <expr><literal type="string">"A = fscr"</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfsr"</literal></expr>, <expr><literal type="string">"A = srB"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfsrin"</literal></expr>, <expr><literal type="string">"A = sr_indirect(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfsrr2"</literal></expr>, <expr><literal type="string">"A = srr2"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfsrr3"</literal></expr>, <expr><literal type="string">"A = srr3"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mftb"</literal></expr>, <expr><literal type="string">"A = tb(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mftbhi"</literal></expr>, <expr><literal type="string">"A = tb_hi(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mftblo"</literal></expr>, <expr><literal type="string">"A = tb_lo(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mftbu"</literal></expr>, <expr><literal type="string">"A = tbu"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mftcr"</literal></expr>, <expr><literal type="string">"A = tcr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfvscr"</literal></expr>, <expr><literal type="string">"A = vscr"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mfxer"</literal></expr>, <expr><literal type="string">"A = xer"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mr"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"msync"</literal></expr>, <expr><literal type="string">"sync_memory"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtamr"</literal></expr>, <expr><literal type="string">"amr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr0"</literal></expr>, <expr><literal type="string">"br0 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr1"</literal></expr>, <expr><literal type="string">"br1 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr2"</literal></expr>, <expr><literal type="string">"br2 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr3"</literal></expr>, <expr><literal type="string">"br3 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr4"</literal></expr>, <expr><literal type="string">"br4 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr5"</literal></expr>, <expr><literal type="string">"br5 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr6"</literal></expr>, <expr><literal type="string">"br6 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtbr7"</literal></expr>, <expr><literal type="string">"br7 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtcfar"</literal></expr>, <expr><literal type="string">"cfar = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtcr"</literal></expr>, <expr><literal type="string">"tcr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtcrf"</literal></expr>, <expr><literal type="string">"crf = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtctr"</literal></expr>, <expr><literal type="string">"ctr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdar"</literal></expr>, <expr><literal type="string">"dar = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdbatl"</literal></expr>, <expr><literal type="string">"dbatBl = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdbatu"</literal></expr>, <expr><literal type="string">"dbatBu = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdccr"</literal></expr>, <expr><literal type="string">"dccr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdcr"</literal></expr>, <expr><literal type="string">"dcr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdear"</literal></expr>, <expr><literal type="string">"dear = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdscr"</literal></expr>, <expr><literal type="string">"dscr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtdsisr"</literal></expr>, <expr><literal type="string">"dsisr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtesr"</literal></expr>, <expr><literal type="string">"esr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtfsb0"</literal></expr>, <expr><literal type="string">"fsb0 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtfsb1"</literal></expr>, <expr><literal type="string">"fsb1 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtfsf"</literal></expr>, <expr><literal type="string">"fsf = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtfsfi"</literal></expr>, <expr><literal type="string">"fsfi = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtibatl"</literal></expr>, <expr><literal type="string">"ibatBl = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtibatu"</literal></expr>, <expr><literal type="string">"ibatBu = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mticcr"</literal></expr>, <expr><literal type="string">"iccr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtlr"</literal></expr>, <expr><literal type="string">"lr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtmsr"</literal></expr>, <expr><literal type="string">"msr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtmsrd"</literal></expr>, <expr><literal type="string">"msr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtocrf"</literal></expr>, <expr><literal type="string">"cr0 = B &amp; fxm_mask(A)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtpid"</literal></expr>, <expr><literal type="string">"pid = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtspefscr"</literal></expr>, <expr><literal type="string">"fscr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtsr"</literal></expr>, <expr><literal type="string">"srA = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtsrin"</literal></expr>, <expr><literal type="string">"sr_indirect(A) = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtsrr2"</literal></expr>, <expr><literal type="string">"srr2 = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtsrr3"</literal></expr>, <expr><literal type="string">"srr3 = A "</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mttbhi"</literal></expr>, <expr><literal type="string">"tb_hi(A) = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mttbl"</literal></expr>, <expr><literal type="string">"tbl(A) = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mttblo"</literal></expr>, <expr><literal type="string">"tb_lo(A) = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mttbu"</literal></expr>, <expr><literal type="string">"tbu = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtvscr"</literal></expr>, <expr><literal type="string">"vscr = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mtxer"</literal></expr>, <expr><literal type="string">"xer = A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhd"</literal></expr>, <expr><literal type="string">"A = hi(B) * hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhdu"</literal></expr>, <expr><literal type="string">"A = (unsigned) hi(B) * hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhw"</literal></expr>, <expr><literal type="string">"A = (word) hi(B) * hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulhwu"</literal></expr>, <expr><literal type="string">"A = (unsigned word) hi(B) * hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulld"</literal></expr>, <expr><literal type="string">"A = lo(B) * lo(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulli"</literal></expr>, <expr><literal type="string">"A = lo(B) * lo(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mullw"</literal></expr>, <expr><literal type="string">"A = (word) lo(B) * lo(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nand"</literal></expr>, <expr><literal type="string">"A = B &amp; !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"A = -B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nor"</literal></expr>, <expr><literal type="string">"A = B | !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><literal type="string">"A = !B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"orc"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ori"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"oris"</literal></expr>, <expr><literal type="string">"A = B | (C &lt;&lt; 16)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"popcntd"</literal></expr>, <expr><literal type="string">"A = count_bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"popcntw"</literal></expr>, <expr><literal type="string">"A = count_bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ptesync"</literal></expr>, <expr><literal type="string">"sync_page_tbl"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,





































































































































<expr><block>{ <expr><literal type="string">"rfci"</literal></expr>, <expr><literal type="string">"msr = csrr1; nia = csrr0; ret"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rfdi"</literal></expr>, <expr><literal type="string">"msr = drr1; nia = drr0; ret"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rfi"</literal></expr>, <expr><literal type="string">"msr = srr1; nia = srr0; ret"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rfid"</literal></expr>, <expr><literal type="string">"msr = srr1; nia = srr0; ret"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rfmci"</literal></expr>, <expr><literal type="string">"msr = mcrr1; nia = mcrr0; ret"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotld"</literal></expr>, <expr><literal type="string">"A = rot64(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotldi"</literal></expr>, <expr><literal type="string">"A = rot64(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotlw"</literal></expr>, <expr><literal type="string">"A = rot32(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotlwi"</literal></expr>, <expr><literal type="string">"A = rot32(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sc"</literal></expr>, <expr><literal type="string">"syscall"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slbia"</literal></expr>, <expr><literal type="string">"slb_inval_all"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slbie"</literal></expr>, <expr><literal type="string">"slb_inval_entry(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slbmfee"</literal></expr>, <expr><literal type="string">"A = slb[B]"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slbmte"</literal></expr>, <expr><literal type="string">"slb[A] = B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sld"</literal></expr>, <expr><literal type="string">"A = B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sldi"</literal></expr>, <expr><literal type="string">"A = B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slw"</literal></expr>, <expr><literal type="string">"A = (word) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"slwi"</literal></expr>, <expr><literal type="string">"A = (word) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srad"</literal></expr>, <expr><literal type="string">"A = B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sradi"</literal></expr>, <expr><literal type="string">"A = B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sraw"</literal></expr>, <expr><literal type="string">"A = (word) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srawi"</literal></expr>, <expr><literal type="string">"A = (word) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srd"</literal></expr>, <expr><literal type="string">"A = B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srw"</literal></expr>, <expr><literal type="string">"A = (word) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"srwi"</literal></expr>, <expr><literal type="string">"A = (word) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stb"</literal></expr>, <expr><literal type="string">"byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbcix"</literal></expr>, <expr><literal type="string">"byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbu"</literal></expr>, <expr><literal type="string">"byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbux"</literal></expr>, <expr><literal type="string">"byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stbx"</literal></expr>, <expr><literal type="string">"byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"std"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdbrx"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdcix"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdcx"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdu"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdux"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stdx"</literal></expr>, <expr><literal type="string">"[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfd"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfdu"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfdux"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfdx"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfiwx"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfs"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfsu"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfsux"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stfsx"</literal></expr>, <expr><literal type="string">"float[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sth"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthbrx"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthcix"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthu"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthux"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sthx"</literal></expr>, <expr><literal type="string">"half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stmw"</literal></expr>, <expr><literal type="string">"multiple word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stswi"</literal></expr>, <expr><literal type="string">"string word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stvebx"</literal></expr>, <expr><literal type="string">"vector byte[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stvehx"</literal></expr>, <expr><literal type="string">"vector half[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stvewx"</literal></expr>, <expr><literal type="string">"vector word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stvx"</literal></expr>, <expr><literal type="string">"vector[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stvxl"</literal></expr>, <expr><literal type="string">"vector[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stw"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwbrx"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwcix"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwcx"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwu"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwux"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stwx"</literal></expr>, <expr><literal type="string">"word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stxsdx"</literal></expr>, <expr><literal type="string">"vsx[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stxvdbx"</literal></expr>, <expr><literal type="string">"vector double[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stxvwdx"</literal></expr>, <expr><literal type="string">"vector word[C + B] = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subc"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subf"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfc"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfe"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfic"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfme"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subfze"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sync"</literal></expr>, <expr><literal type="string">"sync_instr_cache"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdeq"</literal></expr>, <expr><literal type="string">"if (A == B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdeqi"</literal></expr>, <expr><literal type="string">"if (A == B) trap"</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdgt"</literal></expr>, <expr><literal type="string">"if (A &gt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdgti"</literal></expr>, <expr><literal type="string">"if (A &gt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdlgt"</literal></expr>, <expr><literal type="string">"if (A &gt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdlgti"</literal></expr>, <expr><literal type="string">"if (A &gt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdllt"</literal></expr>, <expr><literal type="string">"if (A &lt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdllti"</literal></expr>, <expr><literal type="string">"if (A &lt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdlt"</literal></expr>, <expr><literal type="string">"if (A &lt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdlti"</literal></expr>, <expr><literal type="string">"if (A &lt; B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdne"</literal></expr>, <expr><literal type="string">"if (A != B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tdnei"</literal></expr>, <expr><literal type="string">"if (A != B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbia"</literal></expr>, <expr><literal type="string">"inval_all_tlb"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbie"</literal></expr>, <expr><literal type="string">"inval_tbl(A, B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbiel"</literal></expr>, <expr><literal type="string">"inval_tbl(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbivax"</literal></expr>, <expr><literal type="string">"inval_va(A, B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbld"</literal></expr>, <expr><literal type="string">"tlb_data_load(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbli"</literal></expr>, <expr><literal type="string">"tlb_instr_load(A)"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbre"</literal></expr>, <expr><literal type="string">"A = tlb_read_entry(B,C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbrehi"</literal></expr>, <expr><literal type="string">"A = tlb_read_entry_hi(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbrelo"</literal></expr>, <expr><literal type="string">"A = tlb_read_entry_lo(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbsx"</literal></expr>, <expr><literal type="string">"A = tlb_search(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbsync"</literal></expr>, <expr><literal type="string">"sync_tlb"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbwe"</literal></expr>, <expr><literal type="string">"tlb_write_entry(B,C) = A"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbwehi"</literal></expr>, <expr><literal type="string">"tlb_write_entry_hi(B) = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tlbwelo"</literal></expr>, <expr><literal type="string">"tlb_write_entry_lo(B) = A"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"trap"</literal></expr>, <expr><literal type="string">"trap"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tweq"</literal></expr>, <expr><literal type="string">"if ((word) A == (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tweqi"</literal></expr>, <expr><literal type="string">"if ((word) A == (word) B) trap"</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twgt"</literal></expr>, <expr><literal type="string">"if ((word) A &gt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twgti"</literal></expr>, <expr><literal type="string">"if ((word) A &gt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twlgt"</literal></expr>, <expr><literal type="string">"if ((word) A &gt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twlgti"</literal></expr>, <expr><literal type="string">"if ((word) A &gt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twllt"</literal></expr>, <expr><literal type="string">"if ((word) A &lt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twllti"</literal></expr>, <expr><literal type="string">"if ((word) A &lt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twlt"</literal></expr>, <expr><literal type="string">"if ((word) A &lt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twlti"</literal></expr>, <expr><literal type="string">"if ((word) A &lt; (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twne"</literal></expr>, <expr><literal type="string">"if ((word) A != (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"twnei"</literal></expr>, <expr><literal type="string">"if ((word) A != (word) B) trap"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vaddcuw"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vaddfp"</literal></expr>, <expr><literal type="string">"A = (float vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vaddsbs"</literal></expr>, <expr><literal type="string">"A = (byte vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vaddshs"</literal></expr>, <expr><literal type="string">"A = (half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vaddsws"</literal></expr>, <expr><literal type="string">"A = (word vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,









<expr><block>{ <expr><literal type="string">"vand"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vandc"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavgsb"</literal></expr>, <expr><literal type="string">"A = (byte vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavgsh"</literal></expr>, <expr><literal type="string">"A = (half vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavgsw"</literal></expr>, <expr><literal type="string">"A = (word vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavgub"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavguh"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vavguw"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) avg(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcfsx"</literal></expr>, <expr><literal type="string">"A = (float vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcfux"</literal></expr>, <expr><literal type="string">"A = (float vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vclzb"</literal></expr>, <expr><literal type="string">"A = (byte vector) count_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vclzd"</literal></expr>, <expr><literal type="string">"A = (vector) count_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vclzh"</literal></expr>, <expr><literal type="string">"A = (half vector) count_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vclzw"</literal></expr>, <expr><literal type="string">"A = (word vector) count_zeros(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpbfp"</literal></expr>, <expr><literal type="string">"A = !(B &lt; C) | (B == C) | !(B &gt; C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpeqfp"</literal></expr>, <expr><literal type="string">"A = (float) B == (float) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpequb"</literal></expr>, <expr><literal type="string">"A = (unsigned byte) B == (byte) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpequd"</literal></expr>, <expr><literal type="string">"A = (unsigned) B == (unsigned) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpequh"</literal></expr>, <expr><literal type="string">"A = (unsigned half) B == (unsigned half) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpequw"</literal></expr>, <expr><literal type="string">"A = (unsigned word) B == (unsigned word) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgefp"</literal></expr>, <expr><literal type="string">"A = (float) B &gt;= (float) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtsb"</literal></expr>, <expr><literal type="string">"A = (byte) B &gt; (byte) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtsd"</literal></expr>, <expr><literal type="string">"A = B &gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtsh"</literal></expr>, <expr><literal type="string">"A = (half) B &gt; (half) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtsw"</literal></expr>, <expr><literal type="string">"A = (word) B &gt; (word) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtub"</literal></expr>, <expr><literal type="string">"A = (unsigned byte) B &gt; (byte) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtud"</literal></expr>, <expr><literal type="string">"A = (unsigned) B &gt; (unsigned) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtuh"</literal></expr>, <expr><literal type="string">"A = (unsigned half) B &gt; (unsigned half) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vcmpgtuw"</literal></expr>, <expr><literal type="string">"A = (unsigned word) B &gt; (unsigned word) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vctsxs"</literal></expr>, <expr><literal type="string">"A = (word) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vctuxs"</literal></expr>, <expr><literal type="string">"A = (unsigned word) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"veqv"</literal></expr>, <expr><literal type="string">"A = (vector) B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vexptefp"</literal></expr>, <expr><literal type="string">"A = (float vector) pow(2, B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vlogefp"</literal></expr>, <expr><literal type="string">"A = (float vector) log2(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaddfp"</literal></expr>, <expr><literal type="string">"A = (float vector) (B * C) + round(D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxfp"</literal></expr>, <expr><literal type="string">"A = (float vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxsb"</literal></expr>, <expr><literal type="string">"A = (byte vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxsd"</literal></expr>, <expr><literal type="string">"A = (vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxsh"</literal></expr>, <expr><literal type="string">"A = (half vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxsw"</literal></expr>, <expr><literal type="string">"A = (word vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxub"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxud"</literal></expr>, <expr><literal type="string">"A = (vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxuh"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmaxuw"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,


<expr><block>{ <expr><literal type="string">"vminfp"</literal></expr>, <expr><literal type="string">"A = (float vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminsb"</literal></expr>, <expr><literal type="string">"A = (byte vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminsd"</literal></expr>, <expr><literal type="string">"A = (vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminsh"</literal></expr>, <expr><literal type="string">"A = (half vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminsw"</literal></expr>, <expr><literal type="string">"A = (word vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminub"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminud"</literal></expr>, <expr><literal type="string">"A = (vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminuh"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vminuw"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"vmrghb"</literal></expr>, <expr><literal type="string">"A = (byte vector) merge_hi(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmrghh"</literal></expr>, <expr><literal type="string">"A = (half vector) merge_hi(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmrghw"</literal></expr>, <expr><literal type="string">"A = (word vector) merge_hi(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmrglb"</literal></expr>, <expr><literal type="string">"A = (byte vector) merge_lo(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmrglh"</literal></expr>, <expr><literal type="string">"A = (half vector) merge_lo(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmrglw"</literal></expr>, <expr><literal type="string">"A = (word vector) merge_lo(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsummbm"</literal></expr>, <expr><literal type="string">"A = (byte vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsumshm"</literal></expr>, <expr><literal type="string">"A = (half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsumshs"</literal></expr>, <expr><literal type="string">"A = (half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsumubm"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsumuhm"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmsumuhs"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulesb"</literal></expr>, <expr><literal type="string">"A = (byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulesh"</literal></expr>, <expr><literal type="string">"A = (half vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulesw"</literal></expr>, <expr><literal type="string">"A = (word vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmuleub"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmuleuh"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmuleuw"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulosb"</literal></expr>, <expr><literal type="string">"A = (byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulosh"</literal></expr>, <expr><literal type="string">"A = (byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulosw"</literal></expr>, <expr><literal type="string">"A = (byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmuloub"</literal></expr>, <expr><literal type="string">"A = (byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulouh"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmulouw"</literal></expr>, <expr><literal type="string">"A = (unsigned byte vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vmuluwm"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vnand"</literal></expr>, <expr><literal type="string">"A = (vector) B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vnmsubfp"</literal></expr>, <expr><literal type="string">"A = (float vector) (B * C) - round(D)"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vnor"</literal></expr>, <expr><literal type="string">"A = (vector) B | !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vor"</literal></expr>, <expr><literal type="string">"A = (vector) B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vorc"</literal></expr>, <expr><literal type="string">"A = (vector) B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,


<expr><block>{ <expr><literal type="string">"vpkpx"</literal></expr>, <expr><literal type="string">"A = (vector) pack_pixel(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpkshss"</literal></expr>, <expr><literal type="string">"A = (half vector) pack_pixel_saturate(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpkshus"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) pack_pixel_saturate(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpkswss"</literal></expr>, <expr><literal type="string">"A = (word vector) pack_pixel_saturate(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpkswus"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) pack_pixel_saturate(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,




<expr><block>{ <expr><literal type="string">"vpopcntb"</literal></expr>, <expr><literal type="string">"A = (vector) count_8bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpopcntd"</literal></expr>, <expr><literal type="string">"A = (vector) count_64bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpopcnth"</literal></expr>, <expr><literal type="string">"A = (vector) count_16bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vpopcntw"</literal></expr>, <expr><literal type="string">"A = (vector) count_32bits(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrefp"</literal></expr>, <expr><literal type="string">"A = (float vector) 1/B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrfim"</literal></expr>, <expr><literal type="string">"A = (vector) floor(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrfin"</literal></expr>, <expr><literal type="string">"A = (vector) near(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrfip"</literal></expr>, <expr><literal type="string">"A = (vector) ceil(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrfiz"</literal></expr>, <expr><literal type="string">"A = (vector) trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrlb"</literal></expr>, <expr><literal type="string">"A = (vector) rotl_byte(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrld"</literal></expr>, <expr><literal type="string">"A = (vector) rotl(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrlh"</literal></expr>, <expr><literal type="string">"A = (vector) rotl_half(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrlw"</literal></expr>, <expr><literal type="string">"A = (vector) rotl_word(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vrsqrtefp"</literal></expr>, <expr><literal type="string">"A = (vector) sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsel"</literal></expr>, <expr><literal type="string">"A = (vector) if (D &amp; 1) B else C"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsl"</literal></expr>, <expr><literal type="string">"A = (vector) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vslb"</literal></expr>, <expr><literal type="string">"A = (byte vector) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsld"</literal></expr>, <expr><literal type="string">"A = (vector) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsldoi"</literal></expr>, <expr><literal type="string">"A = (vector) B &lt;&lt; (octet) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vslh"</literal></expr>, <expr><literal type="string">"A = (half vector) B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vslo"</literal></expr>, <expr><literal type="string">"A = (vector) B &lt;&lt;&lt; (octet) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vslw"</literal></expr>, <expr><literal type="string">"A = (word vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vspltb"</literal></expr>, <expr><literal type="string">"A = (vector) splat_byte(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsplth"</literal></expr>, <expr><literal type="string">"A = (vector) splat_half(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vspltisb"</literal></expr>, <expr><literal type="string">"A = (vector) splat_byte(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vspltish"</literal></expr>, <expr><literal type="string">"A = (vector) splat_half(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vspltisw"</literal></expr>, <expr><literal type="string">"A = (vector) splat_word(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vspltw"</literal></expr>, <expr><literal type="string">"A = (vector) splat_word(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsr"</literal></expr>, <expr><literal type="string">"A = (vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrab"</literal></expr>, <expr><literal type="string">"A = (byte vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrad"</literal></expr>, <expr><literal type="string">"A = (vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrah"</literal></expr>, <expr><literal type="string">"A = (half vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsraw"</literal></expr>, <expr><literal type="string">"A = (word vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrb"</literal></expr>, <expr><literal type="string">"A = (byte vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrd"</literal></expr>, <expr><literal type="string">"A = (vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrh"</literal></expr>, <expr><literal type="string">"A = (half vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsro"</literal></expr>, <expr><literal type="string">"A = (vector) B &gt;&gt; (octet) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsrw"</literal></expr>, <expr><literal type="string">"A = (word vector) B &gt;&gt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubcuw"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) (C - B) &amp; 1"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubfp"</literal></expr>, <expr><literal type="string">"A = (float vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubsbs"</literal></expr>, <expr><literal type="string">"A = (byte vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubshs"</literal></expr>, <expr><literal type="string">"A = (half vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubsws"</literal></expr>, <expr><literal type="string">"A = (word vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsububm"</literal></expr>, <expr><literal type="string">"A = (byte vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsububs"</literal></expr>, <expr><literal type="string">"A = (byte vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubudm"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubuhm"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubuhs"</literal></expr>, <expr><literal type="string">"A = (unsigned half vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubuwm"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsubuws"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsumbsws"</literal></expr>, <expr><literal type="string">"A = (word vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsumdsbs"</literal></expr>, <expr><literal type="string">"A = (byte vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsumdshs"</literal></expr>, <expr><literal type="string">"A = (half vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsumdubs"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vsumsws"</literal></expr>, <expr><literal type="string">"A = (word vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupkhpx"</literal></expr>, <expr><literal type="string">"A = (vector) unpack_hi_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupkhsb"</literal></expr>, <expr><literal type="string">"A = (byte vector) unpack_hi_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupkhsh"</literal></expr>, <expr><literal type="string">"A = (half vector) unpack_hi_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupklpx"</literal></expr>, <expr><literal type="string">"A = (vector) unpack_lo_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupklsb"</literal></expr>, <expr><literal type="string">"A = (byte vector) unpack_lo_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vupklsh"</literal></expr>, <expr><literal type="string">"A = (half vector) unpack_lo_pixel(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"vxor"</literal></expr>, <expr><literal type="string">"A = (vector) B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wait"</literal></expr>, <expr><literal type="string">"wait_interrupt"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"waitimpl"</literal></expr>, <expr><literal type="string">"wait_interrupt_thread_reservation"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"waitrsv"</literal></expr>, <expr><literal type="string">"wait_interrupt_implemention"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wrtee"</literal></expr>, <expr><literal type="string">"msr &amp;= A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wrteei"</literal></expr>, <expr><literal type="string">"msr &amp;= A"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xnop"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xori"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xoris"</literal></expr>, <expr><literal type="string">"A = B ^ (C &lt;&lt; 16)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsabsdp"</literal></expr>, <expr><literal type="string">"A = (double vector) abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsadddp"</literal></expr>, <expr><literal type="string">"A = (double vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscmpodp"</literal></expr>, <expr><literal type="string">"A = (double vector) B == C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscmpudp"</literal></expr>, <expr><literal type="string">"A = (double vector) B == C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscpsgndp"</literal></expr>, <expr><literal type="string">"A = (double vector) copy_sign(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvdpsp"</literal></expr>, <expr><literal type="string">"A = (double vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvdpsxds"</literal></expr>, <expr><literal type="string">"A = (vector) ((double) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvdpsxws"</literal></expr>, <expr><literal type="string">"A = (word vector) ((double) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvdpuxds"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) ((double) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvdpuxws"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) ((double) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvspdp"</literal></expr>, <expr><literal type="string">"A = (double vector) ((float) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvsxddp"</literal></expr>, <expr><literal type="string">"A = (double vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xscvuxddp"</literal></expr>, <expr><literal type="string">"A = (double vector) ((unsigned) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsdivdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,



<expr><block>{ <expr><literal type="string">"xsmaxdp"</literal></expr>, <expr><literal type="string">"A = (double vector) max(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsmindp"</literal></expr>, <expr><literal type="string">"A = (double vector) min(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,



<expr><block>{ <expr><literal type="string">"xsmuldp"</literal></expr>, <expr><literal type="string">"A = (double vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsnabsdp"</literal></expr>, <expr><literal type="string">"A = (double vector) -abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsnegdp"</literal></expr>, <expr><literal type="string">"A = (double vector) -B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,






<expr><block>{ <expr><literal type="string">"xsrdpi"</literal></expr>, <expr><literal type="string">"A = (double vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsrdpic"</literal></expr>, <expr><literal type="string">"A = (double vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsrdpim"</literal></expr>, <expr><literal type="string">"A = (double vector) floor(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsrdpip"</literal></expr>, <expr><literal type="string">"A = (double vector) ceil(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsrdpiz"</literal></expr>, <expr><literal type="string">"A = (double vector) trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsredp"</literal></expr>, <expr><literal type="string">"A = (double vector) 1/B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xsrsqrtedp"</literal></expr>, <expr><literal type="string">"A = (double vector) 1/sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xssqrtdp"</literal></expr>, <expr><literal type="string">"A = sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xssubdp"</literal></expr>, <expr><literal type="string">"A = C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xstdivdp"</literal></expr>, <expr><literal type="string">"A = test_sw_divide(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xstsqrtdp"</literal></expr>, <expr><literal type="string">"A = test_sw_sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvabsdp"</literal></expr>, <expr><literal type="string">"A = (double vector) abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvabssp"</literal></expr>, <expr><literal type="string">"A = (float vector) abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvadddp"</literal></expr>, <expr><literal type="string">"A = (double vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvaddsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B + C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpeqdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B == (double vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpeqsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B == (float vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpgedp"</literal></expr>, <expr><literal type="string">"A = (double vector) B &gt;= (double vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpgesp"</literal></expr>, <expr><literal type="string">"A = (float vector) B &gt;= (float vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpgtdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B &gt; (double vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcmpgtsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B &gt; (float vector) C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcpsgndp"</literal></expr>, <expr><literal type="string">"A = (double vector) copy_sign(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcpsgnsp"</literal></expr>, <expr><literal type="string">"A = (float vector) copy_sign(B, C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvdpsp"</literal></expr>, <expr><literal type="string">"A = (float vector) ((double vector)B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvdpsxds"</literal></expr>, <expr><literal type="string">"A = (vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvdpsxws"</literal></expr>, <expr><literal type="string">"A = (word vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvdpuxds"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvdpuxws"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvspdp"</literal></expr>, <expr><literal type="string">"(double vector) ((float vector) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvspsxds"</literal></expr>, <expr><literal type="string">"A = (vector) ((float vector) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvspsxws"</literal></expr>, <expr><literal type="string">"A = (word vector) ((float vector) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvspuxds"</literal></expr>, <expr><literal type="string">"A = (unsigned vector) ((float vector) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvspuxws"</literal></expr>, <expr><literal type="string">"A = (unsigned word vector) ((float vector) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvsxddp"</literal></expr>, <expr><literal type="string">"A = (double vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvsxdsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvsxwdp"</literal></expr>, <expr><literal type="string">"A = (double vector) ((word) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvsxwsp"</literal></expr>, <expr><literal type="string">"A = (float vector) ((word) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvuxddp"</literal></expr>, <expr><literal type="string">"A = (double vector) (unsigned) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvuxdsp"</literal></expr>, <expr><literal type="string">"A = (float vector) (unsigned) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvuxwdp"</literal></expr>, <expr><literal type="string">"A = (double vector) ((unsigned word) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvcvuxwsp"</literal></expr>, <expr><literal type="string">"A = (float vector) ((unsigned word) B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvdivdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvdivsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,





<expr><block>{ <expr><literal type="string">"xvmaxdp"</literal></expr>, <expr><literal type="string">"A = (double vector) max(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvmaxsp"</literal></expr>, <expr><literal type="string">"A = (float vector) max(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvmindp"</literal></expr>, <expr><literal type="string">"A = (double vector) min(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvminsp"</literal></expr>, <expr><literal type="string">"A = (float vector) min(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvmovdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvmovsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,





<expr><block>{ <expr><literal type="string">"xvmuldp"</literal></expr>, <expr><literal type="string">"A = (double vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvmulsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B * C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvnabsdp"</literal></expr>, <expr><literal type="string">"A = (double vector) -abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvnabssp"</literal></expr>, <expr><literal type="string">"A = (float vector) -abs(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvnegdp"</literal></expr>, <expr><literal type="string">"A = (double vector) -B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvnegsp"</literal></expr>, <expr><literal type="string">"A = (float vector) -B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,










<expr><block>{ <expr><literal type="string">"xvrdpi"</literal></expr>, <expr><literal type="string">"A = (double vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrdpic"</literal></expr>, <expr><literal type="string">"A = (double vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrdpim"</literal></expr>, <expr><literal type="string">"A = (double vector) floor(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrdpip"</literal></expr>, <expr><literal type="string">"A = (double vector) ceil(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrdpiz"</literal></expr>, <expr><literal type="string">"A = (double vector) trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvredp"</literal></expr>, <expr><literal type="string">"A = (double vector) 1/B"</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvresp"</literal></expr>, <expr><literal type="string">"A = (float vector) B"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrspi"</literal></expr>, <expr><literal type="string">"A = (float vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrspic"</literal></expr>, <expr><literal type="string">"A = (float vector) round(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrspim"</literal></expr>, <expr><literal type="string">"A = (float vector) floor(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrspip"</literal></expr>, <expr><literal type="string">"A = (float vector) ceil(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrspiz"</literal></expr>, <expr><literal type="string">"A = (float vector) trunc(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrsqrtedp"</literal></expr>, <expr><literal type="string">"A = (double vector) 1/sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvrsqrtesp"</literal></expr>, <expr><literal type="string">"A = (float vector) 1/sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvsqrtdp"</literal></expr>, <expr><literal type="string">"A = (double vector) sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvsqrtsp"</literal></expr>, <expr><literal type="string">"A = (float vector) sqrt(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvsubdp"</literal></expr>, <expr><literal type="string">"A = (double vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvsubsp"</literal></expr>, <expr><literal type="string">"A = (float vector) C - B"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvtdivdp"</literal></expr>, <expr><literal type="string">"A = (double vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvtdivsp"</literal></expr>, <expr><literal type="string">"A = (float vector) B / C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvtsqrtdp"</literal></expr>, <expr><literal type="string">"A = (double vector) test_sw_sqrt(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xvtsqrtsp"</literal></expr>, <expr><literal type="string">"A = (float vector) test_sw_sqrt(B)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxland"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlandc"</literal></expr>, <expr><literal type="string">"A = B &amp; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxleqv"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlnand"</literal></expr>, <expr><literal type="string">"A = B &amp; !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlnor"</literal></expr>, <expr><literal type="string">"A = B + !C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlor"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlorc"</literal></expr>, <expr><literal type="string">"A = B | C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxlxor"</literal></expr>, <expr><literal type="string">"A = B ^ C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxmrghd"</literal></expr>, <expr><literal type="string">"A = hi(B) || hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxmrghw"</literal></expr>, <expr><literal type="string">"A = (word vector) hi(B) || hi(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxmrgld"</literal></expr>, <expr><literal type="string">"A = lo(B) || lo(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxmrglw"</literal></expr>, <expr><literal type="string">"A = (word vector) lo(B) || lo(C)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,




<expr><block>{ <expr><literal type="string">"xxsldwi"</literal></expr>, <expr><literal type="string">"A = B &lt;&lt; C"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxspltd"</literal></expr>, <expr><literal type="string">"A = split(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxspltw"</literal></expr>, <expr><literal type="string">"A = (word vector) split(B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xxswapd"</literal></expr>, <expr><literal type="string">"swap(A,B)"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>ppc_mask</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newstr</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>can_replace</name><argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">26</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'@'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[<expr><name>letter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rlwinm"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ME</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask64</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldcl"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldicl"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask64</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldic"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ME</name> <init>= <expr><literal type="number">63</literal> <operator>-</operator> <call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask64</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldcr"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldicr"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ME</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldimi"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ME</name> <init>= <expr><literal type="number">63</literal> <operator>-</operator> <call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask64</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rldimi"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ME</name> <init>= <expr><literal type="number">63</literal> <operator>-</operator> <call><name>PPC_UT64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>inverted</name> <init>= <expr><operator>~</operator> <operator>(</operator><call><name>mask64</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rlwimi"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ME</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT32x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask32</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rlwimi"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ME</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>inverted</name> <init>= <expr><operator>~</operator><call><name>mask32</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT32x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rlwnm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>ppc_mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>MB</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ME</name> <init>= <expr><call><name>PPC_UT32</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ppc_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT32x</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>mask32</name> <argument_list>(<argument><expr><name>MB</name></expr></argument>, <argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">36</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">43</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>to</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"=="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"&lt;="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"!="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">31</literal></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"=="</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">44</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">45</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getspr</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>newstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSZ</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w4</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w5</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"jr ra"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w5</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr>, <expr><name>w4</name></expr>, <expr><name>w5</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"+ -"</literal></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" + ]"</literal></expr></argument>, <argument><expr><literal type="string">"] "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXPERIMENTAL_ZERO</name></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"0 = "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int snprintf_len1_ = snprintf (a, 64, x, w1, w1); int snprintf_len2_ = snprintf (b, 64, y, w1); if (snprintf_len1_ &lt; 64 &amp;&amp; snprintf_len2_ &lt; 64) { p = r_str_replace (p, a, b, 0); } } while (0)</cpp:value></cpp:define>








<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s +"</literal></expr></argument>, <argument><expr><literal type="string">"%s +="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s -"</literal></expr></argument>, <argument><expr><literal type="string">"%s -="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &amp;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &amp;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s |"</literal></expr></argument>, <argument><expr><literal type="string">"%s |="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s ^"</literal></expr></argument>, <argument><expr><literal type="string">"%s ^="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &gt;&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">"0000"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_ppc_pseudo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ppc.pseudo"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"PowerPC pseudo syntax"</literal></expr>,
<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_ppc_pseudo</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
