<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\parse\p\parse_sh_pseudo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"B += A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addc"</literal></expr>, <expr><literal type="string">"B += A + t"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"addv"</literal></expr>, <expr><literal type="string">"B += A; t = int_overflow (B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"B &amp;= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and.b"</literal></expr>, <expr><literal type="string">"B &amp;= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"if (!t) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bf.s"</literal></expr>, <expr><literal type="string">"if (!t) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bra"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brk"</literal></expr>, <expr><literal type="string">"_break_exception ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bsr"</literal></expr>, <expr><literal type="string">"A ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bsrf"</literal></expr>, <expr><literal type="string">"A ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bt"</literal></expr>, <expr><literal type="string">"if (t) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bt.s"</literal></expr>, <expr><literal type="string">"if (t) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clrmac"</literal></expr>, <expr><literal type="string">"_clrmac ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clrs"</literal></expr>, <expr><literal type="string">"_clrs ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clrt"</literal></expr>, <expr><literal type="string">"_clrt ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/eq"</literal></expr>, <expr><literal type="string">"t = B == A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/ge"</literal></expr>, <expr><literal type="string">"t = B &gt;= A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/gt"</literal></expr>, <expr><literal type="string">"t = B &gt; A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/hi"</literal></expr>, <expr><literal type="string">"t = (unsigned) B &gt; (unsigned) A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/hs"</literal></expr>, <expr><literal type="string">"t = (unsigned) B &gt;= (unsigned) A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/pl"</literal></expr>, <expr><literal type="string">"t = A &gt; 0 ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/pz"</literal></expr>, <expr><literal type="string">"t = A &gt;= 0 ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp/str"</literal></expr>, <expr><literal type="string">"t = A ^ B ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"div1"</literal></expr>, <expr><literal type="string">"B /= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dmuls.l"</literal></expr>, <expr><literal type="string">"mac = B * A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dmulu.l"</literal></expr>, <expr><literal type="string">"mac = (unsigned) B * (unsigned) A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dt"</literal></expr>, <expr><literal type="string">"A--; t = !A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"exts.b"</literal></expr>, <expr><literal type="string">"B = (int) A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extu.b"</literal></expr>, <expr><literal type="string">"B = (unsigned int) A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"exts.w"</literal></expr>, <expr><literal type="string">"B = (int) A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"extu.w"</literal></expr>, <expr><literal type="string">"B = (unsigned int) A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fabs"</literal></expr>, <expr><literal type="string">"A = abs (A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fadd"</literal></expr>, <expr><literal type="string">"B += A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcmp/eq"</literal></expr>, <expr><literal type="string">"t = B == A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcmp/gt"</literal></expr>, <expr><literal type="string">"t = B &gt; A ? 1 : 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fcnvds"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fdiv"</literal></expr>, <expr><literal type="string">"B /= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"flds"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fldi0"</literal></expr>, <expr><literal type="string">"A = 0.0f"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fldi1"</literal></expr>, <expr><literal type="string">"A = 1.0f"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"float"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmac"</literal></expr>, <expr><literal type="string">"C += A * B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmov"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmov.s"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fmul"</literal></expr>, <expr><literal type="string">"B *= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fneg"</literal></expr>, <expr><literal type="string">"A = -A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsqrt"</literal></expr>, <expr><literal type="string">"A = sqrt (A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsts"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fsub"</literal></expr>, <expr><literal type="string">"B -= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ftrc"</literal></expr>, <expr><literal type="string">"B = trunc (A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ftrv"</literal></expr>, <expr><literal type="string">"B *= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"jmp"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"jsr"</literal></expr>, <expr><literal type="string">"A ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldr"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldr.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lds"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lds.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mov.b"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mov.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mov.w"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"movca.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"movt"</literal></expr>, <expr><literal type="string">"A = t"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"muls.w"</literal></expr>, <expr><literal type="string">"macl = A * B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mulu.w"</literal></expr>, <expr><literal type="string">"macl = (unsigned) A * (unsigned) B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"A = -A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"negc"</literal></expr>, <expr><literal type="string">"A = (-A) - t"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><literal type="string">"A = !A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"B |= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotcl"</literal></expr>, <expr><literal type="string">"t = A &amp; 0x80000000 ? 0 : 1; A = (A &lt;&lt; 1) | t"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotl"</literal></expr>, <expr><literal type="string">"A = (A &lt;&lt; 1) | (A &gt;&gt; 31)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rotr"</literal></expr>, <expr><literal type="string">"A = (A &lt;&lt; 31) | (A &gt;&gt; 1)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rte"</literal></expr>, <expr><literal type="string">"_rte ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rts"</literal></expr>, <expr><literal type="string">"return"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sets"</literal></expr>, <expr><literal type="string">"s = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sett"</literal></expr>, <expr><literal type="string">"t = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shad"</literal></expr>, <expr><literal type="string">"B = A &gt;= 0 ? B &lt;&lt; A : B &gt;&gt; (31 - A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shal"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shar"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shld"</literal></expr>, <expr><literal type="string">"B = A &gt;= 0 ? B &lt;&lt; A : B &gt;&gt; (31 - A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shll"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shll2"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 2"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shll8"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 8"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shll16"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 16"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shlr"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shlr2"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 2"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shlr8"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 8"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"shlr16"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 16"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sleep"</literal></expr>, <expr><literal type="string">"_halt ()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stc"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"stc.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sts"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sts.l"</literal></expr>, <expr><literal type="string">"B = A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"B -= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subc"</literal></expr>, <expr><literal type="string">"B -= A - t"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subv"</literal></expr>, <expr><literal type="string">"B -= A; t = int_underflow (B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"swap.b"</literal></expr>, <expr><literal type="string">"swap_byte (B, A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"swap.w"</literal></expr>, <expr><literal type="string">"swap_word (B, A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tas.b"</literal></expr>, <expr><literal type="string">"test_and_set (A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"trapa"</literal></expr>, <expr><literal type="string">"trap (A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tst"</literal></expr>, <expr><literal type="string">"t = B &amp; A ? 0 : 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"B ^= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"xor.b"</literal></expr>, <expr><literal type="string">"B ^= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'J'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'@'</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSZ</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w4</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>par</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>par</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>par</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>par</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>par</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>par</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr>, <expr><name>w4</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_sh_pseudo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sh.pseudo"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"SH-4 pseudo syntax"</literal></expr>,
<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_sh_pseudo</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
