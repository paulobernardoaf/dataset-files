<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\parse\p\parse_avr_pseudo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"A += B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="string">"A += B + carry"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"adiw"</literal></expr>, <expr><literal type="string">"A+1:A += B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"A -= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"subi"</literal></expr>, <expr><literal type="string">"A -= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sbc"</literal></expr>, <expr><literal type="string">"A -= (B + carry)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sbci"</literal></expr>, <expr><literal type="string">"A -= (B + carry)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sbiw"</literal></expr>, <expr><literal type="string">"A+1:A -= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"A &amp;= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"andi"</literal></expr>, <expr><literal type="string">"A &amp;= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"A |= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ori"</literal></expr>, <expr><literal type="string">"A |= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"eor"</literal></expr>, <expr><literal type="string">"A ^= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"com"</literal></expr>, <expr><literal type="string">"A = 0xff - A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"A = -A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sbr"</literal></expr>, <expr><literal type="string">"A |= B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cbr"</literal></expr>, <expr><literal type="string">"A &amp;= (0xff - B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"inc"</literal></expr>, <expr><literal type="string">"A++"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"dec"</literal></expr>, <expr><literal type="string">"A--"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tst"</literal></expr>, <expr><literal type="string">"A &amp;= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clr"</literal></expr>, <expr><literal type="string">"A ^= A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ser"</literal></expr>, <expr><literal type="string">"A = 0xff"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="string">"r1:r0 = A * B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rjmp"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ijmp"</literal></expr>, <expr><literal type="string">"goto z"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"jmp"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rcall"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"icall"</literal></expr>, <expr><literal type="string">"goto z"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><literal type="string">"goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><literal type="string">"return"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"iret"</literal></expr>, <expr><literal type="string">"return_interrupt()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cp"</literal></expr>, <expr><literal type="string">"var = A - B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cpc"</literal></expr>, <expr><literal type="string">"var = A - B - carry"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cpi"</literal></expr>, <expr><literal type="string">"var = A - B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"breq"</literal></expr>, <expr><literal type="string">"if(!var) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brne"</literal></expr>, <expr><literal type="string">"if(var) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brsh"</literal></expr>, <expr><literal type="string">"if(var &gt;= 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brlo"</literal></expr>, <expr><literal type="string">"if(var &lt; 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brmi"</literal></expr>, <expr><literal type="string">"if(var &lt; 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brpl"</literal></expr>, <expr><literal type="string">"if(var &gt; 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brge"</literal></expr>, <expr><literal type="string">"if(var &gt;= 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brlt"</literal></expr>, <expr><literal type="string">"if(var &lt; 0) goto A"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"movw"</literal></expr>, <expr><literal type="string">"A+1:A = B+1:B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldi"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lds"</literal></expr>, <expr><literal type="string">"A = *(B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="string">"A = *(B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ldd"</literal></expr>, <expr><literal type="string">"A = *(B)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lpm"</literal></expr>, <expr><literal type="string">"r0 = z"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"A = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><literal type="string">"push(A)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"pop"</literal></expr>, <expr><literal type="string">"A = pop()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lsl"</literal></expr>, <expr><literal type="string">"A &lt;&lt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lsr"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"rol"</literal></expr>, <expr><literal type="string">"A = (A &lt;&lt; 1) | (A &gt;&gt; 7)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ror"</literal></expr>, <expr><literal type="string">"A = (A &lt;&lt; 7) | (A &gt;&gt; 1)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"asr"</literal></expr>, <expr><literal type="string">"A &gt;&gt;= 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"swap"</literal></expr>, <expr><literal type="string">"A = ((A &amp; 0xf0) &gt;&gt; 4) | ((A &amp; 0x0f) &lt;&lt; 4)"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sec"</literal></expr>, <expr><literal type="string">"c = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clc"</literal></expr>, <expr><literal type="string">"c = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sen"</literal></expr>, <expr><literal type="string">"n = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cln"</literal></expr>, <expr><literal type="string">"n = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sez"</literal></expr>, <expr><literal type="string">"z = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clz"</literal></expr>, <expr><literal type="string">"z = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sei"</literal></expr>, <expr><literal type="string">"i = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cli"</literal></expr>, <expr><literal type="string">"i = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ses"</literal></expr>, <expr><literal type="string">"s = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cls"</literal></expr>, <expr><literal type="string">"s = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sev"</literal></expr>, <expr><literal type="string">"v = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clv"</literal></expr>, <expr><literal type="string">"v = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"set"</literal></expr>, <expr><literal type="string">"t = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clt"</literal></expr>, <expr><literal type="string">"t = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"seh"</literal></expr>, <expr><literal type="string">"h = 1"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"clh"</literal></expr>, <expr><literal type="string">"h = 0"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"halt"</literal></expr>, <expr><literal type="string">"_halt()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wdr"</literal></expr>, <expr><literal type="string">"_watchdog_reset()"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"std"</literal></expr>, <expr><literal type="string">"*(A) = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"st"</literal></expr>, <expr><literal type="string">"*(A) = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sts"</literal></expr>, <expr><literal type="string">"*(A) = B"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'J'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'@'</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSZ</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>w4</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr>, <expr><name>w4</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_avr_pseudo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"avr.pseudo"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"AVR pseudo syntax"</literal></expr>,
<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_avr_pseudo</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
