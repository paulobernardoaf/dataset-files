<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\parse\p\parse_chip8_pseudo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>concat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg_len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <operator>*</operator><name>args</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>arg_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>arg_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" += "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" &amp;= "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cls"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"clear_screen()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drw"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"draw("</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">", "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><literal type="string">", "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><literal type="string">")"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exit"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"exit()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"high"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"high_res()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jp"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"goto "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ld"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" = "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"low"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"low_res()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" |= "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rnd"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" = random(256) &amp; "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scd"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"scroll_down("</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">")"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scl"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"scroll_left()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scr"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"scroll_right()"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"se"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"skip_next_instr if "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" == "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shl"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" &lt;&lt;= 1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shr"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" &gt;&gt;= 1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sknp"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"skip_next_instr if !key_pressed("</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">")"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"skp"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"skip_next_instr if key_pressed("</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">")"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sne"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><literal type="string">"skip_next_instr if "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" != "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" -= "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subn"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" = "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><literal type="string">" - "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><index>[]</index><operator>)</operator><block>{ <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">" ^= "</literal></expr>, <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>newstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tokenize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>out</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tokenlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tokcharset</name> <init>= <expr><literal type="string">", \t\n"</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tokenlen</name> <operator>=</operator> <call><name>strcspn</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tokcharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>tokenlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tokenlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>tokenlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>tokenlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>seplen</name> <operator>=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tokcharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>seplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>seplen</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>MAXARGS</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>tokenize</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>replace</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXARGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_chip8_pseudo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"chip8.pseudo"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"chip8 pseudo syntax"</literal></expr>,
<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_chip8_pseudo</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
