<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\parse\ctype.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpc.h&gt;</cpp:file></cpp:include>

<struct>struct <name>r_parse_ctype_t</name> <block>{
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>integerlit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>qualifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_PARSERS</name><parameter_list>(<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctype-&gt;integerlit, ctype-&gt;identifier, ctype-&gt;qualifier, ctype-&gt;pointer, ctype-&gt;array, ctype-&gt;type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_PARSERS_COUNT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>=
<expr><literal type="string">"integerlit : /0x[0-9A-Fa-f]+/ | /[0-9]+/;"</literal>
<literal type="string">"identifier : (\"struct\" | \"union\" | \"enum\")? /[a-zA-Z_][0-9a-zA-Z_]+/;"</literal>
<literal type="string">"qualifier : \"const\";"</literal>
<literal type="string">"pointer : &lt;qualifier&gt;? '*';"</literal>
<literal type="string">"array : '[' &lt;integerlit&gt; ']';"</literal>
<literal type="string">"type : &lt;qualifier&gt;? &lt;identifier&gt; (&lt;pointer&gt; | &lt;array&gt;)*;"</literal></expr></init></decl>;</decl_stmt>


<function><type><name>R_API</name> <name>RParseCType</name> <modifier>*</modifier></type><name>r_parse_ctype_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RParseCType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctype</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>integerlit</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"integerlit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>qualifier</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"qualifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctype</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>mpc_new</name> <argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>mpca_lang</name> <argument_list>(<argument><expr><name>MPCA_LANG_DEFAULT</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><call><name>ALL_PARSERS</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpc_err_print</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc_err_delete</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_parse_ctype_free</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ctype</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_parse_ctype_free</name><parameter_list>(<parameter><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctype</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpc_cleanup</name> <argument_list>(<argument><expr><name>ALL_PARSERS_COUNT</name></expr></argument>, <argument><expr><call><name>ALL_PARSERS</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_qualifier_const</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"qualifier|string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>contents</name></name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_identifier_string</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"identifier|regex"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_identifier_kind</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"identifier|&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_non_const_pointer</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"pointer|char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>contents</name></name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_const_pointer</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"pointer|&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>is_qualifier_const</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_array</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"array|&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>==</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"integerlit|regex"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RParseCTypeType</name> <modifier>*</modifier></type><name>ctype_convert_ast</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_const</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>is_qualifier_const</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_const</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"identifier|"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParseCTypeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name> <operator>=</operator> <name>is_const</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNSPECIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_identifier_string</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_identifier_kind</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_IDENTIFIER_KIND_STRUCT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"union"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNION</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_IDENTIFIER_KIND_ENUM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_const</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><call><name>is_identifier_string</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParseCTypeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name> <operator>=</operator> <name>is_const</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_const</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><call><name>is_non_const_pointer</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParseCTypeType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pointer</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>is_const</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><call><name>is_const_pointer</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParseCTypeType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pointer</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>is_const</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pointer</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><call><name>is_array</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParseCTypeType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>R_PARSE_CTYPE_TYPE_KIND_ARRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>strtoull</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>contents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>cur</name></expr>;</return>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RParseCTypeType</name> <modifier>*</modifier></type><name>r_parse_ctype_parse</name><parameter_list>(<parameter><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpc_parse</name> <argument_list>(<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>ctype_convert_ast</name> <argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>ret</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpc_ast_delete</name> <argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>mpc_err_string</name> <argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpc_err_delete</name> <argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_parse_ctype_type_free</name><parameter_list>(<parameter><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr>:</case>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></expr>:</case>
<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_PARSE_CTYPE_TYPE_KIND_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
