<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\blang.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>rust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>objc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dlang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cxx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>msvc</name></decl>;</decl_stmt>
}</block></struct></type> <name>Langs</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_rust</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_$LT$"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_objc</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_OBJC_"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_dlang</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_D2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_D4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_swift</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"swift_once"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_cxx_symbol</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_Z"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__Z"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_cxx</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>is_cxx_symbol</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_msvc</name><parameter_list>(<parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_load_languages</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>binfile</name></expr></argument>, <argument><expr><name>R_BIN_NM_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>R_BIN_NM_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>R_BIN_NM_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Langs</name></type> <name>cantbe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>phobosIsChecked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swiftIsChecked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>canBeCxx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cxxIsChecked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isMsvc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>rclass</name></name></expr>?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>rclass</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unknownType</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>rclass</name></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isMacho</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><literal type="string">"mach"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isElf</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><literal type="string">"elf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isPe</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><literal type="string">"pe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isBlocks</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isObjC</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unknownType</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>isMacho</name> <operator>||</operator> <name>isElf</name> <operator>||</operator> <name>isPe</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_BIN_NM_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;imports</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_NSConcreteGlobalBlock"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>isBlocks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"objc_"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>isObjC</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cantbe</name><operator>.</operator><name>objc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;symbols</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lib</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>rust</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_rust</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"rust"</literal></expr>;</expr_stmt>
<return>return <expr><name>R_BIN_NM_RUST</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>swift</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hasswift</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swiftIsChecked</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;libs</argument>, <argument>iter2</argument>, <argument>lib</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"swift"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hasswift</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>swiftIsChecked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hasswift</name> <operator>||</operator> <call><name>check_swift</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"swift"</literal></expr>;</expr_stmt>
<return>return <expr><name>R_BIN_NM_SWIFT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>cxx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hascxx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cxxIsChecked</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;libs</argument>, <argument>iter2</argument>, <argument>lib</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"stdc++"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strstr</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"c++"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hascxx</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"msvcp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"msvc"</literal></expr>;</expr_stmt>
<return>return <expr><name>R_BIN_NM_MSVC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>cxxIsChecked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hascxx</name> <operator>||</operator> <call><name>check_cxx</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>canBeCxx</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cantbe</name><operator>.</operator><name>cxx</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>objc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_objc</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"objc"</literal></expr>;</expr_stmt>
<return>return <expr><name>R_BIN_NM_OBJC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>dlang</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>hasdlang</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>phobosIsChecked</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;libs</argument>, <argument>iter2</argument>, <argument>lib</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"phobos"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hasdlang</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>phobosIsChecked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hasdlang</name> <operator>||</operator> <call><name>check_dlang</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"dlang"</literal></expr>;</expr_stmt>
<return>return <expr><name>R_BIN_NM_DLANG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cantbe</name><operator>.</operator><name>msvc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMsvc</name> <operator>&amp;&amp;</operator> <call><name>check_msvc</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>isMsvc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>isObjC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_BIN_NM_OBJC</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isBlocks</name></expr>?</condition><then><expr><name>R_BIN_NM_BLOCKS</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>canBeCxx</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_BIN_NM_CXX</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isBlocks</name></expr>?</condition><then><expr><name>R_BIN_NM_BLOCKS</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isMsvc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_BIN_NM_MSVC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>R_BIN_NM_C</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isBlocks</name></expr>?</condition><then><expr><name>R_BIN_NM_BLOCKS</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>int</name></type> <name>r_bin_lang_type</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&amp;&amp;</operator> <name><name>sym</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>sym</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sym</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_BIN_NM_CXX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>def</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>def</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_bin_demangle_type</name> <argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>R_BIN_NM_NONE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plugin</name> <operator>=</operator> <call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>binfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>&amp;&amp;</operator> <name><name>plugin</name><operator>-&gt;</operator><name>demangle_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>plugin</name><operator>-&gt;</operator><name>demangle_type</name></name> <argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_bin_demangle_type</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_BIN_NM_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_bin_demangle_type</name> <argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_bin_lang_tostring</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>lang</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_NM_SWIFT</name></expr>:</case>
<return>return <expr><literal type="string">"swift"</literal></expr>;</return>
<case>case <expr><name>R_BIN_NM_JAVA</name></expr>:</case>
<return>return <expr><literal type="string">"java"</literal></expr>;</return>
<case>case <expr><name>R_BIN_NM_KOTLIN</name></expr>:</case>
<return>return <expr><literal type="string">"kotlin"</literal></expr>;</return>
<case>case <expr><name>R_BIN_NM_C</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>lang</name> <operator>&amp;</operator> <name>R_BIN_NM_BLOCKS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"c with blocks"</literal></expr></then><else>: <expr><literal type="string">"c"</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>R_BIN_NM_CXX</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>lang</name> <operator>&amp;</operator> <name>R_BIN_NM_BLOCKS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"c++ with blocks"</literal></expr></then><else>: <expr><literal type="string">"c++"</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>R_BIN_NM_DLANG</name></expr>:</case>
<return>return <expr><literal type="string">"d"</literal></expr>;</return>
<case>case <expr><name>R_BIN_NM_OBJC</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>lang</name> <operator>&amp;</operator> <name>R_BIN_NM_BLOCKS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"objc with blocks"</literal></expr></then><else>: <expr><literal type="string">"objc"</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>R_BIN_NM_MSVC</name></expr>:</case>
<return>return <expr><literal type="string">"msvc"</literal></expr>;</return>
<case>case <expr><name>R_BIN_NM_RUST</name></expr>:</case>
<return>return <expr><literal type="string">"rust"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

</unit>
