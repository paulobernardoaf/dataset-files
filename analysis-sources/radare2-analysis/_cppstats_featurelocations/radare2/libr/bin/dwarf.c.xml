<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\dwarf.c">

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D0</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D1</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWARF_DUMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DWARF_DUMP</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBGFD</name></cpp:macro> <cpp:value>stdout</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBGFD</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin_dwarf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_OPERAND_COUNT_DWARF2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_OPERAND_COUNT_DWARF3</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_DWARF_INFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + sizeof (y) &lt; buf_end)? *((y*)(x)): 0); (x) += sizeof (y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + sizeof (ut8) &lt; buf_end)? ((ut8*)x)[0]: 0); (x) += sizeof (ut8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + sizeof (ut16) &lt; buf_end)? r_read_ble16(x,0): 0); (x) += sizeof (ut16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + sizeof (ut32) &lt; buf_end)? r_read_ble32(x,0): 0); (x) += sizeof (ut32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + sizeof (ut64) &lt; buf_end)? r_read_ble64(x,0): 0); (x) += sizeof (ut64)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dwarf_tag_name_encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>DW_TAG_array_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_array_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_class_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_class_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_entry_point</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_entry_point"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_enumeration_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_enumeration_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_formal_parameter</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_formal_parameter"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_imported_declaration</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_imported_declaration"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_label</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_label"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_lexical_block</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_lexical_block"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_member</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_member"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_pointer_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_pointer_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_reference_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_reference_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_compile_unit</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_compile_unit"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_string_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_string_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_structure_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_structure_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_subroutine_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_subroutine_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_typedef</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_typedef"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_union_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_union_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_unspecified_parameters</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_unspecified_parameters"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_variant</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_variant"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_common_block</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_common_block"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_common_inclusion</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_common_inclusion"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_inheritance</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_inheritance"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_inlined_subroutine</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_inlined_subroutine"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_module</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_module"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_ptr_to_member_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_ptr_to_member_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_set_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_set_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_subrange_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_subrange_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_with_stmt</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_with_stmt"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_access_declaration</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_access_declaration"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_base_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_base_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_catch_block</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_catch_block"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_const_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_const_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_constant</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_constant"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_enumerator</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_enumerator"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_file_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_file_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_friend</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_friend"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_namelist</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_namelist"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_namelist_item</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_namelist_item"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_packed_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_packed_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_subprogram</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_subprogram"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_template_type_param</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_template_type_param"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_template_value_param</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_template_value_param"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_template_alias</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_template_alias"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_thrown_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_thrown_type"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_try_block</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_try_block"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_variant_part</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_variant_part"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_variable</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_variable"</literal></expr>,
<expr><index>[<expr><name>DW_TAG_volatile_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_TAG_volatile_type"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dwarf_attr_encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>DW_AT_sibling</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_siblings"</literal></expr>,
<expr><index>[<expr><name>DW_AT_location</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_location"</literal></expr>,
<expr><index>[<expr><name>DW_AT_name</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_name"</literal></expr>,
<expr><index>[<expr><name>DW_AT_ordering</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_ordering"</literal></expr>,
<expr><index>[<expr><name>DW_AT_byte_size</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_byte_size"</literal></expr>,
<expr><index>[<expr><name>DW_AT_bit_size</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_bit_size"</literal></expr>,
<expr><index>[<expr><name>DW_AT_stmt_list</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_stmt_list"</literal></expr>,
<expr><index>[<expr><name>DW_AT_low_pc</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_low_pc"</literal></expr>,
<expr><index>[<expr><name>DW_AT_high_pc</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_high_pc"</literal></expr>,
<expr><index>[<expr><name>DW_AT_language</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_language"</literal></expr>,
<expr><index>[<expr><name>DW_AT_discr</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_discr"</literal></expr>,
<expr><index>[<expr><name>DW_AT_discr_value</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_discr_value"</literal></expr>,
<expr><index>[<expr><name>DW_AT_visibility</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_visibility"</literal></expr>,
<expr><index>[<expr><name>DW_AT_import</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_import"</literal></expr>,
<expr><index>[<expr><name>DW_AT_string_length</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_string_length"</literal></expr>,
<expr><index>[<expr><name>DW_AT_common_reference</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_common_reference"</literal></expr>,
<expr><index>[<expr><name>DW_AT_comp_dir</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_comp_dir"</literal></expr>,
<expr><index>[<expr><name>DW_AT_const_value</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_const_value"</literal></expr>,
<expr><index>[<expr><name>DW_AT_containing_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_containig_type"</literal></expr>,
<expr><index>[<expr><name>DW_AT_default_value</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_default_value"</literal></expr>,
<expr><index>[<expr><name>DW_AT_inline</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_inline"</literal></expr>,
<expr><index>[<expr><name>DW_AT_is_optional</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_is_optional"</literal></expr>,
<expr><index>[<expr><name>DW_AT_lower_bound</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_lower_bound"</literal></expr>,
<expr><index>[<expr><name>DW_AT_producer</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_producer"</literal></expr>,
<expr><index>[<expr><name>DW_AT_prototyped</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_prototyped"</literal></expr>,
<expr><index>[<expr><name>DW_AT_return_addr</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_return_addr"</literal></expr>,
<expr><index>[<expr><name>DW_AT_start_scope</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_start_scope"</literal></expr>,
<expr><index>[<expr><name>DW_AT_stride_size</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_stride_size"</literal></expr>,
<expr><index>[<expr><name>DW_AT_upper_bound</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_upper_bound"</literal></expr>,
<expr><index>[<expr><name>DW_AT_abstract_origin</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_abstract_origin"</literal></expr>,
<expr><index>[<expr><name>DW_AT_accessibility</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_accessibility"</literal></expr>,
<expr><index>[<expr><name>DW_AT_address_class</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_address_class"</literal></expr>,
<expr><index>[<expr><name>DW_AT_artificial</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_artificial"</literal></expr>,
<expr><index>[<expr><name>DW_AT_base_types</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_base_types"</literal></expr>,
<expr><index>[<expr><name>DW_AT_calling_convention</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_calling_convention"</literal></expr>,
<expr><index>[<expr><name>DW_AT_count</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_count"</literal></expr>,
<expr><index>[<expr><name>DW_AT_data_member_location</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_data_member_location"</literal></expr>,
<expr><index>[<expr><name>DW_AT_decl_column</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_decl_column"</literal></expr>,
<expr><index>[<expr><name>DW_AT_decl_file</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_decl_file"</literal></expr>,
<expr><index>[<expr><name>DW_AT_decl_line</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_decl_line"</literal></expr>,
<expr><index>[<expr><name>DW_AT_declaration</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_declaration"</literal></expr>,
<expr><index>[<expr><name>DW_AT_discr_list</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_discr_list"</literal></expr>,
<expr><index>[<expr><name>DW_AT_encoding</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_encoding"</literal></expr>,
<expr><index>[<expr><name>DW_AT_external</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_external"</literal></expr>,
<expr><index>[<expr><name>DW_AT_frame_base</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_frame_base"</literal></expr>,
<expr><index>[<expr><name>DW_AT_friend</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_friend"</literal></expr>,
<expr><index>[<expr><name>DW_AT_identifier_case</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_identifier_case"</literal></expr>,
<expr><index>[<expr><name>DW_AT_macro_info</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_macro_info"</literal></expr>,
<expr><index>[<expr><name>DW_AT_namelist_item</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_namelist_item"</literal></expr>,
<expr><index>[<expr><name>DW_AT_priority</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_priority"</literal></expr>,
<expr><index>[<expr><name>DW_AT_segment</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_segment"</literal></expr>,
<expr><index>[<expr><name>DW_AT_specification</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_specification"</literal></expr>,
<expr><index>[<expr><name>DW_AT_static_link</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_static_link"</literal></expr>,
<expr><index>[<expr><name>DW_AT_type</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_type"</literal></expr>,
<expr><index>[<expr><name>DW_AT_use_location</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_use_location"</literal></expr>,
<expr><index>[<expr><name>DW_AT_variable_parameter</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_variable_parameter"</literal></expr>,
<expr><index>[<expr><name>DW_AT_virtuality</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_virtuality"</literal></expr>,
<expr><index>[<expr><name>DW_AT_vtable_elem_location</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_AT_vtable_elem_location"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dwarf_attr_form_encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>DW_FORM_addr</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_addr"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_block2</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_block2"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_block4</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_block4"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_data2</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_data2"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_data4</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_data4"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_data8</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_data8"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_string</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_string"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_block</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_block"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_block1</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_block1"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_data1</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_data1"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_flag</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_flag"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_sdata</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_sdata"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_strp</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_strp"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_udata</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_udata"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref_addr</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref_addr"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref1</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref1"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref2</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref2"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref4</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref4"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref8</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref8"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_ref_udata</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_ref_udata"</literal></expr>,
<expr><index>[<expr><name>DW_FORM_indirect</name></expr>]</index> <operator>=</operator> <literal type="string">"DW_FORM_indirect"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dwarf_langs</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>DW_LANG_C89</name></expr>]</index> <operator>=</operator> <literal type="string">"C89"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_C</name></expr>]</index> <operator>=</operator> <literal type="string">"C"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Ada83</name></expr>]</index> <operator>=</operator> <literal type="string">"Ada83"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_C_plus_plus</name></expr>]</index> <operator>=</operator> <literal type="string">"C++"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Cobol74</name></expr>]</index> <operator>=</operator> <literal type="string">"Cobol74"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Cobol85</name></expr>]</index> <operator>=</operator> <literal type="string">"Cobol85"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Fortran77</name></expr>]</index> <operator>=</operator> <literal type="string">"Fortran77"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Fortran90</name></expr>]</index> <operator>=</operator> <literal type="string">"Fortran90"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Pascal83</name></expr>]</index> <operator>=</operator> <literal type="string">"Pascal83"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Modula2</name></expr>]</index> <operator>=</operator> <literal type="string">"Modula2"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Java</name></expr>]</index> <operator>=</operator> <literal type="string">"Java"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_C99</name></expr>]</index> <operator>=</operator> <literal type="string">"C99"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Ada95</name></expr>]</index> <operator>=</operator> <literal type="string">"Ada95"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Fortran95</name></expr>]</index> <operator>=</operator> <literal type="string">"Fortran95"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_PLI</name></expr>]</index> <operator>=</operator> <literal type="string">"PLI"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_ObjC</name></expr>]</index> <operator>=</operator> <literal type="string">"ObjC"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_ObjC_plus_plus</name></expr>]</index> <operator>=</operator> <literal type="string">"ObjC_plus_plus"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_UPC</name></expr>]</index> <operator>=</operator> <literal type="string">"UPC"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_D</name></expr>]</index> <operator>=</operator> <literal type="string">"D"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Python</name></expr>]</index> <operator>=</operator> <literal type="string">"Python"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Rust</name></expr>]</index> <operator>=</operator> <literal type="string">"Rust"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_C11</name></expr>]</index> <operator>=</operator> <literal type="string">"C11"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Swift</name></expr>]</index> <operator>=</operator> <literal type="string">"Swift"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Julia</name></expr>]</index> <operator>=</operator> <literal type="string">"Julia"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Dylan</name></expr>]</index> <operator>=</operator> <literal type="string">"Dylan"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_C_plus_plus_14</name></expr>]</index> <operator>=</operator> <literal type="string">"C++14"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Fortran03</name></expr>]</index> <operator>=</operator> <literal type="string">"Fortran03"</literal></expr>,
<expr><index>[<expr><name>DW_LANG_Fortran08</name></expr>]</index> <operator>=</operator> <literal type="string">"Fortran08"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_sdb_include_dir</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>incl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>incl</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sdb_array_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"includedirs"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>incl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_header_fini</name><parameter_list>(<parameter><decl><type><name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hdr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>std_opcode_lengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_lnp_header</name><parameter_list>(
<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf_end</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>unit_length</name><operator>.</operator><name>part1</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>unit_length</name><operator>.</operator><name>part1</name></name> <operator>==</operator> <name>DWARF_INIT_LEN_64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>unit_length</name><operator>.</operator><name>part2</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>unit_length</name><operator>.</operator><name>part1</name></name> <operator>==</operator> <name>DWARF_INIT_LEN_64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>header_length</name></name> <operator>=</operator> <call><name>READ64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>header_length</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_end</name><operator>-</operator><name>buf</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>min_inst_len</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>default_is_stmt</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>line_base</name></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"DWARF LINE HEADER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" total_length: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>unit_length</name><operator>.</operator><name>part1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" version: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" header_length: : %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" mininstlen: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>min_inst_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" is_stmt: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>default_is_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" line_base: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>line_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" line_range: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" opcode_base: %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>std_opcode_lengths</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>std_opcode_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" op %d %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>std_opcode_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>std_opcode_lengths</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>buf</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name><operator>-</operator><name>buf</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>&lt;</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"INCLUDEDIR (%s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_sdb_include_dir</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>buf</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>buf_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name><operator>-</operator><name>buf</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>id_idx</name></decl>, <decl><type ref="prev"/><name>mod_time</name></decl>, <decl><type ref="prev"/><name>file_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name><operator>&gt;=</operator><name>buf_end</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <goto>goto <name>beach</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name><operator>-</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name><operator>&gt;=</operator><name>buf_end</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <goto>goto <name>beach</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name><operator>-</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name><operator>&gt;=</operator><name>buf_end</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <goto>goto <name>beach</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name><operator>-</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name><operator>&gt;=</operator><name>buf_end</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <goto>goto <name>beach</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>include_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>comp_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pinclude_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allocated_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>include_dir</name> <operator>=</operator> <name>pinclude_dir</name> <operator>=</operator> <call><name>sdb_array_get</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"includedirs"</literal></expr></argument>, <argument><expr><name>id_idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>include_dir</name> <operator>&amp;&amp;</operator> <name><name>include_dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comp_dir</name> <operator>=</operator> <call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><literal type="string">"DW_AT_comp_dir"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allocated_id</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>comp_dir</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name> <argument_list>(<argument><expr><name>include_dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>allocated_id</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>comp_dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>include_dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="string">"%s/%s/"</literal></expr></argument>, <argument><expr><name>comp_dir</name></expr></argument>, <argument><expr><name>include_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>include_dir</name> <operator>=</operator> <name>allocated_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>include_dir</name> <operator>=</operator> <name>pinclude_dir</name> <operator>=</operator> <call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><literal type="string">"DW_AT_comp_dir"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>include_dir</name> <operator>=</operator> <literal type="string">"./"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>include_dir</name></expr>?</condition><then><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>include_dir</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>namelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>include_dir</name></expr>?</condition><then> <expr><name>include_dir</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>namelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>allocated_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>id_idx</name> <operator>=</operator> <name>id_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>mod_time</name> <operator>=</operator> <name>mod_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>file_len</name> <operator>=</operator> <name>file_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comp_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pinclude_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"FILE (%s)\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"| dir idx %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>id_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"| lastmod %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>mod_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"| filelen %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_sdb_addrline</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fileline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CL %s:%d 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (r_file_exists (file)) {
p = file;
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fileline</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s|%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_ptr</name> <operator>=</operator> <call><name>sdb_itoa</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_add</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset_ptr</name></expr></argument>, <argument><expr><name>fileline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_add</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fileline</name></expr></argument>, <argument><expr><name>offset_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fileline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>r_bin_dwarf_parse_ext_opcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfSMRegisters</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>op_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><ternary><condition><expr><name>binfile</name></expr> ?</condition><then> <expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>addr_size</name> <init>= <expr><ternary><condition><expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>binfile</name> <operator>||</operator> <operator>!</operator><name>obuf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_leb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf</name><operator>+</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Extended opcode %d: "</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNE_end_sequence</name></expr>:</case>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>end_sequence</name></name> <operator>=</operator> <name>DWARF_TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fnidx</name> <init>= <expr><name><name>regs</name><operator>-&gt;</operator><name>file</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fnidx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fnidx</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_sdb_addrline</name><argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>fnidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"End of Sequence\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNE_set_address</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>READ64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set Address to 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNE_define_file</name></expr>:</case>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"define_file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"filename %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>dir_idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNE_set_discriminator</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set Discriminator to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>discriminator</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Unexpeced opcode %d\n"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>r_bin_dwarf_parse_spec_opcode</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfSMRegisters</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>,
<parameter><decl><type><name>ut8</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>adj_opcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>advance_adr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obuf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>adj_opcode</name> <operator>=</operator> <name>opcode</name> <operator>-</operator> <name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>advance_adr</name> <operator>=</operator> <name>adj_opcode</name> <operator>/</operator> <name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>+=</operator> <name>advance_adr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>line_base</name></name> <operator>+</operator> <operator>(</operator><name>adj_opcode</name> <operator>%</operator> <name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Special opcode %d: "</literal></expr></argument>, <argument><expr><name>adj_opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"advance Address by %"</literal><name>PFMT64d</name><literal type="string">" to %"</literal><name>PFMT64x</name><literal type="string">" and Line by %d to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>advance_adr</name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>line_base</name></name> <operator>+</operator>
<operator>(</operator><name>adj_opcode</name> <operator>%</operator> <name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>regs</name><operator>-&gt;</operator><name>file</name></name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_sdb_addrline</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>basic_block</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>prologue_end</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>epilogue_begin</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>discriminator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>r_bin_dwarf_parse_std_opcode</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>RBinDwarfSMRegisters</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>,
<parameter><decl><type><name>ut8</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf_end</name> <init>= <expr><name>obuf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>adj_opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>op_advance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>operand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>binfile</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name>regs</name> <operator>||</operator> <operator>!</operator><name>obuf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNS_copy</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Copy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fnidx</name> <init>= <expr><name><name>regs</name><operator>-&gt;</operator><name>file</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fnidx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fnidx</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>file_names_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_sdb_addrline</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>,
<argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>file_names</name><index>[<expr><name>fnidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>basic_block</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_advance_pc</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>+=</operator> <name>addr</name> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>min_inst_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Advance PC by %"</literal><name>PFMT64d</name><literal type="string">" to 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>addr</name> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>min_inst_len</name></name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_advance_line</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_leb128</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <name>sbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Advance line by %"</literal><name>PFMT64d</name><literal type="string">", to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_file</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Set file to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_column</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Set column to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_negate_stmt</name></expr>:</case>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>is_stmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>regs</name><operator>-&gt;</operator><name>is_stmt</name></name></expr> ?</condition><then> <expr><name>DWARF_FALSE</name></expr> </then><else>: <expr><name>DWARF_TRUE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Set is_stmt to %d\n"</literal></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>is_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_basic_block</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set_basic_block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>basic_block</name></name> <operator>=</operator> <name>DWARF_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_const_add_pc</name></expr>:</case>
<expr_stmt><expr><name>adj_opcode</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op_advance</name> <operator>=</operator> <name>adj_opcode</name> <operator>/</operator> <name><name>hdr</name><operator>-&gt;</operator><name>line_range</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>op_advance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>+=</operator> <name>op_advance</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Advance PC by constant %"</literal><name>PFMT64d</name><literal type="string">" to 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>op_advance</name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_fixed_advance_pc</name></expr>:</case>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>+=</operator> <name>operand</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"Fixed advance pc to %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_prologue_end</name></expr>:</case>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>prologue_end</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set_prologue_end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_epilogue_begin</name></expr>:</case>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>epilogue_begin</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set_epilogue_begin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_isa</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>isa</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"set_isa\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Unexpected opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>r_bin_dwarf_parse_opcodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfSMRegisters</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>, <decl><type ref="prev"/><name>ext_opcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>obuf</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext_opcode</name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_ext_opcode</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>regs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_opcode</name> <operator>==</operator> <name>DW_LNE_end_sequence</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>opcode_base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_spec_opcode</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>regs</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_std_opcode</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>regs</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_set_regs_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinDwarfLNPHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>RBinDwarfSMRegisters</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>is_stmt</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>default_is_stmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>basic_block</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>end_sequence</name></name> <operator>=</operator> <name>DWARF_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_dwarf_parse_line_raw2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfLNPHeader</name></type> <name>hdr</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfSMRegisters</name></type> <name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>binfile</name> <operator>||</operator> <operator>!</operator><name>obuf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_PRINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_tmp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_lnp_header</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_dwarf_set_regs_default</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>tmplen</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>unit_length</name><operator>.</operator><name>part1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmplen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_header_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_dwarf_parse_opcodes</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_header_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_dwarf_header_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_tmp</name> <operator>+</operator> <name>tmplen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (idx+sizeof(y)&gt;=len) { return false;} (x)=*(y*)buf; idx+=sizeof(y);buf+=sizeof(y)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUF64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (idx+sizeof(ut64)&gt;=len) { return false;} (x)=r_read_ble64(buf, 0); idx+=sizeof(ut64);buf+=sizeof(ut64)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUF32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (idx+sizeof(ut32)&gt;=len) { return false;} (x)=r_read_ble32(buf, 0); idx+=sizeof(ut32);buf+=sizeof(ut32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUF16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (idx+sizeof(ut16)&gt;=len) { return false;} (x)=r_read_ble16(buf, 0); idx+=sizeof(ut16);buf+=sizeof(ut16)</cpp:value></cpp:define>


<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_dwarf_parse_aranges_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>debug_info_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>address_size</name></decl>, <decl><type ref="prev"/><name>segment_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name>len</name><operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>READ_BUF32</name> <argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"parse_aranges\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"length 0x%x\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>+</operator> <literal type="number">12</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>READ_BUF16</name> <argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Version %d\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>READ_BUF32</name> <argument_list>(<argument><expr><name>debug_info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Debug info offset %d\n"</literal></expr></argument>, <argument><expr><name>debug_info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>READ_BUF</name> <argument_list>(<argument><expr><name>address_size</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"address size %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>address_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>READ_BUF</name> <argument_list>(<argument><expr><name>segment_size</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"segment size %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>segment_size</name> <operator>+</operator> <name>address_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>buf</name> <operator>/</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name><operator>+</operator><name>n</name><operator>&gt;=</operator><name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>buf</name> <operator>-</operator> <name>obuf</name><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>adr</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;=</operator><name>len</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>READ_BUF64</name> <argument_list>(<argument><expr><name>adr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_BUF64</name> <argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"length 0x%"</literal> <name>PFMT64x</name> <literal type="string">" address 0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>adr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_init_debug_info</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugInfo</name> <modifier>*</modifier></type><name>inf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfCompUnit</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEBUG_INFO_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>DEBUG_INFO_CAPACITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_init_die</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDIE</name> <modifier>*</modifier></type><name>die</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>die</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>attr_values</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrValue</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>die</name><operator>-&gt;</operator><name>attr_values</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_expand_die</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDIE</name><modifier>*</modifier></type> <name>die</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfAttrValue</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>die</name> <operator>||</operator> <name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>!=</operator> <name><name>die</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>RBinDwarfAttrValue</name><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>attr_values</name></name></expr></argument>,
<argument><expr><name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrValue</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>attr_values</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_init_comp_unit</name><parameter_list>(<parameter><decl><type><name>RBinDwarfCompUnit</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cu</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfDIE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>COMP_UNIT_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>COMP_UNIT_CAPACITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_expand_cu</name><parameter_list>(<parameter><decl><type><name>RBinDwarfCompUnit</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfDIE</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cu</name> <operator>||</operator> <name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>!=</operator> <name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>RBinDwarfDIE</name><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RBinDwarfDIE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfDIE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfDIE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_init_abbrev_decl</name><parameter_list>(<parameter><decl><type><name>RBinDwarfAbbrevDecl</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ad</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>specs</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>RBinDwarfAttrSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ABBREV_DECL_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ad</name><operator>-&gt;</operator><name>specs</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>ABBREV_DECL_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_expand_abbrev_decl</name><parameter_list>(<parameter><decl><type><name>RBinDwarfAbbrevDecl</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfAttrSpec</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ad</name> <operator>||</operator> <operator>!</operator><name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>||</operator> <name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>!=</operator> <name><name>ad</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>RBinDwarfAttrSpec</name><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>specs</name></name></expr></argument>,
<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAttrSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>specs</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_init_debug_abbrev</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>da</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAbbrevDecl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEBUG_ABBREV_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>da</name><operator>-&gt;</operator><name>decls</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>DEBUG_ABBREV_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dwarf_expand_debug_abbrev</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfAbbrevDecl</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>da</name> <operator>||</operator> <name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>!=</operator> <name><name>da</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>RBinDwarfAbbrevDecl</name><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name></name></expr></argument>,
<argument><expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAbbrevDecl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAbbrevDecl</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBinDwarfAbbrevDecl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_r_bin_dwarf_debug_abbrev</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>attr_name</name></decl>, <decl><type ref="prev"/><name>attr_form</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name>da</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>da</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>declstag</name> <init>= <expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Abbreviation Code %"</literal><name>PFMT64d</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>declstag</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>declstag</name> <operator>&lt;</operator> <name>DW_TAG_LAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Tag %s "</literal></expr></argument>, <argument><expr><name><name>dwarf_tag_name_encodings</name><index>[<expr><name>declstag</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_children</name></expr> ?</condition><then>
<expr><literal type="string">"has children"</literal></expr> </then><else>: <expr><literal type="string">"no children"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Offset 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specs</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>attr_name</name> <operator>=</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>specs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attr_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr_form</name> <operator>=</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>specs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attr_form</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr_name</name> <operator>&amp;&amp;</operator> <name>attr_form</name> <operator>&amp;&amp;</operator>
<name>attr_name</name> <operator>&lt;=</operator> <name>DW_AT_vtable_elem_location</name> <operator>&amp;&amp;</operator>
<name>attr_form</name> <operator>&lt;=</operator> <name>DW_FORM_indirect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>dwarf_attr_encodings</name><index>[<expr><name>attr_name</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dwarf_attr_form_encodings</name><index>[<expr><name>attr_form</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_dwarf_free_debug_abbrev</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>da</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>da</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_free_attr_value</name><parameter_list>(<parameter><decl><type><name>RBinDwarfAttrValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_free_die</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDIE</name> <modifier>*</modifier></type><name>die</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>die</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>die</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_free_attr_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>attr_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_free_comp_unit</name><parameter_list>(<parameter><decl><type><name>RBinDwarfCompUnit</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cu</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_free_die</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_free_debug_info</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugInfo</name> <modifier>*</modifier></type><name>inf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inf</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_free_comp_unit</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_dump_attr_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinDwarfAttrValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">" byte block:"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>DW_AT_language</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name><name>dwarf_langs</name><index>[<expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(indirect string, offset: 0x%"</literal><name>PFMT64x</name><literal type="string">"): "</literal></expr></argument>,
<argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"No string found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>sdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;0x%"</literal><name>PFMT64x</name><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;0x%"</literal><name>PFMT64x</name><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Unknown attr value form %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_dump_debug_info</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinDwarfDebugInfo</name> <modifier>*</modifier></type><name>inf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfDIE</name> <modifier>*</modifier></type><name>dies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfAttrValue</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inf</name> <operator>||</operator> <operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inf</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Compilation Unit @ offset 0x%"</literal><name>PFMT64x</name><literal type="string">":\n"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Length: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Version: %d\n"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Abbrev Offset: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>abbrev_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Pointer Size: %d\n"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dies</name> <operator>=</operator> <name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dies</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" Abbrev Number: %"</literal><name>PFMT64u</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abbrev_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>&amp;&amp;</operator> <name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>&lt;=</operator> <name>DW_TAG_volatile_type</name> <operator>&amp;&amp;</operator>
<name><name>dwarf_tag_name_encodings</name><index>[<expr><name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%s)\n"</literal></expr></argument>, <argument><expr><name><name>dwarf_tag_name_encodings</name><index>[<expr><name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(Unknown abbrev tag)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abbrev_code</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attr_values</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>dies</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&lt;</operator> <name>DW_AT_vtable_elem_location</name> <operator>&amp;&amp;</operator>
<name><name>dwarf_attr_encodings</name><index>[<expr><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>name</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" %-18s : "</literal></expr></argument>, <argument><expr><name><name>dwarf_attr_encodings</name><index>[<expr><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>name</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" TODO\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_bin_dwarf_dump_attr_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_attr_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>obuf_len</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfAttrSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>RBinDwarfAttrValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RBinDwarfCompUnitHdr</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>debug_str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>debug_str_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>obuf</name> <operator>+</operator> <name>obuf_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name> <operator>||</operator> <operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name>obuf</name> <operator>||</operator> <name>obuf_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>form</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>attr_form</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>attr_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>attr_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>pointer_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>READ64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"DWARF: Unexpected pointer size: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>hdr</name><operator>-&gt;</operator><name>pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case DW_FORM_data2:
value-&gt;encoding.data = READ16 (buf);
break;
case DW_FORM_data4:
value-&gt;encoding.data = READ32 (buf);
break;
case DW_FORM_data8:
value-&gt;encoding.data = READ64 (buf);
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>buf</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>block</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_leb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>sdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_str</name> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>offset</name></name> <operator>&lt;</operator> <name>debug_str_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>debug_str</name> <operator>+</operator>
<name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>ndata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ndata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>READ64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>READ64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>READ8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown DW_FORM 0x%02"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>attr_form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>encoding</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_comp_unit</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>,
<parameter><decl><type><name>RBinDwarfCompUnit</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>debug_str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>debug_str_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>obuf</name> <operator>+</operator> <operator>(</operator><name><name>cu</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>abbr_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>debug_str_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&lt;</operator> <name>buf_end</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&gt;=</operator> <name>obuf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>cu</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_expand_cu</name> <argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abbr_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr_code</name> <operator>&gt;</operator> <name><name>da</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_dwarf_init_die</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbr_code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>abbrev_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>abbrev_code</name> <operator>=</operator> <name>abbr_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>=</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>abbr_code</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr_code</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name>abbr_code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>abbr_code</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>capacity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_expand_die</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>capacity</name> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>abbr_code</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>capacity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malformed dwarf attribute capacity doesn't match length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_attr_value</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>abbr_code</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>specs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cu</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>debug_str</name></expr></argument>, <argument><expr><name>debug_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>DW_AT_comp_dir</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name><name>attr_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>encoding</name><operator>.</operator><name>str_struct</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>name</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DW_AT_comp_dir"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid string pointer at %p\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>dies</name><index>[<expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_dwarf_parse_info_raw</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>debug_str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>debug_str_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>obuf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curr_unit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfDebugInfo</name></type> <name>di</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfDebugInfo</name> <modifier>*</modifier></type><name>inf</name> <init>= <expr><operator>&amp;</operator><name>di</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>da</name> <operator>||</operator> <operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>obuf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_bin_dwarf_init_debug_info</name> <argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_bin_dwarf_init_comp_unit</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_unit</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>out_debug_info</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>pointer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>abbrev_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>READ16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out_debug_info</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out_debug_info</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>abbrev_offset</name></name> <operator>=</operator> <call><name>READ32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>pointer_size</name></name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;=</operator> <name><name>da</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: malformed dwarf have not enough buckets for decls.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_max</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k_max</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>==</operator>
<name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name><operator>.</operator><name><name>hdr</name><operator>.</operator><name>abbrev_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_comp_unit</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name></expr></argument>,
<argument><expr><name>da</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>debug_str</name></expr></argument>, <argument><expr><name>debug_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out_debug_info</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_unit</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_PRINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_dump_debug_info</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out_debug_info</name>:</label>
<for>for <control>(<init>;</init> <condition><expr><name>curr_unit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>curr_unit</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_free_comp_unit</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inf</name><operator>-&gt;</operator><name>comp_units</name><index>[<expr><name>curr_unit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_bin_dwarf_free_debug_info</name> <argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_abbrev_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>obuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>obuf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>spec1</name></decl>, <decl><type ref="prev"/><name>spec2</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>has_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfAbbrevDecl</name> <modifier>*</modifier></type><name>tmpdecl</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obuf</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinDwarfDebugAbbrev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_dwarf_init_debug_abbrev</name> <argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>buf</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name><operator>-</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>da</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_expand_debug_abbrev</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmpdecl</name> <operator>=</operator> <operator>&amp;</operator><name><name>da</name><operator>-&gt;</operator><name>decls</name><index>[<expr><name><name>da</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_dwarf_init_abbrev_decl</name> <argument_list>(<argument><expr><name>tmpdecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name><operator>-</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>has_children</name> <operator>=</operator> <call><name>READ</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>has_children</name></name> <operator>=</operator> <name>has_children</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>tmpdecl</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_expand_abbrev_decl</name> <argument_list>(<argument><expr><name>tmpdecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>specs</name><index>[<expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>attr_name</name> <operator>=</operator> <name>spec1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>specs</name><index>[<expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>attr_form</name> <operator>=</operator> <name>spec2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdecl</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>spec1</name> <operator>&amp;&amp;</operator> <name>spec2</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>da</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_PRINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dump_r_bin_dwarf_debug_abbrev</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>da</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RBinSection</name> <modifier>*</modifier></type><name>getsection</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><ternary><condition><expr><name>binfile</name></expr> ?</condition><then> <expr><name><name>binfile</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>sections</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>section</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_dwarf_parse_info</name><parameter_list>(<parameter><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name></decl></parameter>, <parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>debug_str_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>debug_str_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>debug_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>getsection</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"debug_info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>debug_str</name> <operator>=</operator> <call><name>getsection</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"debug_str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>debug_str_len</name> <operator>=</operator> <name><name>debug_str</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_str_buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>debug_str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>debug_str</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>,
<argument><expr><name>debug_str_buf</name></expr></argument>, <argument><expr><name>debug_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>UT32_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_info_raw</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>debug_str_buf</name></expr></argument>, <argument><expr><name>debug_str_len</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>debug_str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinDwarfRow</name> <modifier>*</modifier></type><name>r_bin_dwarf_row_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinDwarfRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>row</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_dwarf_row_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDwarfRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><operator>(</operator><name>RBinDwarfRow</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_line</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>getsection</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"debug_line"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_dwarf_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_dwarf_parse_line_raw2</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>ls</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfRow</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tok</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>r_bin_dwarf_row_new</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_aranges</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>getsection</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"debug_aranges"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>ST32_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_PRINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_parse_aranges_raw</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dwarf_parse_aranges_raw</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>DBGFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>r_bin_dwarf_parse_abbrev</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>getsection</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"debug_abbrev"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDwarfDebugAbbrev</name> <modifier>*</modifier></type><name>da</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>cur</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section</name> <operator>||</operator> <operator>!</operator><name>binfile</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>r_bin_dwarf_parse_abbrev_raw</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>da</name></expr>;</return>
</block_content>}</block></function>
</unit>
