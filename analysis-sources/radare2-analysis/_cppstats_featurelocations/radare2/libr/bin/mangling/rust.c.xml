<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\mangling\rust.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(replace_seq ((const char **)&amp;in, &amp;out, (const char *)(from), to))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>replace_seq</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>out</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_demangle_rust</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_bin_demangle_cxx</name> <argument_list>(<argument><expr><name>binfile</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$SP$"</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$BP$"</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$RF$"</literal></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$LT$"</literal></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$GT$"</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$LP$"</literal></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$RP$"</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$C$"</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u20$"</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u22$"</literal></expr></argument>, <argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u27$"</literal></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u2b$"</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u3b$"</literal></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u5b$"</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u5d$"</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>RS</name><argument_list>(<argument><expr><literal type="string">"$u7e$"</literal></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>
</unit>
