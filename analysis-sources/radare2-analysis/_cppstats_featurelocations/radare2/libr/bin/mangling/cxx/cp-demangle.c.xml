<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\mangling\cxx\cp-demangle.c">



































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>alloca</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>alloca</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>__builtin_alloca</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>alloca</name> <parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX</name></cpp:macro> <cpp:value>(int)(((unsigned int) ~0) &gt;&gt; 1)</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demangle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cp-demangle.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_STATIC_IF_GLIBCPP_V3</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_fill_name</name></cpp:macro> <cpp:value>d_fill_name</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_fill_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_fill_extended_operator</name></cpp:macro> <cpp:value>d_fill_extended_operator</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>d_fill_extended_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_fill_ctor</name></cpp:macro> <cpp:value>d_fill_ctor</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>d_fill_ctor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_fill_dtor</name></cpp:macro> <cpp:value>d_fill_dtor</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>d_fill_dtor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_mangled_name</name></cpp:macro> <cpp:value>d_mangled_name</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_mangled_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_type</name></cpp:macro> <cpp:value>d_type</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_print</name></cpp:macro> <cpp:value>d_print</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>d_print</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_print_callback</name></cpp:macro> <cpp:value>d_print_callback</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_print_callback</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cplus_demangle_init_info</name></cpp:macro> <cpp:value>d_init_info</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_init_info</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_STATIC_IF_GLIBCPP_V3</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_DYNAMIC_ARRAYS</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_DYNAMIC_ARRAYS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &gt;= '0' &amp;&amp; (c) &lt;= '9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_UPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &gt;= 'A' &amp;&amp; (c) &lt;= 'Z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &gt;= 'a' &amp;&amp; (c) &lt;= 'z')</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANONYMOUS_NAMESPACE_PREFIX</name></cpp:macro> <cpp:value>"_GLOBAL_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANONYMOUS_NAMESPACE_PREFIX_LEN</name></cpp:macro> <cpp:value>(sizeof (ANONYMOUS_NAMESPACE_PREFIX) - 1)</cpp:value></cpp:define>




<struct>struct <name>d_standard_sub_info</name>
<block>{

<decl_stmt><decl><type><name>char</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>simple_expansion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>simple_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>full_expansion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_last_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_last_name_len</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_left</name><parameter_list>(<parameter><type><name>dc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dc)-&gt;u.s_binary.left)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_right</name><parameter_list>(<parameter><type><name>dc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dc)-&gt;u.s_binary.right)</cpp:value></cpp:define>



<struct>struct <name>d_print_template</name>
<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>template_decl</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>d_print_mod</name>
<block>{


<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>printed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>templates</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>d_growable_string</name>
<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allocation_failure</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>d_component_stack</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_component_stack</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>d_saved_scope</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>templates</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>d_info_checkpoint</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expansion</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RECURSION_COUNT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<enum>enum <block>{ <decl><name>D_PRINT_BUFFER_LENGTH</name> <init>= <expr><literal type="number">256</literal></expr></init></decl> }</block>;</enum>
<struct>struct <name>d_print_info</name>
<block>{


<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>D_PRINT_BUFFER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>last_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>templates</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>demangle_failure</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>recursion</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_lambda_arg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pack_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>flush_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_component_stack</name></name> <modifier>*</modifier></type><name>component_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d_saved_scope</name></name> <modifier>*</modifier></type><name>saved_scopes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_saved_scope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_saved_scopes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>copy_templates</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_copy_template</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_copy_templates</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>current_template</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DEMANGLE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_dump</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_empty</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_comp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_demangle_mangled_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_builtin_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_builtin_type_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_operator_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_extended_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_ctor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_dtor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_template_param</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_sub</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>has_return_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>is_ctor_dtor_or_conversion</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_encoding</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_nested_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_prefix</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_unqualified_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_source_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_number</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_identifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_operator_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_special_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_parmlist</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_call_offset</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_ctor_dtor_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>d_cv_qualifiers</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_ref_qualifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_bare_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_class_enum_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_array_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_vector_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_pointer_to_member_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_param</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_template_args</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_template_args_1</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_arg</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_expression</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_expr_primary</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_local_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_discriminator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_lambda</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_unnamed_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_clone_suffix</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>d_add_substitution</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>d_substitution</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_checkpoint</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info_checkpoint</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_backtrack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info_checkpoint</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_growable_string_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_growable_string_resize</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_growable_string_append_buffer</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_growable_string_callback_adapter</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>demangle_callbackref</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d_print_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>d_print_saw_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d_print_flush</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d_append_char</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d_append_buffer</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d_append_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type> <name>d_last_char</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_comp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_java_identifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_mod_list</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_mod</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_array_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_expr_op</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_print_cast</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>d_print_conversion</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>d_demangle_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>d_demangle</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNQUAL_COMPONENT_CASE</name></cpp:macro> <cpp:value>case DEMANGLE_COMPONENT_RESTRICT_THIS: case DEMANGLE_COMPONENT_VOLATILE_THIS: case DEMANGLE_COMPONENT_CONST_THIS: case DEMANGLE_COMPONENT_REFERENCE_THIS: case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS: case DEMANGLE_COMPONENT_TRANSACTION_SAFE: case DEMANGLE_COMPONENT_NOEXCEPT: case DEMANGLE_COMPONENT_THROW_SPEC</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_fnqual_component_type</name> <parameter_list>(<parameter><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<label><name>FNQUAL_COMPONENT_CASE</name>:</label>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DEMANGLE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_dump</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"failed demangling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"name '%.*s'\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"tagged name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"template parameter %ld\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TPARM_OBJ</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"template parameter object\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"function parameter %ld\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"constructor %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"destructor %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_SUB_STD</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"standard substitution %s\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"builtin type %s\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_OPERATOR</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"operator %s\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"extended operator with %d args\n"</literal></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"qualified name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"local name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"typed name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"template\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"vtable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VTT</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"VTT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"construction vtable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"typeinfo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"typeinfo name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_FN</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"typeinfo function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"thunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VIRTUAL_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"virtual thunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_COVARIANT_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"covariant thunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_CLASS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"java class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_GUARD</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"guard\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_REFTEMP</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"reference temporary\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_HIDDEN_ALIAS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hidden alias\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_CLONE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"transaction clone\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_NONTRANSACTION_CLONE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"non-transaction clone\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"restrict\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"volatile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"const\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"restrict this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"volatile this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"const this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"reference this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rvalue reference this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_SAFE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"transaction_safe this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"vendor type qualifier\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rvalue reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"complex\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"imaginary\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"vendor type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"function type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"array type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"pointer to member type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_FIXED_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"fixed-point type, accum? %d, sat? %d\n"</literal></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>accum</name></name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"argument list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"template argument list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"initializer list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CAST</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"cast\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"conversion operator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_NULLARY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nullary operator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_UNARY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"unary operator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"binary operator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"binary operator arguments\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"trinary operator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG1</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"trinary operator arguments 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"trinary operator arguments 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"literal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"negative literal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_RESOURCE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"java resource\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPOUND_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"compound name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CHARACTER</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"character '%c'\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_character</name><operator>.</operator><name>character</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_NUMBER</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"number %ld\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_DECLTYPE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"decltype\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"pack expansion\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_INIT</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"tls init function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_WRAPPER</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"tls wrapper function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"default argument %d\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr></argument>, <argument><expr><name>indent</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_LAMBDA</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"lambda %d\n"</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr></argument>, <argument><expr><name>indent</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>int</name></type>
<name>cplus_demangle_fill_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>int</name></type>
<name>cplus_demangle_fill_extended_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>args</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>int</name></type>
<name>cplus_demangle_fill_ctor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>kind</name> <argument_list type="generic">&lt; <argument><expr><name>gnu_v3_complete_object_ctor</name>
<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>kind</name></expr></argument> &gt;</argument_list></name> <name>gnu_v3_object_ctor_group</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_CTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>int</name></type>
<name>cplus_demangle_fill_dtor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>kind</name> <argument_list type="generic">&lt; <argument><expr><name>gnu_v3_deleting_dtor</name>
<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>kind</name></expr></argument> &gt;</argument_list></name> <name>gnu_v3_object_dtor_group</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_DTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_empty</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name> <operator>&gt;=</operator> <name><name>di</name><operator>-&gt;</operator><name>num_comps</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_comp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_UNARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG1</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPOUND_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VECTOR_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CLONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>right</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>DEMANGLE_COMPONENT_VTABLE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VTT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_FN</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VIRTUAL_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COVARIANT_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_CLASS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_GUARD</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_INIT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_WRAPPER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFTEMP</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_HIDDEN_ALIAS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_CLONE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NONTRANSACTION_CLONE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CAST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_RESOURCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_DECLTYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NULLARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TPARM_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>



<case>case <expr><name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>



<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>:</case>
<label><name>FNQUAL_COMPONENT_CASE</name>:</label>
<break>break;</break>


<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_demangle_mangled_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'_'</literal> <operator>||</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>cplus_demangle_fill_name</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_builtin_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_builtin_type_info</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_operator_info</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_extended_operator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>cplus_demangle_fill_extended_operator</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_default_arg</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name> <operator>=</operator> <name>sub</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_ctor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>cplus_demangle_fill_ctor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_dtor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>cplus_demangle_fill_dtor</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_template_param</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_function_param</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_sub</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_SUB_STD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>cplus_demangle_mangled_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call>



<operator>&amp;&amp;</operator> <name>top_level</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>top_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>top_level</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>DMGL_PARAMS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_LOWER</name> <argument_list>(<argument><expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal>
<operator>||</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_clone_suffix</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>has_return_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<return>return <expr><call><name>has_return_type</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<return>return <expr><operator>!</operator> <call><name>is_ctor_dtor_or_conversion</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<label><name>FNQUAL_COMPONENT_CASE</name>:</label>
<return>return <expr><call><name>has_return_type</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_ctor_dtor_or_conversion</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<return>return <expr><call><name>is_ctor_dtor_or_conversion</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_encoding</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name> <init>= <expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'G'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_special_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dc</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>top_level</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>DMGL_PARAMS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<while>while <condition>(<expr><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>





<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>peek</name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ftype</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ftype</name> <operator>=</operator> <call><name>d_bare_function_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><call><name>has_return_type</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ftype</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top_level</name> <operator>&amp;&amp;</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LOCAL_NAME</name>
<operator>&amp;&amp;</operator> <name><name>ftype</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr></argument>,
<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>dc</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_abi_tags</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>hold_last_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>


<expr_stmt><expr><name>hold_last_name</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>last_name</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><name>peek</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>=</operator> <name>hold_last_name</name></expr>;</expr_stmt>

<return>return <expr><name>dc</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name> <init>= <expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>peek</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<return>return <expr><call><name>d_nested_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<return>return <expr><call><name>d_local_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<return>return <expr><call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>subst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'t'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr></argument>,
<argument><expr><call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"std"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>subst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>



</block_content>}</block></if>
<else>else
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>subst</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>dc</name></expr>;</return>
</block_content>}</block>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dc</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_nested_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>rqual</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pret</name> <operator>=</operator> <call><name>d_cv_qualifiers</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>rqual</name> <operator>=</operator> <call><name>d_ref_qualifier</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pret</name> <operator>=</operator> <call><name>d_prefix</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rqual</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>rqual</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>rqual</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_prefix</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>comb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>comb_type</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek2</name> <init>= <expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>peek2</name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <name>peek2</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>IS_LOWER</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'C'</literal>
<operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'U'</literal>
<operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comb_type</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_template_param</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>comb_type</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>!=</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_unqualified_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_LOWER</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_operator_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"operator" <operator>+</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_UNARY</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_ctor_dtor_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_discriminator</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_lambda</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_unnamed_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_abi_tags</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_source_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_identifier</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_number</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>INT_MAX</name> <operator>-</operator> <operator>(</operator><name>peek</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>peek</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_number_component</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_identifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>send</name></name> <operator>-</operator> <name>name</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ANONYMOUS_NAMESPACE_PREFIX_LEN</name> <operator>+</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ANONYMOUS_NAMESPACE_PREFIX</name></expr></argument>,
<argument><expr><name>ANONYMOUS_NAMESPACE_PREFIX_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>name</name> <operator>+</operator> <name>ANONYMOUS_NAMESPACE_PREFIX_LEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>-=</operator> <name>len</name> <operator>-</operator> <sizeof>sizeof <name/></sizeof>"(anonymous namespace)"</expr>;</expr_stmt>
<return>return <expr><call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"(anonymous namespace)"</literal></expr></argument>,
<argument><expr><sizeof>sizeof <name/></sizeof>"(anonymous namespace)" <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s, (sizeof s) - 1</cpp:value></cpp:define>

<expr_stmt><expr><name>CP_STATIC_IF_GLIBCPP_V3</name>
<specifier>const</specifier> struct <name>demangle_operator_info</name> <name><name>cplus_demangle_operators</name><index>[]</index></name> <operator>=</operator>
<block>{
<expr><block>{ <expr><literal type="string">"aN"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&amp;="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aS"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aa"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ad"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"an"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"at"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"alignof "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"az"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"alignof "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cc"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"const_cast"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cl"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cm"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"co"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dV"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"/="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"da"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"delete[] "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dc"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"dynamic_cast"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"de"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dl"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"delete "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ds"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">".*"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dt"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dv"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eO"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"^="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eo"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eq"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fL"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fR"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fl"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fr"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ge"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gs"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gt"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ix"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lS"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"le"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"li"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"operator\"\" "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ls"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lt"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mI"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"-="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mL"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"*="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mi"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ml"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mm"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"na"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"new[]"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ne"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"!="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ng"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nt"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nw"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oR"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"|="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oo"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"||"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pL"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"+="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pl"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pm"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"-&gt;*"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pp"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"++"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ps"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pt"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"-&gt;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qu"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rM"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"%="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rS"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"reinterpret_cast"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rm"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rs"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sP"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"sizeof..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sZ"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"sizeof..."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sc"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"static_cast"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"st"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"sizeof "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sz"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"sizeof "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tr"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"throw"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tw"</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"throw "</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_operator_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_extended_operator</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>c2</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>, <argument><expr><call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_conversion</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name> <operator>=</operator> <operator>!</operator> <name><name>di</name><operator>-&gt;</operator><name>is_expression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_CAST</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name> <operator>=</operator> <name>was_conversion</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><operator>(</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>cplus_demangle_operators</name></expr></argument>)</argument_list></sizeof>
<operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>cplus_demangle_operators</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator>
<operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_operator_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>low</name> <operator>+</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cplus_demangle_operators</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_operator</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_make_character</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_CHARACTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_character</name><operator>.</operator><name>character</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_java_resource</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>d_make_character</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_COMPOUND_NAME</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_JAVA_RESOURCE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_special_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VTABLE</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VTT</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TYPEINFO</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TYPEINFO_NAME</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_call_offset</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_THUNK</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_call_offset</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VIRTUAL_THUNK</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_call_offset</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_call_offset</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_COVARIANT_THUNK</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>derived_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>base_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>derived_type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base_type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE</name></expr></argument>,
<argument><expr><name>base_type</name></expr></argument>, <argument><expr><name>derived_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TYPEINFO_FN</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_JAVA_CLASS</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TLS_INIT</name></expr></argument>,
<argument><expr><call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TLS_WRAPPER</name></expr></argument>,
<argument><expr><call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TPARM_OBJ</name></expr></argument>,
<argument><expr><call><name>d_template_arg</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_GUARD</name></expr></argument>,
<argument><expr><call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_REFTEMP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>d_number_component</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_HIDDEN_ALIAS</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<switch>switch <condition>(<expr><call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_NONTRANSACTION_CLONE</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>





<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TRANSACTION_CLONE</name></expr></argument>,
<argument><expr><call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<return>return <expr><call><name>d_java_resource</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_call_offset</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_ctor_dtor_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>di</name><operator>-&gt;</operator><name>last_name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_SUB_STD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>di</name><operator>-&gt;</operator><name>last_name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inheriting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>inheriting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_complete_object_ctor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_base_object_ctor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_complete_object_allocating_ctor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_unified_ctor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_object_ctor_group</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inheriting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_ctor</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type> <name>kind</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_deleting_dtor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_complete_object_dtor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_base_object_dtor</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_unified_dtor</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>gnu_v3_object_dtor_group</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_dtor</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_is_type_qual</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name> <init>= <expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'K'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





















<expr_stmt><expr><name>CP_STATIC_IF_GLIBCPP_V3</name>
<specifier>const</specifier> struct <name>demangle_builtin_type_info</name>
<name><name>cplus_demangle_builtin_types</name><index>[<expr><name>D_BUILTIN_TYPE_COUNT</name></expr>]</index></name> <operator>=</operator>
<block>{
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"signed char"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"signed char"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"boolean"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_BOOL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long double"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long double"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"__float128"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"__float128"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned char"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned char"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_INT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned int"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_UNSIGNED</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_LONG</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned long"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned long"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_UNSIGNED_LONG</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"__int128"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"__int128"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned __int128"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned __int128"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned short"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned short"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_VOID</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"wchar_t"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long long"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_LONG_LONG</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned long long"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"unsigned long long"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>D_PRINT_UNSIGNED_LONG_LONG</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal32"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal32"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal64"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal64"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal128"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decimal128"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"half"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"half"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char16_t"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char16_t"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char32_t"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"char32_t"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decltype(nullptr)"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"decltype(nullptr)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>D_PRINT_DEFAULT</name></expr> }</block></expr>,
}</block></expr>;</expr_stmt>

<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>cplus_demangle_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>can_subst</name></decl>;</decl_stmt>
















<if_stmt><if>if <condition>(<expr><call><name>next_is_type_qual</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pret</name> <operator>=</operator> <call><name>d_cv_qualifiers</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>pret</name> <operator>=</operator> <call><name>d_function_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pret</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pret</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name>
<operator>||</operator> <name><operator>(</operator><operator>*</operator><name>pret</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><operator>*</operator><name>pret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_left</name> <argument_list>(<argument><expr><operator>*</operator><name>pret</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>pret</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pret</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>peek</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><name>peek</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE</name></expr></argument>,
<argument><expr><call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_function_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_class_enum_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_array_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_pointer_to_member_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_template_param</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>































<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_info_checkpoint</name></name></type> <name>checkpoint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_checkpoint</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_backtrack</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>


<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek_next</name> <operator>=</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek_next</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>peek_next</name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>||</operator> <call><name>IS_UPPER</name> <argument_list>(<argument><expr><name>peek_next</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_class_enum_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_SUB_STD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_POINTER</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_source_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>peek</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_DECLTYPE</name></expr></argument>,
<argument><expr><call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"decltype(auto)"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_FIXED_TYPE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>accum</name></name> <operator>=</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>sat</name></name> <operator>=</operator> <operator>(</operator><name>peek</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_vector_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can_subst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_builtin_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>can_subst</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>d_cv_qualifiers</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>member_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>pret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>next_is_type_qual</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>member_fn</name></expr>
?</condition><then> <expr><name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>
</then><else>: <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"restrict"</expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>member_fn</name></expr>
?</condition><then> <expr><name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>
</then><else>: <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"volatile"</expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'K'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>member_fn</name></expr>
?</condition><then> <expr><name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>
</then><else>: <expr><name>DEMANGLE_COMPONENT_CONST</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"const"</expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_TRANSACTION_SAFE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"transaction_safe"</expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'o'</literal>
<operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_NOEXCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"noexcept"</expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_THROW_SPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"throw"</expr>;</expr_stmt>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_parmlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pret</name> <operator>=</operator> <operator>&amp;</operator><call><name>d_left</name> <argument_list>(<argument><expr><operator>*</operator><name>pret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>member_fn</name> <operator>&amp;&amp;</operator> <name>peek</name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>pstart</name> <operator>!=</operator> <name>pret</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pstart</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pstart</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pstart</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pstart</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <operator>&amp;</operator><call><name>d_left</name> <argument_list>(<argument><expr><operator>*</operator><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_ref_qualifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>sub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"&amp;"</expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"&amp;&amp;"</expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Y'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_bare_function_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_ref_qualifier</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_parmlist</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>tl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ptl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptl</name> <operator>=</operator> <operator>&amp;</operator><name>tl</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>peek</name> <init>= <expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>peek</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptl</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptl</name> <operator>=</operator> <operator>&amp;</operator><call><name>d_right</name> <argument_list>(<argument><expr><operator>*</operator><name>ptl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>print</name></name> <operator>==</operator> <name>D_PRINT_VOID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>-=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>tl</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_bare_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_return_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>return_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>tl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>



<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'J'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_return_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_return_type</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>return_type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>return_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>return_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <call><name>d_parmlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr></argument>,
<argument><expr><name>return_type</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_class_enum_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_array_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dim</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_vector_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dim</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>d_number_component</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_VECTOR_TYPE</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_pointer_to_member_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
















<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_compact_number</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_param</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>param</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>d_compact_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>param</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_template_param</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_args</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal>
<operator>&amp;&amp;</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'J'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>d_template_args_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_args_1</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>hold_last_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pal</name></decl>;</decl_stmt>




<expr_stmt><expr><name>hold_last_name</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>last_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>al</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>&amp;</operator><name>al</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_template_arg</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pal</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>&amp;</operator><call><name>d_right</name> <argument_list>(<argument><expr><operator>*</operator><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>=</operator> <name>hold_last_name</name></expr>;</expr_stmt>

<return>return <expr><name>al</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_template_arg</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><call><name>d_expr_primary</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<return>return <expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_exprlist</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>list</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>terminator</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>d_expression</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><call><name>d_right</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>terminator</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>op_is_new_cast</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal>
<operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_expression_1</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_expr_primary</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_template_param</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr></argument>,
<argument><expr><call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>d_compact_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>INT_MAX</name> <operator>||</operator> <name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>d_make_function_param</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>peek</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>name</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>peek</name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>d_exprlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>d_operator_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_UNARY</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
<argument><expr><call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_OPERATOR</name></expr>:</case>
<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>:</case>
<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>args</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CAST</name></expr>:</case>
<expr_stmt><expr><name>args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>args</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_NULLARY</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suffix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>suffix</name> <operator>=</operator> <operator>!</operator><call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_CAST</name>
<operator>&amp;&amp;</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_exprlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"sP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_template_args_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>suffix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr></argument>,
<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_UNARY</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>op_is_new_cast</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>d_operator_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"cl"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_exprlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"dt"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"pt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_unqualified_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>, <argument><expr><call><name>d_template_args</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_BINARY</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
<argument><expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>,
<argument><expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr></argument>,
<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>third</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"qu"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>third</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>third</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>d_operator_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>third</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>third</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>d_exprlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>third</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal>
<operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>third</name> <operator>=</operator> <call><name>d_exprlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'i'</literal>
<operator>&amp;&amp;</operator> <call><name>d_peek_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>third</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_TRINARY</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
<argument><expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>,
<argument><expr><name>DEMANGLE_COMPONENT_TRINARY_ARG1</name></expr></argument>,
<argument><expr><name>first</name></expr></argument>,
<argument><expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>,
<argument><expr><name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr></argument>,
<argument><expr><name>second</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_expression</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_expression</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>is_expression</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_expression</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_expression_1</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_expression</name></name> <operator>=</operator> <name>was_expression</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_expr_primary</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal>

<operator>||</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cplus_demangle_mangled_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>demangle_component_type</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name>
<operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>print</name></name> <operator>!=</operator> <name>D_PRINT_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>-=</operator> <name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>












<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_LITERAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_local_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>function</name> <operator>=</operator> <call><name>d_encoding</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>function</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_discriminator</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"string literal"</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>"string literal" <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>d_compact_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name>


<operator>&amp;&amp;</operator> <name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_LAMBDA</name>
<operator>&amp;&amp;</operator> <name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_UNNAMED_TYPE</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_discriminator</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>d_make_default_arg</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>function</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TYPED_NAME</name>
<operator>&amp;&amp;</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_discriminator</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>discrim</name></decl>, <decl><type ref="prev"/><name>num_underscores</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>num_underscores</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>discrim</name> <operator>=</operator> <call><name>d_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>discrim</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_underscores</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>discrim</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_lambda</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>tl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <call><name>d_parmlist</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>d_compact_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_LAMBDA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name> <operator>=</operator> <name>tl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_unnamed_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>d_compact_number</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_make_empty</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DEMANGLE_COMPONENT_UNNAMED_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_clone_suffix</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><call><name>d_str</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pend</name> <init>= <expr><name>suffix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pend</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_LOWER</name> <argument_list>(<argument><expr><name><name>pend</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pend</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pend</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>IS_LOWER</name> <argument_list>(<argument><expr><operator>*</operator><name>pend</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>pend</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>pend</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>pend</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name><name>pend</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pend</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>pend</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>pend</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>pend</name> <operator>-</operator> <name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>d_make_name</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>pend</name> <operator>-</operator> <name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_make_comp</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>DEMANGLE_COMPONENT_CLONE</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_add_substitution</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name> <operator>&gt;=</operator> <name><name>di</name><operator>-&gt;</operator><name>num_subs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>d_standard_sub_info</name></name></type> <name><name>standard_subs</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::allocator"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::allocator"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"allocator"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="char">'b'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_string"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_string"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"basic_string"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::string"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"basic_string"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::istream"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"basic_istream"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::ostream"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"basic_ostream"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::iostream"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NL</name> <argument_list>(<argument><expr><literal type="string">"std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>NL</name> <argument_list>(<argument><literal type="string">"basic_iostream"</literal></argument>)</argument_list></macro> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_substitution</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_check_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_UPPER</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_id</name> <operator>=</operator> <name>id</name> <operator>*</operator> <literal type="number">36</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_id</name> <operator>=</operator> <name>id</name> <operator>*</operator> <literal type="number">36</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_id</name> <operator>&lt;</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>new_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>d_next_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>++</operator><name>id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>di</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_standard_sub_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_standard_sub_info</name></name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>verbose</name> <operator>=</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>DMGL_VERBOSE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>verbose</name> <operator>&amp;&amp;</operator> <name>prefix</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name>peek</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><operator>&amp;</operator><name><name>standard_subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <sizeof>sizeof <name>standard_subs</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>standard_subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>standard_subs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>set_last_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>=</operator> <call><name>d_make_sub</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>set_last_name</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>set_last_name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>full_expansion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>full_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>simple_expansion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>simple_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_sub</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_peek_char</name> <argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_abi_tags</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>d_add_substitution</name> <argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_checkpoint</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info_checkpoint</name></name> <modifier>*</modifier></type><name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>next_comp</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>next_sub</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>expansion</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>expansion</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_backtrack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info_checkpoint</name></name> <modifier>*</modifier></type><name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>next_comp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>next_sub</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>expansion</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_growable_string_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type><name>dgs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>estimate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>allocation_failure</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>estimate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_growable_string_resize</name> <argument_list>(<argument><expr><name>dgs</name></expr></argument>, <argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_growable_string_resize</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type><name>dgs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>need</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newalc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dgs</name><operator>-&gt;</operator><name>allocation_failure</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>newalc</name> <operator>=</operator> <ternary><condition><expr><name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>newalc</name> <operator>&lt;</operator> <name>need</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newalc</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>newalc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>allocation_failure</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name> <operator>=</operator> <name>newalc</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_growable_string_append_buffer</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type><name>dgs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>need</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need</name> <operator>=</operator> <name><name>dgs</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <name><name>dgs</name><operator>-&gt;</operator><name>alc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_growable_string_resize</name> <argument_list>(<argument><expr><name>dgs</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dgs</name><operator>-&gt;</operator><name>allocation_failure</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dgs</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dgs</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgs</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_growable_string_callback_adapter</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_growable_string</name></name> <modifier>*</modifier></type><name>dgs</name> <init>= <expr><operator>(</operator>struct <name>d_growable_string</name><operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_growable_string_append_buffer</name> <argument_list>(<argument><expr><name>dgs</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_count_templates_scopes</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_templates</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_scopes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_SUB_STD</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_OPERATOR</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CHARACTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NUMBER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_UNNAMED_TYPE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_templates</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>recurse_left_right</name>;</goto>

<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_scopes</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>recurse_left_right</name>;</goto>

<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VTABLE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VTT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_FN</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VIRTUAL_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COVARIANT_THUNK</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_CLASS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_GUARD</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_INIT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TLS_WRAPPER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFTEMP</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_HIDDEN_ALIAS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_SAFE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NOEXCEPT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_THROW_SPEC</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VECTOR_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TPARM_OBJ</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CAST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NULLARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_UNARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG1</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_RESOURCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPOUND_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_DECLTYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_CLONE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NONTRANSACTION_CLONE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CLONE</name></expr>:</case>
<label><name>recurse_left_right</name>:</label>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_FIXED_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMANGLE_COMPONENT_LAMBDA</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>:</case>
<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><name>num_templates</name></expr></argument>, <argument><expr><name>num_scopes</name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>flush_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>demangle_failure</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>recursion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>is_lambda_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>saved_scopes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>next_saved_scope</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_saved_scopes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>copy_templates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>next_copy_template</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_copy_templates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_count_templates_scopes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpi</name><operator>-&gt;</operator><name>num_copy_templates</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dpi</name><operator>-&gt;</operator><name>num_saved_scopes</name></name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_copy_templates</name></name> <operator>*=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>num_saved_scopes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_print_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>demangle_failure</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>d_print_saw_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dpi</name><operator>-&gt;</operator><name>demangle_failure</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_print_flush</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dpi</name><operator>-&gt;</operator><name>callback</name></name> <argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>flush_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_append_char</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_flush</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_append_buffer</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_append_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_append_num</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type>
<name>d_last_char</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dpi</name><operator>-&gt;</operator><name>last_char</name></name></expr>;</return>
</block_content>}</block></function>










<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>int</name></type>
<name>cplus_demangle_print_callback</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_info</name></name></type> <name>dpi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_print_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DYNAMIC_ARRAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>d_saved_scope</name></name></type> <name><name>scopes</name><index>[<expr><ternary><condition><expr><operator>(</operator><name><name>dpi</name><operator>.</operator><name>num_saved_scopes</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><name><name>dpi</name><operator>.</operator><name>num_saved_scopes</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>d_print_template</name></name></type> <name><name>temps</name><index>[<expr><ternary><condition><expr><operator>(</operator><name><name>dpi</name><operator>.</operator><name>num_copy_templates</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><name><name>dpi</name><operator>.</operator><name>num_copy_templates</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>.</operator><name>saved_scopes</name></name> <operator>=</operator> <name>scopes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>.</operator><name>copy_templates</name></name> <operator>=</operator> <name>temps</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dpi</name><operator>.</operator><name>saved_scopes</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>num_saved_scopes</name></name>
<operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>dpi</name><operator>.</operator><name>saved_scopes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>.</operator><name>copy_templates</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>num_copy_templates</name></name>
<operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>dpi</name><operator>.</operator><name>copy_templates</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>d_print_flush</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator> <call><name>d_print_saw_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>char</name> <modifier>*</modifier></type>
<name>cplus_demangle_print</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>estimate</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>palc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_growable_string</name></name></type> <name>dgs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_growable_string_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dgs</name></expr></argument>, <argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>cplus_demangle_print_callback</name> <argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>d_growable_string_callback_adapter</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dgs</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dgs</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>palc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>palc</name> <operator>=</operator> <ternary><condition><expr><name><name>dgs</name><operator>.</operator><name>allocation_failure</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>dgs</name><operator>.</operator><name>alc</name></name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name><name>dgs</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_index_template_argument</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>args</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name>args</name></expr>;</init>
<condition><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>a</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_lookup_template_argument</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>d_index_template_argument</name>
<argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name><operator>-&gt;</operator><name>template_decl</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>d_find_pack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_lookup_template_argument</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_LAMBDA</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_OPERATOR</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_SUB_STD</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CHARACTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_UNNAMED_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_FIXED_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_NUMBER</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>:</case>
<return>return <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<return>return <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<return>return <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_pack_length</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dc</name> <operator>&amp;&amp;</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_args_length</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>dc</name> <operator>&amp;&amp;</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>;</condition>
<incr><expr><name>dc</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>elt</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>d_pack_length</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_subexpr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>simple</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_NAME</name>
<operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_QUAL_NAME</name>
<operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name>
<operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>simple</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_save_scope</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_saved_scope</name></name> <modifier>*</modifier></type><name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>next_saved_scope</name></name> <operator>&gt;=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>num_saved_scopes</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scope</name> <operator>=</operator> <operator>&amp;</operator><name><name>dpi</name><operator>-&gt;</operator><name>saved_scopes</name><index>[<expr><name><name>dpi</name><operator>-&gt;</operator><name>next_saved_scope</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>next_saved_scope</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scope</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
<expr_stmt><expr><name>link</name> <operator>=</operator> <operator>&amp;</operator><name><name>scope</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</init> <condition><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>next_copy_template</name></name> <operator>&gt;=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>num_copy_templates</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>dpi</name><operator>-&gt;</operator><name>copy_templates</name><index>[<expr><name><name>dpi</name><operator>-&gt;</operator><name>next_copy_template</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>next_copy_template</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>template_decl</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>template_decl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>link</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>link</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>link</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>d_saved_scope</name></name> <modifier>*</modifier></type>
<name>d_get_saved_scope</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dpi</name><operator>-&gt;</operator><name>next_saved_scope</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>saved_scopes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>container</name> <operator>==</operator> <name>container</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>dpi</name><operator>-&gt;</operator><name>saved_scopes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_maybe_print_fold_expression</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>ops</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>operator_</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fold_code</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fold_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operator_</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>save_idx</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fold_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"(..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operator_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operator_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"...)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operator_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operator_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name> <operator>=</operator> <name>save_idx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_comp_inner</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>mod_inner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>saved_templates</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>need_template_restore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_print_saw_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_java_identifier</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TAGGED_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"[abi:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>local_name</name> <init>= <expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>local_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"{default arg#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>local_name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"}::"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_name</name> <operator>=</operator> <name><name>local_name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>hold_modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>typed_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name></type> <name><name>adpm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name></type> <name>dpt</name></decl>;</decl_stmt>




<expr_stmt><expr><name>hold_modifiers</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>typed_name</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>typed_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <sizeof>sizeof <name>adpm</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mod</name> <operator>=</operator> <name>typed_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>templates</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>typed_name</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>typed_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>typed_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typed_name</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>typed_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>typed_name</name> <operator>=</operator> <name><name>typed_name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>typed_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <sizeof>sizeof <name>adpm</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>adpm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>adpm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mod</name> <operator>=</operator> <name>typed_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>templates</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>typed_name</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>typed_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dpt</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <operator>&amp;</operator><name>dpt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>.</operator><name>template_decl</name></name> <operator>=</operator> <name>typed_name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typed_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>dpt</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>printed</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_mod</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>hold_dpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dcl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>hold_current</name></decl>;</decl_stmt>



<expr_stmt><expr><name>hold_current</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>





<expr_stmt><expr><name>hold_dpm</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dcl</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>dcl</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_NAME</name>
<operator>&amp;&amp;</operator> <name><name>dcl</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">6</literal>
<operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name><name>dcl</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"JArray"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>hold_dpm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>=</operator> <name>hold_current</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>is_lambda_arg</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"auto:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>hold_dpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>d_lookup_template_argument</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_index_template_argument</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>hold_dpt</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>hold_dpt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>hold_dpt</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TPARM_OBJ</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"template parameter object for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_VTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"vtable for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_VTT</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"VTT for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"construction vtable for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"-in-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"typeinfo for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"typeinfo name for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TYPEINFO_FN</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"typeinfo fn for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"non-virtual thunk to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_VIRTUAL_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"virtual thunk to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_COVARIANT_THUNK</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"covariant return thunk to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_CLASS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"java Class for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_GUARD</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"guard variable for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TLS_INIT</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"TLS init function for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TLS_WRAPPER</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"TLS wrapper function for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_REFTEMP</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"reference temporary #"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_HIDDEN_ALIAS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"hidden alias for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_CLONE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"transaction clone for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_NONTRANSACTION_CLONE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"non-transaction clone for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_SUB_STD</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>pdpm</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>pdpm</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</init> <condition><expr><name>pdpm</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pdpm</name> <operator>=</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>printed</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_RESTRICT</name>
<operator>&amp;&amp;</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_VOLATILE</name>
<operator>&amp;&amp;</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_CONST</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<goto>goto <name>modifier</name>;</goto>

<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpi</name><operator>-&gt;</operator><name>is_lambda_arg</name></name>
<operator>&amp;&amp;</operator> <name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_PARAM</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_saved_scope</name></name> <modifier>*</modifier></type><name>scope</name> <init>= <expr><call><name>d_get_saved_scope</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>d_save_scope</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_print_saw_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_component_stack</name></name> <modifier>*</modifier></type><name>dcse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_self_or_parent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>dcse</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name></expr>;</init> <condition><expr><name>dcse</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dcse</name> <operator>=</operator> <name><name>dcse</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dcse</name><operator>-&gt;</operator><name>dc</name></name> <operator>==</operator> <name>sub</name>
<operator>||</operator> <operator>(</operator><name><name>dcse</name><operator>-&gt;</operator><name>dc</name></name> <operator>==</operator> <name>dc</name>
<operator>&amp;&amp;</operator> <name>dcse</name> <operator>!=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found_self_or_parent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_self_or_parent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>saved_templates</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>scope</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_template_restore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_lookup_template_argument</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>d_index_template_argument</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_template_restore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>saved_templates</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_REFERENCE</name>
<operator>||</operator> <name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>sub</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_inner</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<label><name>FNQUAL_COMPONENT_CASE</name>:</label>
<label><name>modifier</name>:</label>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name></type> <name>dpm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>dpm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>mod</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>printed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>templates</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod_inner</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_inner</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>mod_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>dpm</name><operator>.</operator><name>printed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_mod</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name><name>dpm</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_template_restore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>saved_templates</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>java_name</name></name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>java_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_RET_POSTFIX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_function_type</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>,
<argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DMGL_RET_POSTFIX</name> <operator>|</operator> <name>DMGL_RET_DROP</name><operator>)</operator></expr></argument>,
<argument><expr><name>dc</name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_RET_POSTFIX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DMGL_RET_POSTFIX</name> <operator>|</operator> <name>DMGL_RET_DROP</name><operator>)</operator></expr></argument>,
<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_RET_DROP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name></type> <name>dpm</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>dpm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>mod</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>printed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>templates</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DMGL_RET_POSTFIX</name> <operator>|</operator> <name>DMGL_RET_DROP</name><operator>)</operator></expr></argument>,
<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name><name>dpm</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpm</name><operator>.</operator><name>printed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_RET_POSTFIX</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_RET_POSTFIX</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_function_type</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>,
<argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DMGL_RET_POSTFIX</name> <operator>|</operator> <name>DMGL_RET_DROP</name><operator>)</operator></expr></argument>,
<argument><expr><name>dc</name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>hold_modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name></type> <name><name>adpm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>pdpm</name></decl>;</decl_stmt>









<expr_stmt><expr><name>hold_modifiers</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mod</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>templates</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pdpm</name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pdpm</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_RESTRICT</name>
<operator>||</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_VOLATILE</name>
<operator>||</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_CONST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>printed</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <sizeof>sizeof <name>adpm</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pdpm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdpm</name><operator>-&gt;</operator><name>printed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pdpm</name> <operator>=</operator> <name><name>pdpm</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>adpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>printed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_mod</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>adpm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>d_print_array_type</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VECTOR_TYPE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name></type> <name>dpm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>dpm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>mod</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>printed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpm</name><operator>.</operator><name>templates</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>dpm</name><operator>.</operator><name>printed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_mod</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name><name>dpm</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_FIXED_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>sat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"_Sat "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name></name>
<operator>!=</operator> <operator>&amp;</operator><name><name>cplus_demangle_builtin_types</name><index>[<expr><literal type="char">'i'</literal><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_fixed</name><operator>.</operator><name>accum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"_Accum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"_Fract"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_ARGLIST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE_ARGLIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>flush_count</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_flush</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flush_count</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>flush_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>flush_count</name></name> <operator>==</operator> <name>flush_count</name> <operator>&amp;&amp;</operator> <name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_INITIALIZER_LIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_OPERATOR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_operator_info</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_LOWER</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DEMANGLE_COMPONENT_EXTENDED_OPERATOR</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"operator "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_extended_operator</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_CONVERSION</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"operator "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_conversion</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_NULLARY</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_UNARY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"ad"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TYPED_NAME</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_QUAL_NAME</name>
<operator>&amp;&amp;</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"sZ"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>d_pack_length</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"sP"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>d_args_length</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_CAST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_cast</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"gs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_BINARY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>op_is_new_cast</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"&gt;("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_maybe_print_fold_expression</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"cl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"ix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"cl"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_BINARY_ARGS</name></expr>:</case>

<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_TRINARY_ARG1</name>
<operator>||</operator> <call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_maybe_print_fold_expression</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>third</name> <init>= <expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"qu"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_expr_op</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"new "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>third</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG1</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TRINARY_ARG2</name></expr>:</case>

<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>d_builtin_type_print</name></name></type> <name>tp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>D_PRINT_DEFAULT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_BUILTIN_TYPE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_builtin</name><operator>.</operator><name>type</name><operator>-&gt;</operator><name>print</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tp</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>D_PRINT_INT</name></expr>:</case>
<case>case <expr><name>D_PRINT_UNSIGNED</name></expr>:</case>
<case>case <expr><name>D_PRINT_LONG</name></expr>:</case>
<case>case <expr><name>D_PRINT_UNSIGNED_LONG</name></expr>:</case>
<case>case <expr><name>D_PRINT_LONG_LONG</name></expr>:</case>
<case>case <expr><name>D_PRINT_UNSIGNED_LONG_LONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_NAME</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tp</name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><name>D_PRINT_UNSIGNED</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>D_PRINT_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>D_PRINT_UNSIGNED_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"ul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>D_PRINT_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"ll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>D_PRINT_UNSIGNED_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"ull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>D_PRINT_BOOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>DEMANGLE_COMPONENT_NAME</name>
<operator>&amp;&amp;</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LITERAL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>s_name</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LITERAL_NEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>D_PRINT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>D_PRINT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_NUMBER</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_JAVA_RESOURCE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"java resource "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_COMPOUND_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_CHARACTER</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_character</name><operator>.</operator><name>character</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_DECLTYPE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"decltype ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_PACK_EXPANSION</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>d_find_pack</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>d_print_subexpr</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>d_pack_length</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>pack_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_FUNCTION_PARAM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>num</name> <init>= <expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"this"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"{parm#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"global constructors keyed to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"global destructors keyed to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_binary</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_LAMBDA</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"{lambda("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>is_lambda_arg</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>is_lambda_arg</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">")#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_UNNAMED_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"{unnamed type#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_number</name><operator>.</operator><name>number</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>DEMANGLE_COMPONENT_CLONE</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" [clone "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<default>default:</default>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_comp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_component_stack</name></name></type> <name>self</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>d_printing</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>dpi</name><operator>-&gt;</operator><name>recursion</name></name> <operator>&gt;</operator> <name>MAX_RECURSION_COUNT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>d_printing</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>recursion</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>.</operator><name>dc</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name> <operator>=</operator> <operator>&amp;</operator><name>self</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_comp_inner</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>component_stack</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>d_printing</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>recursion</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_java_identifier</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>name</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>q</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dig</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>q</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>q</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>dig</name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_mod_list</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>mods</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name> <modifier>*</modifier></type><name>hold_dpt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mods</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>d_print_saw_error</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mods</name><operator>-&gt;</operator><name>printed</name></name>
<operator>||</operator> <operator>(</operator><operator>!</operator> <name>suffix</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_mod_list</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mods</name><operator>-&gt;</operator><name>printed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hold_dpt</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>mods</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_FUNCTION_TYPE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_function_type</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name></name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>hold_dpt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_array_type</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name></name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>hold_dpt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>hold_modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>






<expr_stmt><expr><name>hold_modifiers</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_DEFAULT_ARG</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"{default arg#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_num</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"}::"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_unary_num</name><operator>.</operator><name>sub</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>is_fnqual_component_type</name> <argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>hold_dpt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d_print_mod</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name>hold_dpt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_mod_list</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>mods</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_mod</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" restrict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TRANSACTION_SAFE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" transaction_safe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_NOEXCEPT</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" noexcept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_THROW_SPEC</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_JAVA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>:</case>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"complex "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"imaginary "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">"::*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>DEMANGLE_COMPONENT_VECTOR_TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" __vector("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<default>default:</default>


<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_function_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>hold_modifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mods</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>printed</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMANGLE_COMPONENT_POINTER</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE</name></expr>:</case>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_COMPLEX</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_IMAGINARY</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_PTRMEM_TYPE</name></expr>:</case>
<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<label><name>FNQUAL_COMPONENT_CASE</name>:</label>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>need_space</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal>
<operator>&amp;&amp;</operator> <call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_space</name> <operator>&amp;&amp;</operator> <call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hold_modifiers</name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_mod_list</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d_print_mod_list</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <name>hold_modifiers</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_array_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_space</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mods</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_mod</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mods</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>p</name><operator>-&gt;</operator><name>printed</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mod</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_ARRAY_TYPE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_string</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_print_mod_list</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_space</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_expr_op</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEMANGLE_COMPONENT_OPERATOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_buffer</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_operator</name><operator>.</operator><name>op</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_cast</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_print_conversion</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_print_info</name></name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_print_template</name></name></type> <name>dpt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dpt</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <operator>&amp;</operator><name>dpt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>.</operator><name>template_decl</name></name> <operator>=</operator> <name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>dpt</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dpi</name><operator>-&gt;</operator><name>current_template</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>templates</name></name> <operator>=</operator> <name><name>dpt</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_print_comp</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>d_right</name> <argument_list>(<argument><expr><call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>d_last_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>d_append_char</name> <argument_list>(<argument><expr><name>dpi</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name>void</name></type>
<name>cplus_demangle_init_info</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>mangled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>send</name></name> <operator>=</operator> <name>mangled</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>mangled</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>num_comps</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>next_comp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>num_subs</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>next_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>last_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>expansion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_expression</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>is_conversion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_demangle_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum
<block>{
<decl><name>DCT_TYPE</name></decl>,
<decl><name>DCT_MANGLED</name></decl>,
<decl><name>DCT_GLOBAL_CTORS</name></decl>,
<decl><name>DCT_GLOBAL_DTORS</name></decl>
}</block>
<decl><name>type</name></decl>;</enum>
<decl_stmt><decl><type><name><name>struct</name> <name>d_info</name></name></type> <name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mangled</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>mangled</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DCT_MANGLED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><literal type="string">"_GLOBAL_"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mangled</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>mangled</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>mangled</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mangled</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <name><name>mangled</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>mangled</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name><name>mangled</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal></expr> ?</condition><then> <expr><name>DCT_GLOBAL_CTORS</name></expr> </then><else>: <expr><name>DCT_GLOBAL_DTORS</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_TYPES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DCT_TYPE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cplus_demangle_init_info</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DYNAMIC_ARRAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>demangle_component</name></name></type> <name><name>comps</name><index>[<expr><name><name>di</name><operator>.</operator><name>num_comps</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name><name>subs</name><index>[<expr><name><name>di</name><operator>.</operator><name>num_subs</name></name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>di</name><operator>.</operator><name>comps</name></name> <operator>=</operator> <name>comps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <name>subs</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>comps</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>di</name><operator>.</operator><name>num_comps</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>di</name><operator>.</operator><name>comps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>di</name><operator>.</operator><name>num_subs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>di</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DCT_TYPE</name></expr>:</case>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>cplus_demangle_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DCT_MANGLED</name></expr>:</case>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>cplus_demangle_mangled_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DCT_GLOBAL_CTORS</name></expr>:</case>
<case>case <expr><name>DCT_GLOBAL_DTORS</name></expr>:</case>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_make_comp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>DCT_GLOBAL_CTORS</name></expr>
?</condition><then> <expr><name>DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS</name></expr>
</then><else>: <expr><name>DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>d_make_demangle_mangled_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><call><name>d_str</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d_advance</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><call><name>d_str</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DMGL_PARAMS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>d_peek_char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DEMANGLE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>d_dump</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dc</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>cplus_demangle_print_callback</name> <argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>d_demangle</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>palc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_growable_string</name></name></type> <name>dgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d_growable_string_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dgs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>d_demangle_callback</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>d_growable_string_callback_adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dgs</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>palc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>palc</name> <operator>=</operator> <ternary><condition><expr><name><name>dgs</name><operator>.</operator><name>allocation_failure</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>dgs</name><operator>.</operator><name>alc</name></name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name><name>dgs</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_LIBGCC2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>__cxa_demangle</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



























<function><type><name>char</name> <modifier>*</modifier></type>
<name>__cxa_demangle</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output_buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>demangled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mangled_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>demangled</name> <operator>=</operator> <call><name>d_demangle</name> <argument_list>(<argument><expr><name>mangled_name</name></expr></argument>, <argument><expr><name>DMGL_PARAMS</name> <operator>|</operator> <name>DMGL_TYPES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>demangled</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>alc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>demangled</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>*</operator><name>length</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>demangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>demangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>demangled</name> <operator>=</operator> <name>output_buffer</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>alc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>demangled</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__gcclibcxx_demangle_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




















<function><type><name>int</name></type>
<name>__gcclibcxx_demangle_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled_name</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mangled_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>d_demangle_callback</name> <argument_list>(<argument><expr><name>mangled_name</name></expr></argument>, <argument><expr><name>DMGL_PARAMS</name> <operator>|</operator> <name>DMGL_TYPES</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 





<function><type><name>char</name> <modifier>*</modifier></type>
<name>cplus_demangle_v3</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alc</name></decl>;</decl_stmt>

<return>return <expr><call><name>d_demangle</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cplus_demangle_v3_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_demangle_callback</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type>
<name>java_demangle_v3</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alc</name></decl>;</decl_stmt>

<return>return <expr><call><name>d_demangle</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>DMGL_JAVA</name> <operator>|</operator> <name>DMGL_PARAMS</name> <operator>|</operator> <name>DMGL_RET_POSTFIX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>java_demangle_v3_callback</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>,
<parameter><decl><type><name>demangle_callbackref</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_demangle_callback</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>,
<argument><expr><name>DMGL_JAVA</name> <operator>|</operator> <name>DMGL_PARAMS</name> <operator>|</operator> <name>DMGL_RET_POSTFIX</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_ctor_or_dtor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name> <modifier>*</modifier></type><name>ctor_kind</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name> <modifier>*</modifier></type><name>dtor_kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d_info</name></name></type> <name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ctor_kind</name> <operator>=</operator> <operator>(</operator>enum <name>gnu_v3_ctor_kinds</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dtor_kind</name> <operator>=</operator> <operator>(</operator>enum <name>gnu_v3_dtor_kinds</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cplus_demangle_init_info</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>DMGL_GNU_V3</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CP_DYNAMIC_ARRAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>demangle_component</name></name></type> <name><name>comps</name><index>[<expr><name><name>di</name><operator>.</operator><name>num_comps</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__extension__</name> <name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name><name>subs</name><index>[<expr><name><name>di</name><operator>.</operator><name>num_subs</name></name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>di</name><operator>.</operator><name>comps</name></name> <operator>=</operator> <name>comps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <name>subs</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>comps</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>di</name><operator>.</operator><name>num_comps</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>di</name><operator>.</operator><name>comps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name><name>di</name><operator>.</operator><name>num_subs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>di</name><operator>.</operator><name>subs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>cplus_demangle_mangled_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>dc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>DEMANGLE_COMPONENT_RESTRICT_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_VOLATILE_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_CONST_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_REFERENCE_THIS</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_TYPED_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_TEMPLATE</name></expr>:</case>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_left</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_QUAL_NAME</name></expr>:</case>
<case>case <expr><name>DEMANGLE_COMPONENT_LOCAL_NAME</name></expr>:</case>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>d_right</name> <argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_CTOR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ctor_kind</name> <operator>=</operator> <name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_ctor</name><operator>.</operator><name>kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEMANGLE_COMPONENT_DTOR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dtor_kind</name> <operator>=</operator> <name><name>dc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s_dtor</name><operator>.</operator><name>kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type>
<name>is_gnu_v3_mangled_ctor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type> <name>ctor_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type> <name>dtor_kind</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>is_ctor_or_dtor</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctor_kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtor_kind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator>enum <name>gnu_v3_ctor_kinds</name><operator>)</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ctor_kind</name></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type>
<name>is_gnu_v3_mangled_dtor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_ctor_kinds</name></name></type> <name>ctor_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>gnu_v3_dtor_kinds</name></name></type> <name>dtor_kind</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>is_ctor_or_dtor</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctor_kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtor_kind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator>enum <name>gnu_v3_dtor_kinds</name><operator>)</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>dtor_kind</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STANDALONE_DEMANGLER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dyn-string.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_usage</name> <parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ALPHA</name><parameter_list>(<parameter><type><name>CHAR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((CHAR) &gt;= 'a' &amp;&amp; (CHAR) &lt;= 'z') || ((CHAR) &gt;= 'A' &amp;&amp; (CHAR) &lt;= 'Z'))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_mangled_char</name><parameter_list>(<parameter><type><name>CHAR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_ALPHA (CHAR) || IS_DIGIT (CHAR) || (CHAR) == '_' || (CHAR) == '.' || (CHAR) == '$')</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>program_name</name></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_usage</name> <parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s [options] [names ...]\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" -h,--help Display this message.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" -p,--no-params Don't display function parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" -v,--verbose Produce verbose demanglings.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"If names are provided, they are demangled. Otherwise filters standard input.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name>exit_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= 
<expr><block>{
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-params"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"verbose"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>DMGL_PARAMS</name> <operator>|</operator> <name>DMGL_ANSI</name> <operator>|</operator> <name>DMGL_TYPES</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>program_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<do>do 
<block>{<block_content>
<expr_stmt><expr><name>opt_char</name> <operator>=</operator> <call><name>getopt_long</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hpv"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>opt_char</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> 
<expr_stmt><expr><call><name>print_usage</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>print_usage</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>options</name> <operator>&amp;=</operator> <operator>~</operator> <name>DMGL_PARAMS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>DMGL_VERBOSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
while <condition>(<expr><name>opt_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>==</operator> <name>argc</name></expr>)</condition> 

<block>{<block_content>
<decl_stmt><decl><type><name>dyn_string_t</name></type> <name>mangled</name> <init>= <expr><call><name>dyn_string_new</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_mangled_char</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dyn_string_append_char</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>dyn_string_length</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>__cxa_demangle</name> <argument_list>(<argument><expr><call><name>dyn_string_buf</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>cplus_demangle_v3</name> <argument_list>(<argument><expr><call><name>dyn_string_buf</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>dyn_string_buf</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dyn_string_clear</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dyn_string_delete</name> <argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>optind</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>__cxa_demangle</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>cplus_demangle_v3</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed: %s (status %d)\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
