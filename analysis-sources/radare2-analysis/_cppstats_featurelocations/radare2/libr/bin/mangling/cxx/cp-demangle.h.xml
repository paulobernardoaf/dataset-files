<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\mangling\cxx\cp-demangle.h">


































<struct>struct <name>demangle_operator_info</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>args</name></decl>;</decl_stmt>
}</block>;</struct>



<enum>enum <name>d_builtin_type_print</name>
<block>{

<decl><name>D_PRINT_DEFAULT</name></decl>,

<decl><name>D_PRINT_INT</name></decl>,

<decl><name>D_PRINT_UNSIGNED</name></decl>,

<decl><name>D_PRINT_LONG</name></decl>,

<decl><name>D_PRINT_UNSIGNED_LONG</name></decl>,

<decl><name>D_PRINT_LONG_LONG</name></decl>,

<decl><name>D_PRINT_UNSIGNED_LONG_LONG</name></decl>,

<decl><name>D_PRINT_BOOL</name></decl>,

<decl><name>D_PRINT_FLOAT</name></decl>,

<decl><name>D_PRINT_VOID</name></decl>
}</block>;</enum>



<struct>struct <name>demangle_builtin_type_info</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>java_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>java_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>d_builtin_type_print</name></name></type> <name>print</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>d_info</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>comps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_comp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_comps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>subs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_subs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type><name>last_name</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>expansion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_expression</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_conversion</name></decl>;</decl_stmt>
}</block>;</struct>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_peek_char</name><parameter_list>(<parameter><type><name>di</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((di)-&gt;n))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DEMANGLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_peek_next_char</name><parameter_list>(<parameter><type><name>di</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((di)-&gt;n[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_advance</name><parameter_list>(<parameter><type><name>di</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((di)-&gt;n += (i))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_check_char</name><parameter_list>(<parameter><type><name>di</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d_peek_char(di) == c ? ((di)-&gt;n++, 1) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_next_char</name><parameter_list>(<parameter><type><name>di</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d_peek_char(di) == '\0' ? '\0' : *((di)-&gt;n++))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_str</name><parameter_list>(<parameter><type><name>di</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((di)-&gt;n)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DEMANGLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type>
<name>d_peek_next_char</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>di</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>di</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>d_advance</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>di</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_STATIC_IF_GLIBCPP_V3</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_STATIC_IF_GLIBCPP_V3</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IN_GLIBCPP_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>demangle_operator_info</name></name></type> <name><name>cplus_demangle_operators</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_BUILTIN_TYPE_COUNT</name></cpp:macro> <cpp:value>(33)</cpp:value></cpp:define>

<expr_stmt><expr><name>CP_STATIC_IF_GLIBCPP_V3</name>
<specifier>const</specifier> struct <name>demangle_builtin_type_info</name>
<name><name>cplus_demangle_builtin_types</name><index>[<expr><name>D_BUILTIN_TYPE_COUNT</name></expr>]</index></name></expr>;</expr_stmt>

<function_decl><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>cplus_demangle_mangled_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CP_STATIC_IF_GLIBCPP_V3</name>
<name><name>struct</name> <name>demangle_component</name></name> <modifier>*</modifier></type>
<name>cplus_demangle_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>cplus_demangle_init_info</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>d_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CP_STATIC_IF_GLIBCPP_V3</name></cpp:undef>
</unit>
