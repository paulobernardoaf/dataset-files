<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_menuet.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENUET_VERSION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x[7]</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
db 'MENUET00' ; 8 byte id
dd 38 ; required os
dd START ; program start
dd I_END ; image size
dd 0x100000 ; reguired amount of memory
dd 0x00000000 ; reserved=no extended header

org 0x0
db 'MENUET01' ; 8 byte id
dd 1 ; header version
dd START ; program start
dd I_END ; program image size
dd 0x1000 ; required amount of memory
dd 0x1000 ; esp
dd 0, 0 ; no parameters, no path

0 db 'MENUET02'
8 dd 0x01
12 dd __start
16 dd __iend
20 dd __bssend
24 dd __stack
28 dd __cmdline
32 dd __pgmname
36 dd 0x0; tls map
40 dd __idata_start; ÑÐµÐºÑÐ¸Ñ .import
44 dd __idata_end
48 dd main

db 'MENUET02'
dd 1
dd start
dd i_end
dd mem
dd mem
dd cmdline
dd path
dd 0

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MENUET0"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported MENUET version header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><call><name>check_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>menuetEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>MENUET_VERSION</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">44</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry</name> <init>= <expr><call><name>menuetEntry</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <call><name>baddr</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <literal type="number">4096</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <call><name>baddr</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MENUET_VERSION</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"idata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>idata_start</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>idata_end</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">44</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>idata_end</name> <operator>-</operator> <name>idata_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <literal type="number">4096</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <call><name>baddr</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name><modifier>*</modifier></type> <name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"menuet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"MenuetOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"kolibri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>info</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>R_BIN_P9</name></expr></cpp:if>


<function><type><specifier>static</specifier> <name>RBuffer</name><modifier>*</modifier></type> <name>create</name><parameter_list>(<parameter><decl><type><name>RBin</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codelen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>RBinArchOptions</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_bytes(buf,(const ut8*)(x),y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut32(buf,x)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"MENUET01"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>codelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_menuet</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"menuet"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Menuet/KolibriOS bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <operator>&amp;</operator><name>create</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_menuet</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
