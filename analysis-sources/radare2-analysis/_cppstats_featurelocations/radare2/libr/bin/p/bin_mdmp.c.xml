<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_mdmp.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdmp/mdmp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>get_sdb</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>kv</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_mdmp_free</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>r_bin_mdmp_obj</name><operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe32_r_bin_mdmp_pe_get_entrypoint</name> <argument_list>(<argument><expr><name>pe32_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe64_r_bin_mdmp_pe_get_entrypoint</name> <argument_list>(<argument><expr><name>pe64_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>claimed_checksum</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>check_sum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <ternary><condition><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mdmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rpath</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"MDMP (MiniDump crash report data)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_lit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp.flags"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp.streams"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>number_of_streams</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>processor_architecture</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MDMP_PROCESSOR_ARCHITECTURE_INTEL</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"i386"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MDMP_PROCESSOR_ARCHITECTURE_ARM</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ARM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MDMP_PROCESSOR_ARCHITECTURE_IA64</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"IA64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"IA64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MDMP_PROCESSOR_ARCHITECTURE_AMD64</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"AMD64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>product_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MDMP_VER_NT_WORKSTATION</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Windows NT Workstation %d.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>build_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MDMP_VER_NT_DOMAIN_CONTROLLER</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Windows NT Server Domain Controller %d.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>build_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MDMP_VER_NT_SERVER</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Windows NT Server %d.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name><operator>-&gt;</operator><name>build_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>libs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_lib_t</name></name> <modifier>*</modifier></type><name>libs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>



<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>libs</name> <operator>=</operator> <call><name>Pe32_r_bin_pe_get_libs</name> <argument_list>(<argument><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"[0x%.08x] - %s"</literal></expr></argument>, <argument><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>libs</name> <operator>=</operator> <call><name>Pe64_r_bin_pe_get_libs</name> <argument_list>(<argument><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"[0x%.08"</literal><name>PFMT64x</name><literal type="string">"] - %s"</literal></expr></argument>, <argument><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_bin_mdmp_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor</name></name> <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor64</name></name> <modifier>*</modifier></type><name>memory64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_module</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_string</name></name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe_secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>it0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memories</argument>, <argument>it</argument>, <argument>memory</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Memory_Section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name><name>memory</name><operator>-&gt;</operator><name>memory</name></name><operator>)</operator><operator>.</operator><name>rva</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name><name>memory</name><operator>-&gt;</operator><name>memory</name></name><operator>)</operator><operator>.</operator><name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>start_of_memory_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <operator>(</operator><name><name>memory</name><operator>-&gt;</operator><name>memory</name></name><operator>)</operator><operator>.</operator><name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>has_strings</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>r_bin_mdmp_get_perm</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>base_rva</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memories64.memories</argument>, <argument>it</argument>, <argument>memory64</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Memory_Section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>memory64</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>memory64</name><operator>-&gt;</operator><name>start_of_memory_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>memory64</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>has_strings</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>r_bin_mdmp_get_perm</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>memory64</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.modules</argument>, <argument>it</argument>, <argument>module</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>module_name_rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>minidump_string</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>module_name_rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator>struct <name>minidump_string</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr_name_len</name> <init>= <expr><operator>(</operator><name><name>str</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr_name_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ptr_name_len</name></expr></argument> &gt;</argument_list></name> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>module_name_rva</name></name> <operator>+</operator> <name><name>str</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_utf16_to_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_mdmp_get_paddr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>has_strings</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it0</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name> <operator>&amp;&amp;</operator> <name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pe_secs</name> <operator>=</operator> <call><name>Pe32_r_bin_mdmp_pe_get_sections</name><argument_list>(<argument><expr><name>pe32_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pe_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>pe_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it0</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name> <operator>&amp;&amp;</operator> <name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pe_secs</name> <operator>=</operator> <call><name>Pe64_r_bin_mdmp_pe_get_sections</name><argument_list>(<argument><expr><name>pe64_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pe_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>pe_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INFO] Parsing data sections for large dumps can take time, "</literal>
<literal type="string">"please be patient (but if strings ain't your thing try with "</literal>
<literal type="string">"-z)!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>mem</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_location_descriptor</name></name> <modifier>*</modifier></type><name>location</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor64</name></name> <modifier>*</modifier></type><name>module64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_info</name></name> <modifier>*</modifier></type><name>mem_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinMem</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>a_protect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_mem_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>



<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memories</argument>, <argument>it</argument>, <argument>module</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinMem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>start_of_memory_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><name>location</name></expr>?</condition><then> <expr><name><name>location</name><operator>-&gt;</operator><name>data_size</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perms</name></name> <operator>=</operator> <call><name>r_bin_mdmp_get_perm</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name>type</name> <operator>=</operator> <name>a_protect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem_info</name> <operator>=</operator> <call><name>r_bin_mdmp_get_mem_info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_protect</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>allocation_protect</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>location</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>module</name><operator>-&gt;</operator><name>memory</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"paddr=0x%08"</literal><name>PFMT64x</name><literal type="string">" state=0x%08"</literal><name>PFMT64x</name>
<literal type="string">" type=0x%08"</literal><name>PFMT64x</name><literal type="string">" allocation_protect=0x%08"</literal><name>PFMT64x</name><literal type="string">" Memory_Section"</literal></expr></argument>,
<argument><expr><name><name>location</name><operator>-&gt;</operator><name>rva</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>a_protect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>base_rva</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memories64.memories</argument>, <argument>it</argument>, <argument>module64</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinMem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>module64</name><operator>-&gt;</operator><name>start_of_memory_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>module64</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perms</name></name> <operator>=</operator> <call><name>r_bin_mdmp_get_perm</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name>type</name> <operator>=</operator> <name>a_protect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem_info</name> <operator>=</operator> <call><name>r_bin_mdmp_get_mem_info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_protect</name> <operator>=</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>allocation_protect</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"paddr=0x%08"</literal><name>PFMT64x</name><literal type="string">" state=0x%08"</literal><name>PFMT64x</name>
<literal type="string">" type=0x%08"</literal><name>PFMT64x</name><literal type="string">" allocation_protect=0x%08"</literal><name>PFMT64x</name><literal type="string">" Memory_Section"</literal></expr></argument>,
<argument><expr><name>index</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>a_protect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>module64</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>relocs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name></name> <operator>&amp;&amp;</operator> <name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>relocs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>relocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name></name> <operator>&amp;&amp;</operator> <name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>relocs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>relocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>imports</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_import_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe32_r_bin_mdmp_pe_get_imports</name> <argument_list>(<argument><expr><name>pe32_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe64_r_bin_mdmp_pe_get_imports</name> <argument_list>(<argument><expr><name>pe64_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_import_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_mdmp_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it</argument>, <argument>pe32_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe32_r_bin_mdmp_pe_get_symbols</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></argument>, <argument><expr><name>pe32_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it</argument>, <argument>pe64_bin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>Pe64_r_bin_mdmp_pe_get_symbols</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></argument>, <argument><expr><name>pe64_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>MDMP_MAGIC</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_mdmp</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mdmp"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Minidump format r_bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <name>entries</name></expr>,
<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,
<expr><operator>.</operator><name>imports</name> <operator>=</operator> <operator>&amp;</operator><name>imports</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>mem</name> <operator>=</operator> <operator>&amp;</operator><name>mem</name></expr>,
<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,
<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_mdmp</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
