<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_xtr_dyldcache.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0/dyldcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0/mach0.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>RBinXtrData</name> <modifier>*</modifier></type> <name>extract</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>extractall</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RBinXtrData</name> <modifier>*</modifier></type> <name>oneshot</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>oneshotall</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dyld"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_xtr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>xtr_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>r_bin_dyldcache_obj_t</name><operator>*</operator><operator>)</operator><name>xtr_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free_xtr</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name> <operator>=</operator> <call><name>r_bin_dyldcache_new</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>extractall</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlib</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>extract</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nlib</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_xtrdata_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_xtrdata_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nlib</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>extract</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_metadata_info_from_hdr</name><argument_list>(<argument><expr><name>RBinXtrMetadata</name> <operator>*</operator><name>meta</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name> <argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cputype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_bits_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cpusubtype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_filetype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RBinXtrData</name> <modifier>*</modifier></type><name>extract</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <modifier>*</modifier><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_lib_t</name></name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_bin_dyldcache_extract</name> <argument_list>(
<argument><expr><operator>(</operator>struct <name>r_bin_dyldcache_obj_t</name><operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lib</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinXtrMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><call><name>R_NEW0</name><argument_list>(<argument><expr><name>RBinXtrMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>metadata</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fill_metadata_info_from_hdr</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_dydlcache_get_libname</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>libname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_xtrdata_new</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>nlib</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinXtrData</name> <modifier>*</modifier></type><name>oneshot</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name> <modifier>*</modifier></type><name>xtr_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_lib_t</name></name> <modifier>*</modifier></type><name>lib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <modifier>*</modifier><name>hdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xtr_obj</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>r_bin_dyldcache_extract</name> <argument_list>(<argument><expr><name>xtr_obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_xtr</name> <argument_list>(<argument><expr><name>xtr_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinXtrMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinXtrMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>metadata</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fill_metadata_info_from_hdr</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_dydlcache_get_libname</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>libname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_xtrdata_new</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nlib</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>oneshotall</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlib</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>oneshot</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nlib</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_xtrdata_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_xtrdata_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nlib</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>oneshot</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinXtrPlugin</name></type> <name>r_bin_xtr_plugin_xtr_dyldcache</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xtr.dyldcache"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"dyld cache bin extractor plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>load</name> <operator>=</operator> <operator>&amp;</operator><name>load</name></expr>,
<expr><operator>.</operator><name>extract</name> <operator>=</operator> <operator>&amp;</operator><name>extract</name></expr>,
<expr><operator>.</operator><name>extractall</name> <operator>=</operator> <operator>&amp;</operator><name>extractall</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>extract_from_bytes</name> <operator>=</operator> <operator>&amp;</operator><name>oneshot</name></expr>,
<expr><operator>.</operator><name>extractall_from_bytes</name> <operator>=</operator> <operator>&amp;</operator><name>oneshotall</name></expr>,
<expr><operator>.</operator><name>free_xtr</name> <operator>=</operator> <operator>&amp;</operator><name>free_xtr</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN_XTR</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_xtr_plugin_dyldcache</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
