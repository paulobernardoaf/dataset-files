<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_write_mach0.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0/mach0.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>machoPointers_t</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>ncmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ncmds_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sizeofcmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sizeofcmds_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lastcmd_off</name></decl>;</decl_stmt>
}</block></struct></type> <name>MachoPointers</name>;</typedef>

<function><type><specifier>static</specifier> <name>MachoPointers</name></type> <name>findLastCommand</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MachoPointers</name></type> <name>mp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mp</name><operator>.</operator><name>ncmds</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ncmds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>.</operator><name>ncmds_off</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>.</operator><name>sizeofcmds</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>sizeofcmds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>.</operator><name>sizeofcmds_off</name></name> <operator>=</operator> <literal type="number">0x14</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>off</name> <operator>=</operator> <literal type="number">0x20</literal> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_at</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mp</name><operator>.</operator><name>ncmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>loadc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>loadc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>loadc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>loadc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (lc) at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>loadc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mp</name><operator>.</operator><name>lastcmd_off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<return>return <expr><name>mp</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sample_dylib</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
<expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name> <name>MACH0_</name></type>(<name>write_addlib</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MachoPointers</name></type> <name>mp</name> <init>= <expr><call><name>findLastCommand</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_of_lib</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ncmds</name> <init>= <expr><name><name>mp</name><operator>.</operator><name>ncmds</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>ncmds_off</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ncmds</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ncmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>sizeofcmds</name> <init>= <expr><name><name>mp</name><operator>.</operator><name>sizeofcmds</name></name> <operator>+</operator> <name>size_of_lib</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>sizeofcmds_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sizeofcmds</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sizeofcmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lib_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lib_len</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Adjusting cmdsize too long libname\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_of_lib</name> <operator>+=</operator> <name>lib_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size_of_lib</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>size_of_lib</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sample_dylib_name_off</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>lastcmd_off</name></name></expr></argument>, <argument><expr><name>sample_dylib</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>lastcmd_off</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>size_of_lib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>lastcmd_off</name></name> <operator>+</operator> <name>sample_dylib_name_off</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>lib</name></expr></argument>, <argument><expr><name>lib_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addlib</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>write_addlib</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>R_BIN_MACH064</name></expr></cpp:if>
<decl_stmt><decl><type><name>RBinWrite</name></type> <name>r_bin_write_mach0</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
.scn_resize = &amp;scn_resize,
.scn_perms = &amp;scn_perms,
.rpath_del = &amp;rpath_del,
.entry = &amp;chentry,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>addlib</name> <operator>=</operator> <operator>&amp;</operator><name>addlib</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
