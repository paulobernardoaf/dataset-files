<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_pe.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bin_pe.inc"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>length</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0x3d</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>+</operator> <literal type="number">26</literal> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"PL"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"PE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">0x18</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x0b\x01"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RBuffer</name><modifier>*</modifier></type> <name>create</name><parameter_list>(<parameter><decl><type><name>RBin</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codelen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>RBinArchOptions</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>hdrsize</name></decl>, <decl><type ref="prev"/><name>p_start</name></decl>, <decl><type ref="prev"/><name>p_opthdr</name></decl>, <decl><type ref="prev"/><name>p_sections</name></decl>, <decl><type ref="prev"/><name>p_lsrlc</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>baddr</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_bytes(buf,(const ut8*)(x),y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut16(buf,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut32(buf,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_nbytes(buf,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_write_at(buf,x,(const ut8*)(y),z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_tmp=r_buf_size (buf);Z(x);W(p_tmp,y,strlen(y))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"MZ\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"PE\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0x14c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_lsrlc</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0x103</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>p_opthdr</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0x10b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"\x08\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_sections</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>p_sections</name> <operator>-</operator> <name>p_opthdr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_lsrlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>p_start</name> <operator>=</operator> <literal type="number">0x7c</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>hdrsize</name> <operator>=</operator> <literal type="number">0x7c</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><call><name>R_ROUND</name> <argument_list>(<argument><expr><name>codelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>codelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>p_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>codelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>p_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>(</operator><call><name>R_ROUND</name> <argument_list>(<argument><expr><name>hdrsize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>R_ROUND</name> <argument_list>(<argument><expr><name>codelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><call><name>R_ROUND</name> <argument_list>(<argument><expr><name>hdrsize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>codelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>datalen</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: DATA section not support for PE yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>signature</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type> <argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier> <name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>r_pkcs7_cms_json</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>pj_drain</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_pkcs7_cms_to_string</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>fields</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWL</name><parameter_list>(<parameter><type><name>nam</name></type></parameter>,<parameter><type><name>siz</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_list_append (ret, r_bin_field_new (addr, addr, siz, nam, sdb_fmt ("0x%08x", val), fmt, false));</cpp:value></cpp:define>


<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier> <name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_header_offset</name></name></expr> ?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>rich_header_offset</name></name></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pe_image_rich_entry</name> <modifier>*</modifier></type><name>rich</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;rich_entries</argument>, <argument>it</argument>, <argument>rich</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_bin_field_new</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"RICH_ENTRY_NAME"</literal></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>rich</name><operator>-&gt;</operator><name>productName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"RICH_ENTRY_ID"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rich</name><operator>-&gt;</operator><name>productId</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"RICH_ENTRY_VERSION"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rich</name><operator>-&gt;</operator><name>minVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"RICH_ENTRY_TIMES"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>rich</name><operator>-&gt;</operator><name>timesUsed</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Machine"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"NumberOfSections"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSections</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"TimeDateStamp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>TimeDateStamp</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"PointerToSymbolTable"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>PointerToSymbolTable</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"NumberOfSymbols "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSymbols</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfOptionalHeader"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>SizeOfOptionalHeader</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Characteristics"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Characteristics</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Magic"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Magic</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MajorLinkerVersion"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorLinkerVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MinorLinkerVersion"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorLinkerVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfCode"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfCode</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfInitializedData"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfInitializedData</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfUninitializedData"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfUninitializedData</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"AddressOfEntryPoint"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>AddressOfEntryPoint</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"BaseOfCode"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>BaseOfCode</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"BaseOfData"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>BaseOfData</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"ImageBase"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>ImageBase</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SectionAlignment"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SectionAlignment</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"FileAlignment"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>FileAlignment</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MajorOperatingSystemVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorOperatingSystemVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MinorOperatingSystemVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorOperatingSystemVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MajorImageVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorImageVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MinorImageVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorImageVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MajorSubsystemVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorSubsystemVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"MinorSubsystemVersion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorSubsystemVersion</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Win32VersionValue"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Win32VersionValue</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfImage"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfImage</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfHeaders"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeaders</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"CheckSum"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>CheckSum</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"Subsystem"</literal></expr></argument>,<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Subsystem</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"DllCharacteristics"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DllCharacteristics</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfStackReserve"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfStackReserve</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfStackCommit"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfStackCommit</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfHeapReserve"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeapReserve</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SizeOfHeapCommit"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeapCommit</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"LoaderFlags"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>LoaderFlags</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"NumberOfRvaAndSizes"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>NumberOfRvaAndSizes</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PE_IMAGE_DIRECTORY_ENTRIES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXPORT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_EXPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_EXPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_RESOURCE</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_RESOURCE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_RESOURCE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXCEPTION</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_EXCEPTION"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_EXCEPTION"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_SECURITY</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_SECURITY"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_SECURITY"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_BASERELOC</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_BASERELOC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_BASERELOC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_DEBUG</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_DEBUG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_DEBUG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_COPYRIGHT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_COPYRIGHT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_COPYRIGHT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_GLOBALPTR</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_GLOBALPTR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_GLOBALPTR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_TLS</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_TLS"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_TLS"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_IAT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_IAT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_IAT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</name></expr>:</case>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROWL</name> <argument_list>(<argument><expr><literal type="string">"SIZE_IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, \
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>header</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier> <name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_t</name></name> <modifier>*</modifier></type><name>rbin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"PE file header:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_NT_HEADERS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Signature : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_FILE_HEADERS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Machine : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" NumberOfSections : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" TimeDateStamp : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>TimeDateStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" PointerToSymbolTable : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>PointerToSymbolTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" NumberOfSymbols : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSymbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfOptionalHeader : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>SizeOfOptionalHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Characteristics : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Characteristics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_OPTIONAL_HEADERS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Magic : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MajorLinkerVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorLinkerVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MinorLinkerVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorLinkerVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfCode : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfInitializedData : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfInitializedData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfUninitializedData : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfUninitializedData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" AddressOfEntryPoint : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>AddressOfEntryPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" BaseOfCode : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>BaseOfCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" BaseOfData : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>BaseOfData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" ImageBase : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>ImageBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SectionAlignment : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SectionAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" FileAlignment : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>FileAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MajorOperatingSystemVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorOperatingSystemVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MinorOperatingSystemVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorOperatingSystemVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MajorImageVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorImageVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MinorImageVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorImageVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MajorSubsystemVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MajorSubsystemVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" MinorSubsystemVersion : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>MinorSubsystemVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Win32VersionValue : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Win32VersionValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfImage : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfHeaders : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" CheckSum : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>CheckSum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Subsystem : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Subsystem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" DllCharacteristics : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DllCharacteristics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfStackReserve : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfStackReserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfStackCommit : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfStackCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfHeapReserve : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeapReserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" SizeOfHeapCommit : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfHeapCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" LoaderFlags : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>LoaderFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" NumberOfRvaAndSizes : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>NumberOfRvaAndSizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pe_image_rich_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"RICH_FIELDS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;rich_entries</argument>, <argument>it</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Product: %d Name: %s Version: %d Times: %d\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>productId</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>productName</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>minVersion</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>timesUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PE_IMAGE_DIRECTORY_ENTRIES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXPORT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_EXPORT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_IMPORT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_RESOURCE</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_RESOURCE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXCEPTION</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_EXCEPTION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_SECURITY</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_SECURITY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_BASERELOC</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_BASERELOC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_DEBUG</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_DEBUG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_COPYRIGHT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_COPYRIGHT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_ARCHITECTURE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_GLOBALPTR</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_GLOBALPTR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_TLS</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_TLS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_IAT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_IAT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</name></expr>:</case>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" VirtualAddress : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Size : 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>r_bin_write_t</name></name></type> <name>r_bin_write_pe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_pe</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pe"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"PE bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,
<expr><operator>.</operator><name>binsym</name> <operator>=</operator> <operator>&amp;</operator><name>binsym</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,
<expr><operator>.</operator><name>signature</name> <operator>=</operator> <operator>&amp;</operator><name>signature</name></expr>,
<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,
<expr><operator>.</operator><name>imports</name> <operator>=</operator> <operator>&amp;</operator><name>imports</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <operator>&amp;</operator><name>header</name></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <operator>&amp;</operator><name>fields</name></expr>,
<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,
<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,
<expr><operator>.</operator><name>minstrlen</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <operator>&amp;</operator><name>create</name></expr>,
<expr><operator>.</operator><name>get_vaddr</name> <operator>=</operator> <operator>&amp;</operator><name>get_vaddr</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_write_pe</name></expr>,
<expr><operator>.</operator><name>hashes</name> <operator>=</operator> <operator>&amp;</operator><name>compute_hashes</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_pe</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
