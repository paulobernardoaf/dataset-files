<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_mach0.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../i/private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0/mach0.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"objc/mach0_classes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb/ht_uu.h&gt;</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>extern</specifier> <name>RBinWrite</name></type> <name>r_bin_write_mach0</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>get_sdb</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>bin</name></expr>?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>entitlements</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>bin_obj</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list> <name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_set_default</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>res</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_baddr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_segments</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinAddr</name> <modifier>*</modifier></type><name>newEntry</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>hpaddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>hpaddr</name></name> <operator>=</operator> <name>hpaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_constructors</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>secs</name> <init>= <expr><call><name>sections</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>secs</argument>, <argument>iter</argument>, <argument>sec</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_mod_fini_func"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_BIN_ENTRY_TYPE_FINI</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_mod_init_func"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_BIN_ENTRY_TYPE_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name><name>sec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;</operator> <name><name>sec</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"process_constructors: cannot process section %s\n"</literal></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name><name>sec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>addr32</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>newEntry</name> <argument_list>(<argument><expr><name><name>sec</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>addr32</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name><name>sec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr64</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>newEntry</name> <argument_list>(<argument><expr><name><name>sec</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>addr64</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addr_t</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_bits</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>entry</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_entrypoint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>hpaddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>haddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>process_constructors</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>_handle_arm_thumb</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>RBinSymbol</name> <operator>*</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FEATURE_SYMLIST</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr>?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_symbols_list</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>symbol_t</name></name> <modifier>*</modifier></type><name>syms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr>?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
const char *lang = "c"; 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>wordsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isStripped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>wordsize</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_bits</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>syms</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_symbols</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>symcache</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_imported</name></name> <operator>=</operator> <name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_imported</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>is_imported</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dn</name> <init>= <expr><call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>dname</name></name> <operator>=</operator> <name>dn</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>classname</name><index>[<expr><name>p</name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>classname</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>R_BIN_MACH0_SYMBOL_TYPE_LOCAL</name><operator>)</operator></expr>?</condition><then> <expr><name>R_BIN_BIND_LOCAL_STR</name></expr></then><else>: <expr><name>R_BIN_BIND_GLOBAL_STR</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>boffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cputype</name></name> <operator>==</operator> <name>CPU_TYPE_ARM</name> <operator>&amp;&amp;</operator> <name>wordsize</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_arm_thumb</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"radr://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>symcache</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"sym0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"found"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (!strncmp (ptr-&gt;name, "__Z", 3)) {
lang = "c++";
}
if (!strncmp (ptr-&gt;name, "type.", 5)) {
lang = "go";
} else if (!strcmp (ptr-&gt;name, "_rust_oom")) {
lang = "rust";
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>func_start</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>symstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>address</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>func_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>temp_end</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>func_start</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>func_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>symstr</name></expr></argument>, <argument><expr><literal type="string">"sym0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>temp_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>temp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>r_uleb128_decode</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>baddr</name></name> <operator>+</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_LOCAL_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cputype</name></name> <operator>==</operator> <name>CPU_TYPE_ARM</name> <operator>&amp;&amp;</operator> <name>wordsize</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_arm_thumb</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStripped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>symstr</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>symstr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">5</literal></expr></argument> , <argument><expr><literal type="string">"%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>symcache</name></expr></argument>, <argument><expr><name>symstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>isStripped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (bin-&gt;has_blocks_ext) {
lang = !strcmp (lang, "c++") ? "c++ blocks ext." : "c blocks ext.";
}
bin-&gt;lang = lang;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>isStripped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>|=</operator> <name>R_BIN_DBG_STRIPPED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>symcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>RBinImport</name> <modifier>*</modifier></type><name>import_from_name</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>rbin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>, <parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>imports_by_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>imports_by_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name>imports_by_name</name></expr></argument>, <argument><expr><name>orig_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>orig_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_objc_class</name> <init>= <expr><literal type="string">"_OBJC_CLASS_$"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_objc_class_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>_objc_class</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_objc_metaclass</name> <init>= <expr><literal type="string">"_OBJC_METACLASS_$"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_objc_metaclass_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>_objc_metaclass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><literal type="string">"FUNC"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_objc_class</name></expr></argument>, <argument><expr><name>_objc_class_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>_objc_class_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"OBJC_CLASS"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_objc_metaclass</name></expr></argument>, <argument><expr><name>_objc_metaclass_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>_objc_metaclass_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"OBJC_METACLASS"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>imports_by_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name>imports_by_name</name></expr></argument>, <argument><expr><name>orig_name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>imports</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>import_t</name></name> <modifier>*</modifier></type><name>imports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imports</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_imports</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_canary</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_retguard</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_sanitizers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_blocks_ext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>imports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>import_from_name</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></argument>, <argument><expr><name><name>imports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>imports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ord</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord</name></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord</name><index>[<expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__stack_chk_fail"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_canary</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__asan_init"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__tsan_init"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_sanitizers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_NSConcreteGlobalBlock"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>has_blocks_ext</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>relocs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>relocs</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_relocs</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_t</name></name> <modifier>*</modifier></type><name>reloc</name></decl>;</decl_stmt>
<macro><name>r_skiplist_foreach</name> <argument_list>(<argument>relocs</argument>, <argument>it</argument>, <argument>reloc</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reloc</name><operator>-&gt;</operator><name>external</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>additive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reloc</name><operator>-&gt;</operator><name>ord</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord</name></name> <operator>&amp;&amp;</operator> <name><name>reloc</name><operator>-&gt;</operator><name>ord</name></name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_by_ord</name><index>[<expr><name><name>reloc</name><operator>-&gt;</operator><name>ord</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reloc</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imp</name> <operator>=</operator> <call><name>import_from_name</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>reloc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_by_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>imp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>addend</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>addend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>r_skiplist_free</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>libs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lib_t</name></name> <modifier>*</modifier></type><name>libs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>libs</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_libs</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_class</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_canary</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>has_canary</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_retguard</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_sanitizers</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>has_sanitizers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dbg_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>lang</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>intrp</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_intrp</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>compiler</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mach0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_os</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"darwin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cputype</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cpusubtype</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_lit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_filetype</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>is_big_endian</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_crypto</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator>
<name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name><operator>)</operator><operator>-&gt;</operator><name>has_crypto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_bits</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_pi</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>is_pie</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_nx</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>has_nx</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_patch_reloc</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>RIOBind</name> <operator>*</operator><name>iob</name></expr></argument>, <argument><expr>struct <name>reloc_t</name> <operator>*</operator> <name>reloc</name></expr></argument>, <argument><expr><name>ut64</name> <name>symbol_at</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>pc</name> <init>= <expr><name><name>reloc</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ins_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cputype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CPU_TYPE_X86_64</name></expr>:</case> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>X86_64_RELOC_UNSIGNED</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>X86_64_RELOC_BRANCH</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: unsupported reloc type for X86_64 (%d), please file a bug.\n"</literal></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CPU_TYPE_ARM64</name></expr>:</case>
<case>case <expr><name>CPU_TYPE_ARM64_32</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CPU_TYPE_ARM</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: unsupported architecture for patching relocs, please file a bug. %s\n"</literal></expr></argument>, <argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cputype_from_hdr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><name>symbol_at</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reloc</name><operator>-&gt;</operator><name>pc_relative</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>symbol_at</name> <operator>-</operator> <name>pc</name> <operator>-</operator> <name>ins_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>iob</name><operator>-&gt;</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>iob</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>patch_relocs</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HtUU</name> <modifier>*</modifier></type><name>relocs_by_sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>gotr2desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>io</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier></type> <name>all_relocs</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_relocs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_relocs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>ext_relocs</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext_relocs</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_t</name></name> <modifier>*</modifier></type> <name>reloc</name></decl>;</decl_stmt>
<macro><name>r_skiplist_foreach</name> <argument_list>(<argument>all_relocs</argument>, <argument>it</argument>, <argument>reloc</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reloc</name><operator>-&gt;</operator><name>external</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ext_relocs</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>ut64</name></type> <name>num_ext_relocs</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>ext_relocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_ext_relocs</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: run r2 with -e io.cache=true to fix relocations in disassembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cdsz</name> <init>= <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name></name></expr> ?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n_vaddr</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name>num_ext_relocs</name> <operator>*</operator> <name>cdsz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>muri</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%"</literal> <name>PFMT64u</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>gotr2desc</name> <operator>=</operator> <call><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>open_at</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>muri</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>, <argument><expr><name>n_vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>muri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotr2desc</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>gotr2map</name> <init>= <expr><call><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>map_get</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>n_vaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotr2map</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gotr2map</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">".got.r2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>relocs_by_sym</name> <operator>=</operator> <call><name>ht_uu_new0</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><name>n_vaddr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>liter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ext_relocs</argument>, <argument>liter</argument>, <argument>reloc</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>sym_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sym_addr</name> <operator>=</operator> <call><name>ht_uu_find</name> <argument_list>(<argument><expr><name>relocs_by_sym</name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sym_addr</name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_uu_insert</name> <argument_list>(<argument><expr><name>relocs_by_sym</name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vaddr</name> <operator>+=</operator> <name>cdsz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_patch_reloc</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>, <argument><expr><name>sym_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>additive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imp</name> <operator>=</operator> <call><name>import_from_name</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>reloc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_by_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>sym_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>imp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ht_uu_free</name> <argument_list>(<argument><expr><name>relocs_by_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ext_relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_skiplist_free</name> <argument_list>(<argument><expr><name>all_relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ext_relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_skiplist_free</name> <argument_list>(<argument><expr><name>all_relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_desc_free</name> <argument_list>(<argument><expr><name>gotr2desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_uu_free</name> <argument_list>(<argument><expr><name>relocs_by_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>R_BIN_MACH064</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xce\xfa\xed\xfe"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xfe\xed\xfa\xce"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>create</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>RBinArchOptions</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_pagezero</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_main</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_dylinker</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_libsystem</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_linkedit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>filesize</name></decl>, <decl><type ref="prev"/><name>codeva</name></decl>, <decl><type ref="prev"/><name>datava</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ncmds</name></decl>, <decl><type ref="prev"/><name>cmdsize</name></decl>, <decl><type ref="prev"/><name>magiclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>p_codefsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_codeva</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_codesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_codepa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>p_datafsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_datava</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_datasz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_datapa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>p_cmdsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>baddr</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_arm</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Please use mach064 instead of mach0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_bytes(buf,(const ut8*)(x),y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut32(buf,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_nbytes(buf,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_write_at(buf,x,(const ut8*)(y),z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_tmp=r_buf_size (buf);Z(x);W(p_tmp,y,strlen(y))</cpp:value></cpp:define>


<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"\xce\xfa\xed\xfe"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>is_arm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncmds</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ncmds</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pagezero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncmds</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_dylinker</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncmds</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_linkedit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncmds</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_libsystem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ncmds</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>ncmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_cmdsize</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>magiclen</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_pagezero</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__PAGEZERO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x00001000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">124</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_codefsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_codeva</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_codesz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_codepa</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">124</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><literal type="string">"__TEXT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_datafsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_datava</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_datasz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_datapa</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_dylinker</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_linkedit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"__LINKEDIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x00001000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0xb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Z</name> <argument_list>(<argument><expr><literal type="number">18</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dyld</name> <init>= <expr><literal type="string">"/usr/lib/dyld"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dyld_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>dyld</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="number">0xe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>dyld_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>dyld_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WZ</name><argument_list>(<argument><expr><name>dyld_len</name></expr></argument>, <argument><expr><name>dyld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>use_libsystem</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><literal type="string">"/usr/lib/libSystem.B.dylib"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lib_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">24</literal> <operator>+</operator> <name>lib_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><name>lib_len</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_main</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0x80000028</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>is_arm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name> <argument_list>(<argument><expr><literal type="number">17</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>WZ</name> <argument_list>(<argument><expr><literal type="number">4096</literal> <operator>-</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdsize</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>magiclen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>codeva</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>datava</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>clen</name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_entry</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codeva</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_cmdsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdsize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filesize</name> <operator>=</operator> <name>magiclen</name> <operator>+</operator> <name>cmdsize</name> <operator>+</operator> <name>clen</name> <operator>+</operator> <name>dlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_codefsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_codefsz</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_codeva</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codeva</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_codesz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>codeva</name> <operator>-</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_codepa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_datafsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_datava</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datava</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_datasz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>datava</name> <operator>-</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_datapa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinAddr</name> <modifier>*</modifier></type><name>binsym</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_SYM_MAIN</name></expr>:</case>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_main</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ret</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>sections</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>sections</name></name> <operator>=</operator> <call><name>sections</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bf-&gt;o-&gt;sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>off</name> <operator>+</operator> <name>len</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_mach0</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mach0"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"mach0 bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,
<expr><operator>.</operator><name>binsym</name> <operator>=</operator> <operator>&amp;</operator><name>binsym</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,
<expr><operator>.</operator><name>signature</name> <operator>=</operator> <operator>&amp;</operator><name>entitlements</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,
<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,
<expr><operator>.</operator><name>imports</name> <operator>=</operator> <operator>&amp;</operator><name>imports</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_headerfields</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_fields</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,
<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,
<expr><operator>.</operator><name>patch_relocs</name> <operator>=</operator> <operator>&amp;</operator><name>patch_relocs</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <operator>&amp;</operator><name>create</name></expr>,
<expr><operator>.</operator><name>classes</name> <operator>=</operator> <operator>&amp;</operator><call><name>MACH0_</name><argument_list>(<argument><expr><name>parse_classes</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_write_mach0</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_mach0</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
