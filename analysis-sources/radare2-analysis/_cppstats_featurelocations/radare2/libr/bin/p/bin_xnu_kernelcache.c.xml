<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_xnu_kernelcache.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_syscall.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_MACH064</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/mach0/mach0.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/xnu/r_cf_dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/xnu/mig_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/mach0/mach064_is_kernelcache.c"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ROnRebaseFunc</name>) <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_RKernelCacheObj</name> <block>{
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>prelink_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_RKextIndex</name></name> <modifier>*</modifier></type><name>kexts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_RRebaseInfo</name></name> <modifier>*</modifier></type><name>rebase_info</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>original_io_read</name>)<parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>rebase_info_populated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rebasing_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>kexts_initialized</name></decl>;</decl_stmt>
}</block></struct></type> <name>RKernelCacheObj</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RFileRange</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>RFileRange</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RPrelinkRange</name> <block>{
<decl_stmt><decl><type><name>RFileRange</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>RPrelinkRange</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RStubsInfo</name> <block>{
<decl_stmt><decl><type><name>RFileRange</name></type> <name>got</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFileRange</name></type> <name>stubs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>got_addr</name></decl>;</decl_stmt>
}</block></struct></type> <name>RStubsInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RKext</name> <block>{
<decl_stmt><decl><type><name>RFileRange</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFileRange</name></type> <name>text_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>mod_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>own_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>RKext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RKextIndex</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>RKextIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RRebaseInfo</name> <block>{
<decl_stmt><decl><type><name>RFileRange</name> <modifier>*</modifier></type><name>ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>multiplier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>kernel_base</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRebaseInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RRebaseCtx</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>, <name>eob</name>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
}</block></struct></type> <name>RRebaseCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RParsedPointer</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>address</name></decl>;</decl_stmt>
}</block></struct></type> <name>RParsedPointer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RKmodInfo</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">0x41</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt>
}</block></struct></type> <name>RKmodInfo</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXT_SHORT_NAME_FROM_SECTION</name><parameter_list>(<parameter><type><name>io_section</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({char *result = NULL;char *clone = strdup (io_section-&gt;name);char *cursor = strstr (clone, "__");if (cursor) {cursor--;*cursor = 0;cursor--;cursor = strrchr (cursor, '.');if (cursor) {*cursor = 0;cursor = strrchr (cursor, '.');if (cursor) {result = strdup (cursor + 1);R_FREE (clone);}}}result ? result : clone;})</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXT_INFER_VSIZE</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((i+1 &lt; index-&gt;length) ? index-&gt;entries[i+1]-&gt;vaddr - index-&gt;entries[i]-&gt;vaddr : UT64_MAX)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXT_INFER_PSIZE</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((i+1 &lt; index-&gt;length) ? index-&gt;entries[i+1]-&gt;range.offset - index-&gt;entries[i]-&gt;range.offset : UT64_MAX)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_K_CONSTRUCTOR_TO_ENTRY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_K_CONSTRUCTOR_TO_SYMBOL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_PPTR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_ptr (p, obj)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_RPTR</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_ptr (buf, obj)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>p_ptr</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>r_ptr</name> <parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRebaseInfo</name> <modifier>*</modifier></type><name>r_rebase_info_new_from_mach0</name><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>cache_buf</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_rebase_info_free</name><parameter_list>(<parameter><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_rebase_info_populate</name><parameter_list>(<parameter><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>iterate_rebase_list</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>multiplier</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_offset</name></decl></parameter>, <parameter><decl><type><name>ROnRebaseFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>r_rebase_offset_to_paddr</name> <parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>swizzle_io_read</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kernelcache_io_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>r_parse_pointer</name><parameter_list>(<parameter><decl><type><name>RParsedPointer</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>on_rebase_pointer</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RRebaseCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rebase_buffer</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>RPrelinkRange</name> <modifier>*</modifier></type><name>get_prelink_info_range_from_mach0</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>filter_kexts</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>carve_kexts</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sections_from_mach0</name><argument_list>(<argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>prefix</name></expr></argument>, <argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_data_sections</name><parameter_list>(<parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sect</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>symbols_from_mach0</name><argument_list>(<argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>int</name> <name>ordinal</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>resolve_syscalls</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>enosys_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>resolve_mig_subsystem</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>symbols_from_stubs</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>kernel_syms_by_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>RStubsInfo</name> <modifier>*</modifier></type><name>get_stubs_info</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prot2perm</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_free</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_fill_text_range</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kexts_sort_vaddr_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>create_kext_mach0</name><argument_list>(<argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>RKext</name> <operator>*</operator><name>kext</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_kext_index_foreach</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (index)for (i = 0; i &lt; index-&gt;length &amp;&amp; (item = index-&gt;entries[i], 1); i++)</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>RKextIndex</name> <modifier>*</modifier></type><name>r_kext_index_new</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>kexts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_index_free</name><parameter_list>(<parameter><decl><type><name>RKextIndex</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RKext</name> <modifier>*</modifier></type><name>r_kext_index_vget</name><parameter_list>(<parameter><decl><type><name>RKextIndex</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_kmod_init_term</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier><modifier>*</modifier></type><name>inits</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier><modifier>*</modifier></type><name>terms</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>create_initterm_syms</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>pointers</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>process_constructors</name><argument_list>(<argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>bool</name> <name>is_first</name></expr></argument>, <argument><expr><name>int</name> <name>mode</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>prefix</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>RBinAddr</name> <modifier>*</modifier></type><name>newEntry</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>haddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ensure_kexts_initialized</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_kernel_cache_free</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>pending_bin_files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>fbuf</name> <init>= <expr><call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list> <name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_set_default</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>main_mach0</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>main_mach0</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><call><name>r_rebase_info_new_from_mach0</name> <argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>main_mach0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPrelinkRange</name> <modifier>*</modifier></type><name>prelink_range</name> <init>= <expr><call><name>get_prelink_info_range_from_mach0</name> <argument_list>(<argument><expr><name>main_mach0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prelink_range</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RKernelCacheObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prelink_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>prelink_info</name> <init>= <expr><call><name>r_cf_value_dict_parse</name> <argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>,
<argument><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>R_CF_OPTION_SKIP_NSDATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prelink_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prelink_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pending_bin_files</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prelink_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prelink_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name> <operator>=</operator> <name>main_mach0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name></name> <operator>=</operator> <name>rebase_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>prelink_info</name></name> <operator>=</operator> <name>prelink_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name> <operator>=</operator> <name>fbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pa2va_exec</name></name> <operator>=</operator> <name><name>prelink_range</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pa2va_data</name></name> <operator>=</operator> <name><name>prelink_range</name><operator>-&gt;</operator><name>pa2va_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rebase_info</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>swizzle_io_read</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>main_mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ensure_kexts_initialized</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kexts_initialized</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>kexts_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>kexts</name> <init>= <expr><call><name>filter_kexts</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kexts</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_length</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kexts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kexts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kexts</name> <operator>=</operator> <call><name>carve_kexts</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>kexts</name></name> <operator>=</operator> <call><name>r_kext_index_new</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RPrelinkRange</name> <modifier>*</modifier></type><name>get_prelink_info_range_from_mach0</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPrelinkRange</name> <modifier>*</modifier></type><name>prelink_range</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPrelinkRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prelink_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__PRELINK_INFO.__info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>incomplete</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__PRELINK_TEXT.__text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>pa2va_exec</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>-</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>incomplete</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__PRELINK_DATA.__data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prelink_range</name><operator>-&gt;</operator><name>pa2va_data</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>-</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>incomplete</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incomplete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prelink_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>prelink_range</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>filter_kexts</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>kext_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;prelink_info-&gt;pairs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"_PrelinkInfoDictionary"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kext_array</name> <operator>=</operator> <operator>(</operator><name>RCFValueArray</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kext_array</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>kexts</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <operator>&amp;</operator><name>r_kext_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kexts</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_sorted</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>prev_kext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>kext_item</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>kext_array-&gt;values</argument>, <argument>iter</argument>, <argument>kext_item</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RKext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kext_incomplete</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>internal_iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>kext_item-&gt;pairs</argument>, <argument>internal_iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"CFBundlePackageType"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_CF_STRING</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><operator>(</operator><name>RCFValueString</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"KEXT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kext_incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"_PrelinkExecutableLoadAddr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CF_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kext_incomplete</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RCFValueInteger</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"_PrelinkExecutableSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kext_incomplete</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CF_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RCFValueInteger</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"_PrelinkKmodInfo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CF_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kext_incomplete</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>mod_info</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RCFValueInteger</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>mod_info</name></name> <operator>-=</operator> <name><name>obj</name><operator>-&gt;</operator><name>pa2va_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"CFBundleIdentifier"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CF_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kext_incomplete</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RCFValueString</name><operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>kext_incomplete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_kext</name> <operator>&amp;&amp;</operator> <name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <name><name>prev_kext</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_sorted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_kext</name> <operator>=</operator> <name>kext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name> <operator>=</operator> <call><name>create_kext_mach0</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_kext_fill_text_range</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_sorted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"SORTING KEXTs...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>, <argument><expr><name>kexts_sort_vaddr_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>kexts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>p_ptr</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RParsedPointer</name></type> <name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_parse_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>decorated_addr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ptr</name><operator>.</operator><name>address</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_ptr</name> <parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>decorated_addr</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>K_PPTR</name> <argument_list>(<argument><expr><name>decorated_addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>carve_kexts</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_exec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pa2va_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>kmod_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kmod_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>kmod_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kmod_info_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKmodInfo</name> <modifier>*</modifier></type><name>all_infos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&amp;&amp;</operator> <name>incomplete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT_EXEC.__text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pa2va_exec</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>-</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__DATA.__data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pa2va_data</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>-</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__PRELINK_INFO.__kmod_start"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kmod_start</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kmod_end</name> <operator>=</operator> <name>kmod_start</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__PRELINK_INFO.__kmod_info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kmod_info</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kmod_info_end</name> <operator>=</operator> <name>kmod_info</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incomplete</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>kexts</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <operator>&amp;</operator><name>r_kext_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kexts</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_kmod_info</name> <init>= <expr><operator>(</operator><name>kmod_info_end</name> <operator>-</operator> <name>kmod_info</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_kmod_info</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>all_infos</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RKmodInfo</name></expr></argument>, <argument><expr><name>n_kmod_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_infos</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n_kmod_info</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry_offset</name> <init>= <expr><name>j</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>kmod_info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>entry_offset</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>kmod_info_paddr</name> <init>= <expr><call><name>K_RPTR</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pa2va_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>field_name</name> <init>= <expr><name>kmod_info_paddr</name> <operator>+</operator> <literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>field_start</name> <init>= <expr><name>kmod_info_paddr</name> <operator>+</operator> <literal type="number">0xb4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>field_start</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <call><name>K_RPTR</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0x40</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>ut64</name></type> <name>cursor</name> <init>= <expr><name>kmod_start</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>cursor</name> <operator>&lt;</operator> <name>kmod_end</name></expr>;</condition> <incr><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RKext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kext</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>K_RPTR</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name>pa2va_exec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name> <operator>=</operator> <call><name>create_kext_mach0</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_kext_fill_text_range</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>pa2va_exec</name></name> <operator>=</operator> <name>pa2va_exec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>pa2va_data</name></name> <operator>=</operator> <name>pa2va_data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>text_start</name> <init>= <expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>text_end</name> <init>= <expr><name>text_start</name> <operator>+</operator> <name><name>kext</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text_start</name> <operator>==</operator> <name>text_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n_kmod_info</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text_start</name> <operator>&gt;</operator> <name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>||</operator> <name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&gt;=</operator> <name>text_end</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>all_infos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>own_name</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>all_infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kexts</name></expr>;</return>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>all_infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_free</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kext</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kext</name><operator>-&gt;</operator><name>own_name</name></name> <operator>&amp;&amp;</operator> <name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_fill_text_range</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT_EXEC.__text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kexts_sort_vaddr_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>A</name> <init>= <expr><operator>(</operator><name>RKext</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><operator>(</operator><name>RKext</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vaddr_compare</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>B</name><operator>-&gt;</operator><name>vaddr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vaddr_compare</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>A</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>B</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>vaddr_compare</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RKextIndex</name> <modifier>*</modifier></type><name>r_kext_index_new</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>kexts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kexts</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>kexts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKextIndex</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RKextIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>length</name> <operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>RKext</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>kexts</argument>, <argument>iter</argument>, <argument>kext</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>kext</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_kext_index_free</name><parameter_list>(<parameter><decl><type><name>RKextIndex</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl>;</decl_stmt>
<macro><name>r_kext_index_foreach</name> <argument_list>(<argument>index</argument>, <argument>i</argument>, <argument>kext</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_free</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RKext</name> <modifier>*</modifier></type><name>r_kext_index_vget</name><parameter_list>(<parameter><decl><type><name>RKextIndex</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>imid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imax</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>imin</name> <operator>&lt;</operator> <name>imax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imid</name> <operator>=</operator> <operator>(</operator><name>imin</name> <operator>+</operator> <name>imax</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>imid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>entry</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>&lt;=</operator> <name>vaddr</name> <operator>||</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name>vaddr</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <name>imid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>imax</name> <operator>=</operator> <name>imid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>minEntry</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>imin</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imax</name> <operator>==</operator> <name>imin</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>minEntry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;=</operator> <name>vaddr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>minEntry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>minEntry</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>&gt;</operator> <name>vaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>minEntry</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>create_kext_mach0</name><argument_list>(<argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>RKext</name> <operator>*</operator><name>kext</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new_slice</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list> <name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>header_at</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mach0</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>mach0</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>kobj</name> <init>= <expr><operator>(</operator><name>RKernelCacheObj</name><operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry_vaddr</name> <init>= <expr><name><name>kobj</name><operator>-&gt;</operator><name>mach0</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kobj</name><operator>-&gt;</operator><name>pa2va_exec</name></name> <operator>&lt;=</operator> <name>entry_vaddr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry_paddr</name> <init>= <expr><name>entry_vaddr</name> <operator>-</operator> <name><name>kobj</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>newEntry</name> <argument_list>(<argument><expr><name>entry_paddr</name></expr></argument>, <argument><expr><name>entry_vaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>process_constructors</name> <argument_list>(<argument><expr><name>kobj</name></expr></argument>, <argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_K_CONSTRUCTOR_TO_ENTRY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_kmod_init_term</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier><modifier>*</modifier></type><name>inits</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier><modifier>*</modifier></type><name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>inits</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>terms</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_paddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_ptrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>inits</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__kmod_init"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_inits</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_inits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>inits</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>n_inits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>*</operator><name>inits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_ptrs</name> <operator>=</operator> <name>n_inits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>terms</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__kmod_term"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_terms</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_terms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>terms</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name>n_terms</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>*</operator><name>terms</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_ptrs</name> <operator>=</operator> <name>n_terms</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>n_ptrs</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start_paddr</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n_ptrs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>start_paddr</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>target</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>K_RPTR</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>target</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>create_initterm_syms</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>R_BIN_ENTRY_TYPE_INIT</name></expr></argument>, <argument><expr><operator>*</operator><name>inits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>terms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>create_initterm_syms</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>R_BIN_ENTRY_TYPE_FINI</name></expr></argument>, <argument><expr><operator>*</operator><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kext_short_name</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sn</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>sn</name></expr> ?</condition><then> <expr><name>sn</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_initterm_syms</name><parameter_list>(<parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>pointers</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>pointers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>func_vaddr</name> <init>= <expr><name><name>pointers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>text_start</name> <init>= <expr><name><name>kext</name><operator>-&gt;</operator><name>vaddr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>text_end</name> <init>= <expr><name>text_start</name> <operator>+</operator> <name><name>kext</name><operator>-&gt;</operator><name>text_range</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text_start</name> <operator>==</operator> <name>text_end</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_start</name> <operator>&gt;</operator> <name>func_vaddr</name> <operator>||</operator> <name>func_vaddr</name> <operator>&gt;=</operator> <name>text_end</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%d"</literal></expr></argument>, <argument><expr><call><name>kext_short_name</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>R_BIN_ENTRY_TYPE_INIT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"init"</literal></expr> </then><else>: <expr><literal type="string">"fini"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>func_vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>func_vaddr</name> <operator>-</operator> <name><name>kext</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>process_constructors</name><argument_list>(<argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>bool</name> <name>is_first</name></expr></argument>, <argument><expr><name>int</name> <name>mode</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>prefix</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"_mod_fini_func"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"_mod_term_func"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_BIN_ENTRY_TYPE_FINI</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"_mod_init_func"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>is_first</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>R_BIN_ENTRY_TYPE_INIT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>is_first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name>paddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr64</name> <init>= <expr><call><name>K_RPTR</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>paddr64</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name>paddr</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_K_CONSTRUCTOR_TO_ENTRY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ba</name> <init>= <expr><call><name>newEntry</name> <argument_list>(<argument><expr><name>paddr64</name></expr></argument>, <argument><expr><name>addr64</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_K_CONSTRUCTOR_TO_SYMBOL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%d"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>R_BIN_ENTRY_TYPE_INIT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"init"</literal></expr> </then><else>: <expr><literal type="string">"fini"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>addr64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>paddr64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RBinAddr</name> <modifier>*</modifier></type><name>newEntry</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>haddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>haddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>hpaddr</name></name> <operator>=</operator> <name>haddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xcf\xfa\xed\xfe"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>is_kernelcache_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>kobj</name> <init>= <expr><operator>(</operator><name>RKernelCacheObj</name><operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ensure_kexts_initialized</name> <argument_list>(<argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl>;</decl_stmt>
<macro><name>r_kext_index_foreach</name> <argument_list>(<argument>kobj-&gt;kexts</argument>, <argument>iter</argument>, <argument>kext</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>magicbytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>magicbytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>magicbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>magic</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MH_MAGIC_64</name></expr>:</case>
<expr_stmt><expr><call><name>sections_from_mach0</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown sub-bin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<expr_stmt><expr><call><name>sections_from_mach0</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>segment_command</name></expr></argument>)</argument_list> <modifier>*</modifier><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsegs</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>kobj</name><operator>-&gt;</operator><name>mach0</name><operator>-&gt;</operator><name>nsegs</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsegs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>kobj</name><operator>-&gt;</operator><name>mach0</name><operator>-&gt;</operator><name>segs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>segname</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segname</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_filter</name> <argument_list>(<argument><expr><name>segname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>segname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vmsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vmsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>fileoff</name></name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vmaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>prot2perm</name> <argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>initprot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prot2perm</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sections_from_mach0</name><argument_list>(<argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>prefix</name></expr></argument>, <argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"la_symbol_ptr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Cd %d[%d]"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>handle_data_sections</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name> <operator>+</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT_EXEC.__text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_data_sections</name><parameter_list>(<parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sect</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_cstring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_os_log"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_objc_methname"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_objc_classname"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_objc_methtype"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sect</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RKernelCacheObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>symbols_from_mach0</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>kernel_syms_by_addr</name> <init>= <expr><call><name>sdb_ht_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kernel_syms_by_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>enosys_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>ret</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>kernel_syms_by_addr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sym</name><operator>-&gt;</operator><name>dname</name></name></expr> ?</condition><then> <expr><name><name>sym</name><operator>-&gt;</operator><name>dname</name></name></expr> </then><else>: <expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enosys_addr</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"enosys"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enosys_addr</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>syscalls</name> <init>= <expr><call><name>resolve_syscalls</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>enosys_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>syscalls</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>syscalls</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>kernel_syms_by_addr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>syscalls</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>syscalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>subsystem</name> <init>= <expr><call><name>resolve_mig_subsystem</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>subsystem</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>subsystem</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>kernel_syms_by_addr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>subsystem</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>subsystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ensure_kexts_initialized</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kiter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>inits</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>terms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_kext_index_foreach</name> <argument_list>(<argument>obj-&gt;kexts</argument>, <argument>kiter</argument>, <argument>kext</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>magicbytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>magicbytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>magicbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>magic</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MH_MAGIC_64</name></expr>:</case>
<expr_stmt><expr><call><name>symbols_from_mach0</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>symbols_from_stubs</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>kernel_syms_by_addr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_constructors</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>R_K_CONSTRUCTOR_TO_SYMBOL</name></expr></argument>, <argument><expr><call><name>kext_short_name</name> <argument_list>(<argument><expr><name>kext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_kmod_init_term</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>kext</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown sub-bin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>inits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name>kernel_syms_by_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>symbols_from_mach0</name><argument_list>(<argument><expr><name>RList</name> <operator>*</operator><name>ret</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>int</name> <name>ordinal</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>symbol_t</name></name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_symbols</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dn</name> <init>= <expr><call><name>r_bin_demangle</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>dname</name></name> <operator>=</operator> <name>dn</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name><index>[<expr><name>p</name> <operator>-</operator> <name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>R_BIN_MACH0_SYMBOL_TYPE_LOCAL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"LOCAL"</literal></expr></then><else>: <expr><literal type="string">"GLOBAL"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name> <operator>+</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>ordinal</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_KERNEL_ADDR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; 0xfffffff000000000L) == 0xfffffff000000000L)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_r_sysent</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>sy_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sy_arg_munge32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>sy_return_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st16</name></type> <name>sy_narg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>sy_arg_bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>RSysEnt</name>;</typedef>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>resolve_syscalls</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>enosys_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>syscalls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSyscall</name> <modifier>*</modifier></type><name>syscall</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data_const</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>data_const_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_const_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_const_vaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__DATA_CONST.__const"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_const_offset</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_const_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_const_vaddr</name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_const_offset</name> <operator>||</operator> <operator>!</operator><name>data_const_size</name> <operator>||</operator> <operator>!</operator><name>data_const_vaddr</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_const</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>data_const_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_const</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>data_const_offset</name></expr></argument>, <argument><expr><name>data_const</name></expr></argument>, <argument><expr><name>data_const_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>data_const_size</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>data_const</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data_const</name> <operator>+</operator> <name>data_const_size</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cursor</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>test</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>test</name> <operator>==</operator> <name>enosys_addr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cursor</name> <operator>&gt;=</operator> <name>data_const</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>x</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>y</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_KERNEL_ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>IS_KERNEL_ADDR</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>y</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_KERNEL_ADDR</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>&lt;</operator> <name>data_const</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>syscalls</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_symbol_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syscalls</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>syscall</name> <operator>=</operator> <call><name>r_syscall_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syscall</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_syscall_setup</name> <argument_list>(<argument><expr><name>syscall</name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ios"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>syscall</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_syscall_free</name> <argument_list>(<argument><expr><name>syscall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sysent_vaddr</name> <init>= <expr><name>cursor</name> <operator>-</operator> <name>data_const</name> <operator>+</operator> <name>data_const_vaddr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"sysent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>sysent_vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>cursor</name> <operator>-</operator> <name>data_const</name> <operator>+</operator> <name>data_const_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"OBJECT"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>syscalls</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_syscalls</name> <init>= <expr><call><name>sdb_count</name> <argument_list>(<argument><expr><name><name>syscall</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cursor</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_syscalls</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSyscallItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_syscall_get</name> <argument_list>(<argument><expr><name>syscall</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"syscall.%d.%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>syscalls</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_syscall_item_free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>r_syscall_free</name> <argument_list>(<argument><expr><name>syscall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>syscalls</name></expr>;</return>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_syscall_free</name> <argument_list>(<argument><expr><name>syscall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>syscalls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>syscalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_MIG_SUBSYSTEM_SIZE</name></cpp:macro> <cpp:value>(4 * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_MIG_ROUTINE_SIZE</name></cpp:macro> <cpp:value>(5 * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_MIG_MAX_ROUTINES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>HtPP</name> <modifier>*</modifier></type><name>mig_hash_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdb_ht_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_MIG_INDEX_LEN</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><name><name>mig_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>mig_index</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>resolve_mig_subsystem</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>mig_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>subsystem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data_const</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>data_const_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_const_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_const_vaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>text_exec_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>text_exec_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>text_exec_vaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&amp;&amp;</operator> <name>incomplete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__DATA_CONST.__const"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_const_offset</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_const_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_const_vaddr</name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT_EXEC.__text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text_exec_offset</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_exec_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_exec_vaddr</name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_const_offset</name> <operator>||</operator> <operator>!</operator><name>data_const_size</name> <operator>||</operator> <operator>!</operator><name>data_const_vaddr</name> <operator>||</operator>
<operator>!</operator><name>text_exec_offset</name> <operator>||</operator> <operator>!</operator><name>text_exec_size</name> <operator>||</operator> <operator>!</operator><name>text_exec_vaddr</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_const</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>data_const_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_const</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>data_const_offset</name></expr></argument>, <argument><expr><name>data_const</name></expr></argument>, <argument><expr><name>data_const_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>data_const_size</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_symbol_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subsystem</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mig_hash</name> <operator>=</operator> <call><name>mig_hash_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mig_hash</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>data_const</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data_const</name> <operator>+</operator> <name>data_const_size</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cursor</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>subs_p</name> <init>= <expr><call><name>K_PPTR</name> <argument_list>(<argument><expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>subs_p</name> <operator>&lt;</operator> <name>text_exec_vaddr</name> <operator>||</operator> <name>subs_p</name> <operator>&gt;=</operator> <name>text_exec_vaddr</name> <operator>+</operator> <name>text_exec_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>subs_min_idx</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>subs_max_idx</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>n_routines</name> <init>= <expr><operator>(</operator><name>subs_max_idx</name> <operator>-</operator> <name>subs_min_idx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>subs_min_idx</name> <operator>&gt;=</operator> <name>subs_max_idx</name> <operator>||</operator> <operator>(</operator><name>subs_max_idx</name> <operator>-</operator> <name>subs_min_idx</name><operator>)</operator> <operator>&gt;</operator> <name>K_MIG_MAX_ROUTINES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>routines</name> <init>= <expr><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>n_routines</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>routines</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>array_cursor</name> <init>= <expr><name>cursor</name> <operator>+</operator> <name>K_MIG_SUBSYSTEM_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>end_array</name> <init>= <expr><name>array_cursor</name> <operator>+</operator> <name>n_routines</name> <operator>*</operator> <name>K_MIG_ROUTINE_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_consistent</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>array_cursor</name> <operator>&lt;</operator> <name>end_array</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>should_be_null</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>array_cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_null</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_consistent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>routine_p</name> <init>= <expr><call><name>K_PPTR</name> <argument_list>(<argument><expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>array_cursor</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>routine_p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>routine_p</name> <operator>&lt;</operator> <name>text_exec_vaddr</name> <operator>||</operator> <name>routine_p</name> <operator>&gt;=</operator> <name>text_exec_vaddr</name> <operator>+</operator> <name>text_exec_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_consistent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>routines</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>routine_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cursor</name> <operator>+=</operator> <name>K_MIG_ROUTINE_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>is_consistent</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>n_routines</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>routine_p</name> <init>= <expr><name><name>routines</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>routine_p</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>routines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name>idx</name> <operator>+</operator> <name>subs_min_idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sdb_ht_find</name> <argument_list>(<argument><expr><name>mig_hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"mig.%d.%s"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"mig.%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>routine_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name>text_exec_vaddr</name> <operator>+</operator> <name>text_exec_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"OBJECT"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>subsystem</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>K_MIG_SUBSYSTEM_SIZE</name> <operator>+</operator> <name>n_routines</name> <operator>*</operator> <name>K_MIG_ROUTINE_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>routines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name>mig_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>subsystem</name></expr>;</return>

<label><name>beach</name>:</label>
<if_stmt><if>if <condition>(<expr><name>subsystem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>subsystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mig_hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name>mig_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>extract_addr_from_code</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>arm64_code</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>vaddr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>adrp</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>arm64_code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adrp_offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>adrp</name> <operator>&amp;</operator> <literal type="number">0x60000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>adrp</name> <operator>&amp;</operator> <literal type="number">0xffffe0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>adrp_offset</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ldr</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>arm64_code</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>ldr</name> <operator>&amp;</operator> <literal type="number">0x3ffc00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>ldr</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>symbols_from_stubs</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>kernel_syms_by_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RKext</name> <modifier>*</modifier></type><name>kext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RStubsInfo</name> <modifier>*</modifier></type><name>stubs_info</name> <init>= <expr><call><name>get_stubs_info</name><argument_list>(<argument><expr><name><name>kext</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>, <argument><expr><name><name>kext</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stubs_info</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>stubs_cursor</name> <init>= <expr><name><name>stubs_info</name><operator>-&gt;</operator><name>stubs</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>stubs_end</name> <init>= <expr><name>stubs_cursor</name> <operator>+</operator> <name><name>stubs_info</name><operator>-&gt;</operator><name>stubs</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>stubs_cursor</name> <operator>&lt;</operator> <name>stubs_end</name></expr>;</condition> <incr><expr><name>stubs_cursor</name> <operator>+=</operator> <literal type="number">12</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>arm64_code</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>stubs_cursor</name></expr></argument>, <argument><expr><name>arm64_code</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><name>stubs_cursor</name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr_in_got</name> <init>= <expr><call><name>extract_addr_from_code</name> <argument_list>(<argument><expr><name>arm64_code</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>target_addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>level</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_got</name> <init>= <expr><name>addr_in_got</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name>offset_in_got</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sdb_ht_find</name> <argument_list>(<argument><expr><name>kernel_syms_by_addr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"stub.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>stubs_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"LOCAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>ordinal</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_in_got</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>||</operator> <name>target_addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ensure_kexts_initialized</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RKext</name> <modifier>*</modifier></type><name>remote_kext</name> <init>= <expr><call><name>r_kext_index_vget</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kexts</name></name></expr></argument>, <argument><expr><name>target_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote_kext</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>remote_sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote_sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"exp.%s.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>kext_short_name</name> <argument_list>(<argument><expr><name>remote_kext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>target_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>target_addr</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>pa2va_exec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>remote_sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>ordinal</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>remote_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>local_sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"stub.%s.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>kext_short_name</name> <argument_list>(<argument><expr><name>remote_kext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>stubs_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"GLOBAL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>ordinal</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>local_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>stubs_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RStubsInfo</name> <modifier>*</modifier></type><name>get_stubs_info</name><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>, <argument><expr><name>RKernelCacheObj</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStubsInfo</name> <modifier>*</modifier></type><name>stubs_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RStubsInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stubs_info</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__DATA_CONST.__got"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stubs_info</name><operator>-&gt;</operator><name>got</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stubs_info</name><operator>-&gt;</operator><name>got</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stubs_info</name><operator>-&gt;</operator><name>got_addr</name></name> <operator>=</operator> <call><name>K_PPTR</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>incomplete</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT_EXEC.__stubs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stubs_info</name><operator>-&gt;</operator><name>stubs</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stubs_info</name><operator>-&gt;</operator><name>stubs</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>incomplete</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incomplete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>stubs_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>stubs_info</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>big_endian</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"kernelcache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ios"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"iOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"xnu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"kernel-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>big_endian</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">8LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RKernelCacheObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_baddr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_kernel_cache_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RKernelCacheObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_kernel_cache_free</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>prelink_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cf_value_dict_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>prelink_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>prelink_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kexts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_kext_index_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kexts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>kexts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_rebase_info_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRebaseInfo</name> <modifier>*</modifier></type><name>r_rebase_info_new_from_mach0</name><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>cache_buf</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mach0</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFileRange</name> <modifier>*</modifier></type><name>rebase_ranges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>starts_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>starts_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__TEXT.__thread_starts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>starts_offset</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>starts_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>kernel_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>segment_command</name></expr></argument>)</argument_list> <modifier>*</modifier><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsegs</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>mach0</name><operator>-&gt;</operator><name>nsegs</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsegs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>mach0</name><operator>-&gt;</operator><name>segs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>segname</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segname</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>segname</name></expr></argument>, <argument><expr><literal type="string">"__TEXT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>segname</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kernel_base</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vmaddr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>starts_offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>starts_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>kernel_base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_starts</name> <init>= <expr><name>starts_size</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_starts</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rebase_ranges</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RFileRange</name></expr></argument>, <argument><expr><name>n_starts</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rebase_ranges</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>multiplier</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>n_starts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>starts_offset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>multiplier</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rebase_ranges</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rebase_ranges</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RRebaseInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rebase_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>rebase_ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>n_ranges</name></name> <operator>=</operator> <name>n_starts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>multiplier</name></name> <operator>=</operator> <name>multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>kernel_base</name></name> <operator>=</operator> <name>kernel_base</name></expr>;</expr_stmt>

<return>return <expr><name>rebase_info</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rebase_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_rebase_info_free</name><parameter_list>(<parameter><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_rebase_info_populate</name><parameter_list>(<parameter><decl><type><name>RRebaseInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info_populated</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info_populated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>n_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sections</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mach0</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>r_rebase_offset_to_paddr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sections</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><call><name>iterate_rebase_list</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>multiplier</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_rebase_offset_to_paddr</name> <parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>kernel_base</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>&lt;=</operator> <name>vaddr</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>&lt;</operator> <operator>(</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <operator>(</operator><name>vaddr</name> <operator>-</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>iterate_rebase_list</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>multiplier</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_offset</name></decl></parameter>, <parameter><decl><type><name>ROnRebaseFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>cursor</name> <init>= <expr><name>start_offset</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>decorated_addr</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>carry_on</name> <init>= <expr><call><name>func</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>decorated_addr</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>carry_on</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>decorated_addr</name> <operator>&gt;&gt;</operator> <literal type="number">51</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>*</operator> <name>multiplier</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swizzle_io_read</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>original_io_read</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <operator>&amp;</operator><name>kernelcache_io_read</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kernelcache_io_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name><name>io</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>fd</name><operator>-&gt;</operator><name>fd</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>to_remove</name> <init>= <expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>to_remove</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_bin_files</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>pending_bin_files</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>fd</name><operator>-&gt;</operator><name>fd</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name> <operator>||</operator> <operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebasing_buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <operator>==</operator> <operator>&amp;</operator><name>kernelcache_io_read</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>fd</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_rebase_info_populate</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>internal_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>internal_buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>internal_buf_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>internal_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>internal_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>internal_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>internal_buffer</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>internal_buf_size</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>internal_buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rebase_buffer</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>internal_buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>internal_buffer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_buffer</name><parameter_list>(<parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>rebasing_buffer</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>rebasing_buffer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>eob</name> <init>= <expr><name>off</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRebaseCtx</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>eob</name></name> <operator>=</operator> <name>eob</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>n_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>off</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;=</operator> <name>eob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iterate_rebase_list</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cache_buf</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>multiplier</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><name>ROnRebaseFunc</name><operator>)</operator> <name>on_rebase_pointer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>rebasing_buffer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>on_rebase_pointer</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RRebaseCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>in_buf</name> <init>= <expr><name>offset</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>in_buf</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>||</operator> <operator>(</operator><name>in_buf</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RParsedPointer</name></type> <name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_parse_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>decorated_addr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>in_buf</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_parse_pointer</name><parameter_list>(<parameter><decl><type><name>RParsedPointer</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>decorated_addr</name></decl></parameter>, <parameter><decl><type><name>RKernelCacheObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decorated_addr</name> <operator>&amp;</operator> <literal type="number">0x4000000000000000LL</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decorated_addr</name> <operator>&amp;</operator> <literal type="number">0x8000000000000000LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>kernel_base</name></name> <operator>+</operator> <operator>(</operator><name>decorated_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFLL</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>decorated_addr</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00000000000000LL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>decorated_addr</name> <operator>&amp;</operator> <literal type="number">0x7ffffffffffLL</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decorated_addr</name> <operator>&amp;</operator> <literal type="number">0x40000000000LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>address</name></name> <operator>|=</operator> <literal type="number">0xfffc0000000000LL</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>decorated_addr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_xnu_kernelcache</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"kernelcache"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"kernelcache bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,
<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,
<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_kernelcache</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
