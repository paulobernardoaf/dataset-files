<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_bflt.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bflt/bflt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <call><name>r_bin_bflt_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>bin_obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_bflt_obj</name> <operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>r_bflt_get_entry</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__patch_reloc</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>addr_to_patch</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>data_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>addr_to_patch</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>search_old_relocation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>reloc_table</name></decl></parameter>,
<parameter><decl><type><name>ut32</name></type> <name>addr_to_patch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_reloc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_reloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr_to_patch</name> <operator>==</operator> <name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>patch_relocs</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <name>R_PERM_W</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(
<argument><expr><literal type="string">"Warning: please run r2 with -e io.cache=true to patch "</literal>
<literal type="string">"relocations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>got_table</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>got_table</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>got_table</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>n_got</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>__patch_reloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>got_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr></argument>,
<argument><expr><name><name>got_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>reloc</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>got_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>got_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>reloc_table</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>reloc_table</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>reloc_table</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><call><name>search_old_relocation</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>,
<argument><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__patch_reloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>reloc_table</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr></argument>,
<argument><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__patch_reloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr></argument>,
<argument><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>reloc</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>reloc_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_ngot_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data_size</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n_got</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>n_got</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>n_got</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>entry</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_start</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>offset</name> <operator>+</operator> <name>i</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entry</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_GOT_ENTRY</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>n_got</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>relocs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_bflt_obj</name> <operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>n_got</name></decl>, <decl><type ref="prev"/><name>amount</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAT_FLAG_GOTPIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_got</name> <operator>=</operator> <call><name>get_ngot_entries</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_got</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <name>n_got</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>amount</name> <argument_list type="generic">&lt; <argument><expr><name>n_got</name> <operator>||</operator> <name>amount</name></expr></argument> &gt;</argument_list></name> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>got_table</name> <init>= <expr><call><name>calloc</name> <argument_list>(
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n_got</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>reloc_struct_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>got_table</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_got</name></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>got_entry</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_start</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_start</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>data_start</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>got_entry</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_GOT_ENTRY</name> <argument_list>(<argument><expr><name>got_entry</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>got_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name> <operator>=</operator> <name>got_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>got_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>=</operator> <name>got_entry</name> <operator>+</operator> <name>BFLT_HDR_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>n_got</name></name> <operator>=</operator> <name>n_got</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>got_table</name></name> <operator>=</operator> <name>got_table</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_reloc</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>amount</name> <operator>=</operator> <name>n_reloc</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>reloc_struct_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>amount</name> <argument_list type="generic">&lt; <argument><expr><name>n_reloc</name> <operator>||</operator> <name>amount</name></expr></argument> &gt;</argument_list></name> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>reloc_table</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reloc_table</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <name>n_reloc</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>amount</name> <argument_list type="generic">&lt; <argument><expr><name>n_reloc</name> <operator>||</operator> <name>amount</name></expr></argument> &gt;</argument_list></name> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>reloc_pointer_table</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reloc_pointer_table</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_start</name></name> <operator>+</operator> <name>amount</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_start</name></name> <operator>+</operator> <name>amount</name> <operator>&lt;</operator> <name>amount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_pointer_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>reloc_start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>reloc_pointer_table</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>amount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_pointer_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_reloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_offset</name> <init>=
<expr><call><name>r_swap_ut32</name> <argument_list>(<argument><expr><name><name>reloc_pointer_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>BFLT_HDR_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reloc_offset</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>bss_end</name></name> <operator>&amp;&amp;</operator> <name>reloc_offset</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_fixed</name></decl>, <decl><type ref="prev"/><name>reloc_data_offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reloc_offset</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>reloc_offset</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>reloc_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_pointer_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>reloc_offset</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>reloc_fixed</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"problem while reading relocation entries\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_pointer_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reloc_data_offset</name> <operator>=</operator> <call><name>r_swap_ut32</name> <argument_list>(<argument><expr><name>reloc_fixed</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>BFLT_HDR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name> <operator>=</operator> <name>reloc_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>=</operator> <name>reloc_data_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>reloc</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>reloc_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr_to_patch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc_pointer_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>reloc_table</name></name> <operator>=</operator> <name>reloc_table</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
<label><name>out_error</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_bflt_obj</name> <operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>info</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <ternary><condition><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"bflt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"bflt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"bFLT (Executable file)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"bFLT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_bflt_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_bflt</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bflt"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"bFLT format r_bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,
<expr><operator>.</operator><name>patch_relocs</name> <operator>=</operator> <operator>&amp;</operator><name>patch_relocs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_bflt</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
